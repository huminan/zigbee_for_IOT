###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         06/Apr/2018  15:28:33 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\Source\Switch_End.c                 #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0             #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\Source\Switc #
#                          h_End.c -D HOLD_AUTO_START -D BUILD_ALL_DEVICES    #
#                          -D REFLECTOR -D NV_INIT -D xNV_RESTORE -D          #
#                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D            #
#                          xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC -lC              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\ -lA    #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\        #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\ -e      #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\ -I                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\Switch_ #
#                          End.lst                                            #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\Switch_E #
#                          nd.r51                                             #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Switch_End.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include "sapi.h"
      7          
      8          #include "SensorSys_End.h"
      9          #include "device.h"
     10          #include "DebugTrace.h"
     11          
     12          #if !defined( WIN32 )
     13          	#include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     14          #endif
     15          
     16          /* HAL */
     17          #include "hal_led.h"
     18          #include "hal_key.h"
     19          #include "hal_uart.h"
     20          
     21          /*********************************************************************
     22           * MACROS
     23           */
     24          #define SW_UPDATE_EVT   0x5000
     25          
     26          /*********************************************************************
     27           * CONSTANTS
     28           */
     29          
     30          /*********************************************************************
     31           * TYPEDEFS
     32           */
     33          
     34          /*********************************************************************
     35           * GLOBAL VARIABLES
     36           */
     37          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     38          byte Switch_TaskID;
   \                     Switch_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     39          uint8 swCnt;
   \                     swCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     40          
     41          
     42          // Switch 端点的簇ID
     43          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     44          cId_t Switch_ClusterList[SWITCH_MAX_CLUSTERS] =
   \                     Switch_ClusterList:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for Switch_ClusterList>`
   \   000008                REQUIRE __INIT_XDATA_I
     45          {
     46              PORT_INIT_CLUSTER,
     47              OPERATE_CLUSTER,
     48              LOOP_OPERATE_CLUSTER,
     49              DELETE_CLUSTER
     50          };
     51          
     52          // Switch 端点简单描述符

   \                                 In  segment XDATA_I, align 1, keep-with-next
     53          SimpleDescriptionFormat_t Switch_SimpleDesc[SWITCH_NUM_MAX] =
   \                     Switch_SimpleDesc:
   \   000000                DS 60
   \   00003C                REQUIRE `?<Initializer for Switch_SimpleDesc>`
   \   00003C                REQUIRE __INIT_XDATA_I
     54          {
     55          	SWITCH_ENDPOINT,           //  int Endpoint;
     56          	SYS_PROFID,                //  uint16 AppProfId[2];
     57          	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
     58          	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
     59          	SYS_FLAGS,                 //  int   AppFlags:4;
     60          	SWITCH_MAX_CLUSTERS,        //  byte  AppNumInClusters;
     61          	(cId_t *)Switch_ClusterList,  //  byte *pAppInClusterList;
     62          	0,                          //  byte  AppNumInClusters;
     63          	NULL                         //  byte *pAppInClusterList;
     64          };
     65          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     66          endPointDesc_t Switch_epDesc[SWITCH_NUM_MAX];
   \                     Switch_epDesc:
   \   000000                DS 30
   \   00001E                REQUIRE __INIT_XDATA_Z
     67          
     68          /*********************************************************************
     69           * EXTERNAL VARIABLES
     70           */
     71          extern uint8 myAppState;
     72          extern uint8 keys_shift;
     73          extern uint8 type_join;
     74          /*********************************************************************
     75           * EXTERNAL FUNCTIONS
     76           */
     77          
     78          /*********************************************************************
     79           * LOCAL VARIABLES
     80           */
     81          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          afAddrType_t Switch_DstAddr;
   \                     Switch_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          SensorControl_t SwitchControl[SWITCH_NUM_MAX]; 
   \                     SwitchControl:
   \   000000                DS 35
   \   000023                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     84          uint8 swTimenow;
   \                     swTimenow:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     85          
     86          /*********************************************************************
     87           * LOCAL FUNCTIONS
     88           */
     89          void Switch_Init( byte task_id );
     90          UINT16 Switch_ProcessEvent( byte task_id, UINT16 events );
     91          
     92          static void Switch_ReceiveDataIndication( uint16 source, uint8 endPoint, 
     93                                        uint16 command, uint16 len, uint8 *pData  );
     94          static void Switch_AllowBindConfirm( uint16 source );
     95          static void SwitchAction( uint8 sw, uint16 command, uint16 len, uint8 *pData );
     96          static void SwitchUpdate(uint8 sw);
     97          /*********************************************************************
     98           * @fn      Switch_Init
     99           *
    100           * @brief   Initialization function for the Generic App Task.
    101           *          This is called during initialization and should contain
    102           *          any application specific initialization (ie. hardware
    103           *          initialization/setup, table initialization, power up
    104           *          notificaiton ... ).
    105           *
    106           * @param   task_id - the ID assigned by OSAL.  This ID should be
    107           *                    used to send messages and set timers.
    108           *
    109           * @return  none
    110           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    111          void Switch_Init( byte task_id )
   \                     Switch_Init:
    112          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    113                  char i;
    114          	Switch_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Switch_TaskID
   \   000009   F0           MOVX    @DPTR,A
    115          
    116          	// Device hardware initialization can be added here or in main() (Zmain.c).
    117          	// If the hardware is application specific - add it here.
    118          	// If the hardware is other parts of the device add it in main().
    119          
    120          	Switch_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#Switch_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    121          	Switch_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    122          	Switch_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#Switch_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    123                  
    124                  for( i=0; i<SWITCH_NUM_MAX; i++)
   \   000017   FF           MOV     R7,A
    125                  {
    126                      // Fill out the endpoint description.
    127                      Switch_epDesc[i].endPoint = SWITCH_ENDPOINT+i;
   \                     ??Switch_Init_0:
   \   000018   8F82         MOV     DPL,R7
   \   00001A   A882         MOV     R0,DPL
   \   00001C   E8           MOV     A,R0
   \   00001D   75F006       MOV     B,#0x6
   \   000020   A4           MUL     AB
   \   000021   FA           MOV     R2,A
   \   000022   ABF0         MOV     R3,B
   \   000024   74..         MOV     A,#Switch_epDesc & 0xff
   \   000026   2A           ADD     A,R2
   \   000027   FA           MOV     R2,A
   \   000028   74..         MOV     A,#(Switch_epDesc >> 8) & 0xff
   \   00002A   3B           ADDC    A,R3
   \   00002B   FB           MOV     R3,A
   \   00002C   743C         MOV     A,#0x3c
   \   00002E   2F           ADD     A,R7
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   F0           MOVX    @DPTR,A
    128                      Switch_epDesc[i].task_id = &Switch_TaskID;
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#Switch_TaskID & 0xff
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#(Switch_TaskID >> 8) & 0xff
   \   00003B   F0           MOVX    @DPTR,A
    129                      Switch_SimpleDesc[i] = Switch_SimpleDesc[0];
   \   00003C   E8           MOV     A,R0
   \   00003D   75F00C       MOV     B,#0xc
   \   000040   A4           MUL     AB
   \   000041   F8           MOV     R0,A
   \   000042   A9F0         MOV     R1,B
   \   000044   74..         MOV     A,#Switch_SimpleDesc & 0xff
   \   000046   28           ADD     A,R0
   \   000047   F8           MOV     R0,A
   \   000048   74..         MOV     A,#(Switch_SimpleDesc >> 8) & 0xff
   \   00004A   39           ADDC    A,R1
   \   00004B   F9           MOV     R1,A
   \   00004C   90....       MOV     DPTR,#Switch_SimpleDesc
   \   00004F   E8           MOV     A,R0
   \   000050   FC           MOV     R4,A
   \   000051   E9           MOV     A,R1
   \   000052   FD           MOV     R5,A
   \   000053   740C         MOV     A,#0xc
   \   000055   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    130                      Switch_epDesc[i].simpleDesc
    131          						= (SimpleDescriptionFormat_t *)&(Switch_SimpleDesc[i]);
   \   000058   8A82         MOV     DPL,R2
   \   00005A   8B83         MOV     DPH,R3
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    132                      Switch_SimpleDesc[i].EndPoint += i;
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   2F           ADD     A,R7
   \   00006A   12....       LCALL   ?Subroutine7 & 0xFFFF
    133          	    Switch_epDesc[i].latencyReq = noLatencyReqs;
   \                     ??CrossCallReturnLabel_14:
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
    134                      
    135                      // Register the endpoint description with the AF
    136          	    afRegister( &(Switch_epDesc[i]) );
   \   00006F                ; Setup parameters for call to function afRegister
   \   00006F   12....       LCALL   ??afRegister?relay
    137                  }
   \   000072   0F           INC     R7
   \   000073   EF           MOV     A,R7
   \   000074   C3           CLR     C
   \   000075   9405         SUBB    A,#0x5
   \   000077   409F         JC      ??Switch_Init_0
    138           
    139          	//	ZDO_RegisterForZDOMsg( Switch_TaskID, End_Device_Bind_rsp );
    140          	ZDO_RegisterForZDOMsg( Switch_TaskID, Match_Desc_rsp );
   \   000079                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000079   7A06         MOV     R2,#0x6
   \   00007B   7B80         MOV     R3,#-0x80
   \   00007D   90....       MOV     DPTR,#Switch_TaskID
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    141          }
   \   000085   7F01         MOV     R7,#0x1
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    142          
    143          /*********************************************************************
    144           * @fn      Switch_ProcessEvent
    145           *
    146           * @brief   Generic Application Task event processor.  This function
    147           *          is called to process all events for the task.  Events
    148           *          include timers, messages and any other user defined events.
    149           *
    150           * @param   task_id  - The OSAL assigned task ID.
    151           * @param   events - events to process.  This is a bit map and can
    152           *                   contain more than one event.
    153           *
    154           * @return  none
    155           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          UINT16 Switch_ProcessEvent( byte task_id, UINT16 events )
   \                     Switch_ProcessEvent:
    157          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    158              afIncomingMSGPacket_t *MSGpkt = NULL;
    159              (void)task_id;  // Intentionally unreferenced parameter
    160          
    161              if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??Switch_ProcessEvent_0 & 0xFFFF
    162              {
    163                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   8016         SJMP    ??Switch_ProcessEvent_1
    164                  while ( MSGpkt )
    165                  {
    166                    switch ( MSGpkt->hdr.event )
    167                    {
    168                      case AF_INCOMING_MSG_CMD:
    169                          Switch_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
    170                                                  MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
    171                          break;
    172                        
    173                      case ZDO_MATCH_DESC_RSP_SENT:
    174                          Switch_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
   \                     ??Switch_ProcessEvent_2:
   \   000012                ; Setup parameters for call to function Sys_AllowBindConfirm
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FA           MOV     R2,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??Sys_AllowBindConfirm?relay
    175                          break;
    176                    }
    177                    // Release the memory
    178                    osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Switch_ProcessEvent_3:
   \   00001C                ; Setup parameters for call to function osal_msg_deallocate
   \   00001C   AA..         MOV     R2,?V0 + 0
   \   00001E   AB..         MOV     R3,?V0 + 1
   \   000020   12....       LCALL   ??osal_msg_deallocate?relay
    179              
    180                    // Next
    181                    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Switch_TaskID );
   \   000023                ; Setup parameters for call to function osal_msg_receive
   \   000023   90....       MOV     DPTR,#Switch_TaskID
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \                     ??Switch_ProcessEvent_1:
   \   000028   12....       LCALL   ??osal_msg_receive?relay
   \   00002B   8A..         MOV     ?V0 + 0,R2
   \   00002D   8B..         MOV     ?V0 + 1,R3
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   45..         ORL     A,?V0 + 1
   \   000033   605A         JZ      ??Switch_ProcessEvent_4
   \   000035   85..82       MOV     DPL,?V0 + 0
   \   000038   85..83       MOV     DPH,?V0 + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   24E6         ADD     A,#-0x1a
   \   00003E   6006         JZ      ??Switch_ProcessEvent_5
   \   000040   2448         ADD     A,#0x48
   \   000042   60CE         JZ      ??Switch_ProcessEvent_2
   \   000044   80D6         SJMP    ??Switch_ProcessEvent_3
   \                     ??Switch_ProcessEvent_5:
   \   000046                ; Setup parameters for call to function SwitchAction
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   2422         ADD     A,#0x22
   \   00004A   F582         MOV     DPL,A
   \   00004C   E5..         MOV     A,?V0 + 1
   \   00004E   3400         ADDC    A,#0x0
   \   000050   F583         MOV     DPH,A
   \   000052   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000055   E5..         MOV     A,?V0 + 0
   \   000057   2420         ADD     A,#0x20
   \   000059   F582         MOV     DPL,A
   \   00005B   E5..         MOV     A,?V0 + 1
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FC           MOV     R4,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FD           MOV     R5,A
   \   000066   85..82       MOV     DPL,?V0 + 0
   \   000069   85..83       MOV     DPH,?V0 + 1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FA           MOV     R2,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   FB           MOV     R3,A
   \   000075   E5..         MOV     A,?V0 + 0
   \   000077   2414         ADD     A,#0x14
   \   000079   F582         MOV     DPL,A
   \   00007B   E5..         MOV     A,?V0 + 1
   \   00007D   3400         ADDC    A,#0x0
   \   00007F   F583         MOV     DPH,A
   \   000081   E0           MOVX    A,@DPTR
   \   000082   24C4         ADD     A,#-0x3c
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??SwitchAction?relay
   \   000088   7402         MOV     A,#0x2
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   808D         SJMP    ??Switch_ProcessEvent_3
    182                  }
    183                  return (events ^ SYS_EVENT_MSG);
   \                     ??Switch_ProcessEvent_4:
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   6480         XRL     A,#0x80
   \   000094   FB           MOV     R3,A
   \   000095   02....       LJMP    ??Switch_ProcessEvent_6 & 0xFFFF
    184              }
    185              if( (events & 0xFF00) & SW_UPDATE_EVT )
   \                     ??Switch_ProcessEvent_0:
   \   000098   EF           MOV     A,R7
   \   000099   5450         ANL     A,#0x50
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??CrossCallReturnLabel_41 & 0xFFFF
    186              {
    187                  uint8 sw;
    188                  sw = (uint8)(events);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   F5..         MOV     ?V0 + 0,A
    189                  uint8 status_m;
    190                  status_m = SwitchControl[sw].status;
   \   0000A3   75F007       MOV     B,#0x7
   \   0000A6   A4           MUL     AB
   \   0000A7   F8           MOV     R0,A
   \   0000A8   A9F0         MOV     R1,B
   \   0000AA   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000AD   F5..         MOV     ?V0 + 1,A
    191                  if(SwitchControl[sw].msg[status_m].hour)
   \   0000AF   75F006       MOV     B,#0x6
   \   0000B2   A4           MUL     AB
   \   0000B3   FA           MOV     R2,A
   \   0000B4   ABF0         MOV     R3,B
   \   0000B6   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   603F         JZ      ??Switch_ProcessEvent_7
    192                  {
    193                      if(SwitchControl[sw].msg[status_m].min == 0)
   \   0000BC   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000BF   7035         JNZ     ??Switch_ProcessEvent_8
    194                      {
    195                          (SwitchControl[sw].msg[status_m].hour)--;
   \   0000C1   EE           MOV     A,R6
   \   0000C2   75F007       MOV     B,#0x7
   \   0000C5   A4           MUL     AB
   \   0000C6   F8           MOV     R0,A
   \   0000C7   A9F0         MOV     R1,B
   \   0000C9   74..         MOV     A,#SwitchControl & 0xff
   \   0000CB   28           ADD     A,R0
   \   0000CC   F8           MOV     R0,A
   \   0000CD   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   0000CF   39           ADDC    A,R1
   \   0000D0   F9           MOV     R1,A
   \   0000D1   E5..         MOV     A,?V0 + 1
   \   0000D3   75F006       MOV     B,#0x6
   \   0000D6   A4           MUL     AB
   \   0000D7   FA           MOV     R2,A
   \   0000D8   ABF0         MOV     R3,B
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   8983         MOV     DPH,R1
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   2A           ADD     A,R2
   \   0000E0   FC           MOV     R4,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   3B           ADDC    A,R3
   \   0000E4   8C82         MOV     DPL,R4
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   14           DEC     A
   \   0000ED   F0           MOVX    @DPTR,A
    196                          SwitchControl[sw].msg[status_m].min = 59;
   \   0000EE   12....       LCALL   ?Subroutine6 & 0xFFFF
    197                      }
   \                     ??CrossCallReturnLabel_13:
   \   0000F1   A3           INC     DPTR
   \   0000F2   743B         MOV     A,#0x3b
   \   0000F4   8045         SJMP    ??CrossCallReturnLabel_3
    198                      else
    199                        (SwitchControl[sw].msg[status_m].min)--;
   \                     ??Switch_ProcessEvent_8:
   \   0000F6   12....       LCALL   ?Subroutine1 & 0xFFFF
    200                      osal_start_timerEx(Switch_TaskID, events, 60000); // calc 1min
    201                  }
   \                     ??CrossCallReturnLabel_2:
   \   0000F9   8040         SJMP    ??CrossCallReturnLabel_3
   \   0000FB                ; Setup parameters for call to function osal_start_timerEx
    202                  else
    203                  {
    204                      if(SwitchControl[sw].msg[status_m].min == 0)
   \                     ??Switch_ProcessEvent_7:
   \   0000FB   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000FE   7038         JNZ     ??Switch_ProcessEvent_9
    205                      {
    206                          if(SwitchControl[sw].msg[status_m].sec == 0)
   \   000100   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000103   7007         JNZ     ??Switch_ProcessEvent_10
    207                              SwitchUpdate(sw);
   \   000105                ; Setup parameters for call to function SwitchUpdate
   \   000105   A9..         MOV     R1,?V0 + 0
   \   000107   12....       LCALL   ??SwitchUpdate?relay
   \   00010A   8014         SJMP    ??CrossCallReturnLabel_40
    208                          else
    209                              osal_start_timerEx(Switch_TaskID, events, (SwitchControl[sw].msg[status_m].sec)*1000);
   \                     ??Switch_ProcessEvent_10:
   \   00010C                ; Setup parameters for call to function osal_start_timerEx
   \   00010C   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00010F   FC           MOV     R4,A
   \   000110   75F0E8       MOV     B,#-0x18
   \   000113   A4           MUL     AB
   \   000114   CC           XCH     A,R4
   \   000115   A8F0         MOV     R0,B
   \   000117   75F003       MOV     B,#0x3
   \   00011A   A4           MUL     AB
   \   00011B   28           ADD     A,R0
   \   00011C   FD           MOV     R5,A
   \   00011D   12....       LCALL   ?Subroutine14 & 0xFFFF
    210                              SwitchControl[sw].msg[status_m].sec = 0;
   \                     ??CrossCallReturnLabel_40:
   \   000120   E5..         MOV     A,?V0 + 1
   \   000122   75F006       MOV     B,#0x6
   \   000125   A4           MUL     AB
   \   000126   F8           MOV     R0,A
   \   000127   A9F0         MOV     R1,B
   \   000129   EE           MOV     A,R6
   \   00012A   75F007       MOV     B,#0x7
   \   00012D   A4           MUL     AB
   \   00012E   FA           MOV     R2,A
   \   00012F   ABF0         MOV     R3,B
   \   000131   12....       LCALL   ?Subroutine15 & 0xFFFF
    211                      }
   \                     ??CrossCallReturnLabel_28:
   \   000134   E4           CLR     A
   \   000135   F0           MOVX    @DPTR,A
   \   000136   800B         SJMP    ??CrossCallReturnLabel_41
    212                      else
    213                      {
    214                        (SwitchControl[sw].msg[status_m].min)--;
   \                     ??Switch_ProcessEvent_9:
   \   000138   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00013B   F0           MOVX    @DPTR,A
    215                        osal_start_timerEx(Switch_TaskID, events, 60000); // calc 1min
   \   00013C                ; Setup parameters for call to function osal_start_timerEx
   \   00013C   7C60         MOV     R4,#0x60
   \   00013E   7DEA         MOV     R5,#-0x16
   \   000140   12....       LCALL   ?Subroutine14 & 0xFFFF
    216                      }
    217                  }
    218                  return (events ^ events);
   \                     ??CrossCallReturnLabel_41:
   \   000143   7A00         MOV     R2,#0x0
   \   000145   7B00         MOV     R3,#0x0
   \                     ??Switch_ProcessEvent_6:
   \   000147   7F06         MOV     R7,#0x6
   \   000149   02....       LJMP    ?BANKED_LEAVE_XDATA
    219              }
    220              
    221              return 0;
    222          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine21_0
   \   000004                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   90....       MOV     DPTR,#Switch_TaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_start_timerEx?relay
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2A           ADD     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3B           ADDC    A,R3
   \   00000A   8882         MOV     DPL,R0
   \   00000C   F583         MOV     DPH,A
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E5..         MOV     A,?V0 + 1
   \   000002   75F006       MOV     B,#0x6
   \   000005   A4           MUL     AB
   \   000006   F8           MOV     R0,A
   \   000007   A9F0         MOV     R1,B
   \   000009   EE           MOV     A,R6
   \   00000A   75F007       MOV     B,#0x7
   \   00000D   A4           MUL     AB
   \   00000E   FA           MOV     R2,A
   \   00000F   ABF0         MOV     R3,B
   \   000011   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EE           MOV     A,R6
   \   000001   75F007       MOV     B,#0x7
   \   000004   A4           MUL     AB
   \   000005   FA           MOV     R2,A
   \   000006   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   75F007       MOV     B,#0x7
   \   000004   A4           MUL     AB
   \   000005   FA           MOV     R2,A
   \   000006   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000009   14           DEC     A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   74..         MOV     A,#SwitchControl & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F8           MOV     R0,A
   \   000004   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   000006   39           ADDC    A,R1
   \   000007   F9           MOV     R1,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   74..         MOV     A,#SwitchControl & 0xff
   \   000002   2A           ADD     A,R2
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   000007   3B           ADDC    A,R3
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   28           ADD     A,R0
   \   00000C   FA           MOV     R2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   39           ADDC    A,R1
   \   000010   8A82         MOV     DPL,R2
   \   000012   F583         MOV     DPH,A
   \   000014   22           RET
    223          
    224          /******************************************************************************
    225           * @fn          Switch_ReceiveDataIndication
    226           *
    227           * @brief       The SAPI_ReceiveDataIndication callback function is called
    228           *              asynchronously by the ZigBee stack to notify the application
    229           *              when data is received from a peer device.
    230           *
    231           * @param       source - The short address of the peer device that sent the data
    232           *              command - The commandId associated with the data
    233           *              len - The number of bytes in the pData parameter
    234           *              pData - The data sent by the peer device
    235           *
    236           * @return      none
    237           */
    238          void Switch_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
    239          {
    240               SwitchAction(endPoint-SWITCH_ENDPOINT, command, len, pData);
    241          }
    242          
    243          /******************************************************************************
    244           * @fn          SwitchAction
    245           *
    246           * @brief       Switch Action Decide
    247           *
    248           * @param
    249           *
    250           * @return      none
    251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          void SwitchAction( uint8 sw, uint16 command, uint16 len, uint8 *pData )
   \                     SwitchAction:
    253          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   7411         MOV     A,#0x11
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FF           MOV     R7,A
    254            if(command == PORT_INIT_CLUSTER)
   \   000015   EA           MOV     A,R2
   \   000016   7004         JNZ     ??SwitchAction_0
   \   000018   7410         MOV     A,#0x10
   \   00001A   65..         XRL     A,?V0 + 1
   \                     ??SwitchAction_0:
   \   00001C   7049         JNZ     ??SwitchAction_1
    255            {
    256              uint8 port;
    257              port = *pData;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
    258              
    259            //  P2: 1 2 3 4 ; P1: 2 3 4 5 6 7
    260            //-----------------------------------
    261            //port: 0 1 2 3       4 5 6 7 8 9
    262              if(port < SWITCH_NUM_MAX)
   \   000024   C3           CLR     C
   \   000025   9405         SUBB    A,#0x5
   \   000027   4003         JC      $+5
   \   000029   02....       LJMP    ??SwitchAction_2 & 0xFFFF
    263              {
    264                  if(port < P2_SWITCH_NUM)
   \   00002C   E9           MOV     A,R1
   \   00002D   C3           CLR     C
   \   00002E   9404         SUBB    A,#0x4
   \   000030   75..01       MOV     ?V0 + 0,#0x1
   \   000033   75..00       MOV     ?V0 + 1,#0x0
   \   000036   500E         JNC     ??SwitchAction_3
    265                  {
    266                      P2DIR |= 0x01 << (port+1);
   \   000038   7401         MOV     A,#0x1
   \   00003A   29           ADD     A,R1
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?S_SHL
   \   000040   E5..         MOV     A,?V0 + 0
   \   000042   42FF         ORL     0xff,A
   \   000044   800C         SJMP    ??SwitchAction_4
    267                  }
    268                  else
    269                  {
    270                      P1DIR |= 0x01 << (port - 2);
   \                     ??SwitchAction_3:
   \   000046   74FE         MOV     A,#-0x2
   \   000048   29           ADD     A,R1
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?S_SHL
   \   00004E   E5..         MOV     A,?V0 + 0
   \   000050   42FE         ORL     0xfe,A
    271                  }
    272                  SwitchControl[sw].port = port;
   \                     ??SwitchAction_4:
   \   000052   E9           MOV     A,R1
   \   000053   C0E0         PUSH    A
   \   000055   E5..         MOV     A,?V0 + 2
   \   000057   75F007       MOV     B,#0x7
   \   00005A   A4           MUL     AB
   \   00005B   F8           MOV     R0,A
   \   00005C   A9F0         MOV     R1,B
   \   00005E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000061   D0E0         POP     A
   \   000063   F0           MOVX    @DPTR,A
    273                  return;
   \   000064   02....       LJMP    ??SwitchAction_2 & 0xFFFF
    274              }
    275              else
    276              {
    277                  // send error back
    278                  return;
    279              }
    280            }
    281            
    282            
    283            if(sw>=SWITCH_NUM_MAX)return;   // data error
   \                     ??SwitchAction_1:
   \   000067   E9           MOV     A,R1
   \   000068   C3           CLR     C
   \   000069   9405         SUBB    A,#0x5
   \   00006B   4003         JC      $+5
   \   00006D   02....       LJMP    ??SwitchAction_2 & 0xFFFF
    284            if( len % OPERATE_MSG_NUM )return;  // data error: Must be 6 data each group
   \   000070   EC           MOV     A,R4
   \   000071   F8           MOV     R0,A
   \   000072   ED           MOV     A,R5
   \   000073   F9           MOV     R1,A
   \   000074   7A06         MOV     R2,#0x6
   \   000076   7B00         MOV     R3,#0x0
   \   000078   12....       LCALL   ?US_DIV_MOD
   \   00007B   8B..         MOV     ?V0 + 5,R3
   \   00007D   EA           MOV     A,R2
   \   00007E   45..         ORL     A,?V0 + 5
   \   000080   6003         JZ      $+5
   \   000082   02....       LJMP    ??SwitchAction_2 & 0xFFFF
    285          
    286            uint16 len_t;
    287            sensor_msg_t *msg_t = NULL;
    288            len_t = len/OPERATE_MSG_NUM;
   \   000085   EC           MOV     A,R4
   \   000086   F8           MOV     R0,A
   \   000087   ED           MOV     A,R5
   \   000088   F9           MOV     R1,A
   \   000089   7A06         MOV     R2,#0x6
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   12....       LCALL   ?US_DIV_MOD
   \   000090   88..         MOV     ?V0 + 4,R0
   \   000092   89..         MOV     ?V0 + 5,R1
    289            msg_t = (sensor_msg_t *)malloc(sizeof(sensor_msg_t) * len_t);
   \   000094                ; Setup parameters for call to function __xdata_malloc
   \   000094   E8           MOV     A,R0
   \   000095   75F006       MOV     B,#0x6
   \   000098   A4           MUL     AB
   \   000099   FA           MOV     R2,A
   \   00009A   A8F0         MOV     R0,B
   \   00009C   75F006       MOV     B,#0x6
   \   00009F   E9           MOV     A,R1
   \   0000A0   A4           MUL     AB
   \   0000A1   28           ADD     A,R0
   \   0000A2   FB           MOV     R3,A
   \   0000A3   12....       LCALL   ??__xdata_malloc?relay
   \   0000A6   8A..         MOV     ?V0 + 6,R2
   \   0000A8   8B..         MOV     ?V0 + 7,R3
   \   0000AA   A8..         MOV     R0,?V0 + 6
   \   0000AC   A9..         MOV     R1,?V0 + 7
    290            uint8 i;
    291            for(i=0; i<len_t; i++)
   \   0000AE   75..00       MOV     ?V0 + 3,#0x0
   \   0000B1   803A         SJMP    ??SwitchAction_5
    292            {    
    293                if(pData[i*OPERATE_MSG_NUM] > 1)      // ON/OFF
    294                  msg_t[i].value = 1;
    295                else
    296                  msg_t[i].value = 0;
   \                     ??SwitchAction_6:
   \   0000B3   2A           ADD     A,R2
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   E9           MOV     A,R1
   \   0000B7   3B           ADDC    A,R3
   \   0000B8   F583         MOV     DPH,A
   \   0000BA   E4           CLR     A
   \                     ??SwitchAction_7:
   \   0000BB   F0           MOVX    @DPTR,A
    297                msg_t[i].level = pData[i*OPERATE_MSG_NUM+1];   // NO USE
   \   0000BC   E8           MOV     A,R0
   \   0000BD   2A           ADD     A,R2
   \   0000BE   FC           MOV     R4,A
   \   0000BF   E9           MOV     A,R1
   \   0000C0   3B           ADDC    A,R3
   \   0000C1   FD           MOV     R5,A
   \   0000C2   EE           MOV     A,R6
   \   0000C3   2A           ADD     A,R2
   \   0000C4   FA           MOV     R2,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   3B           ADDC    A,R3
   \   0000C7   FB           MOV     R3,A
   \   0000C8   8A82         MOV     DPL,R2
   \   0000CA   8B83         MOV     DPH,R3
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   8C82         MOV     DPL,R4
   \   0000D0   8D83         MOV     DPH,R5
   \   0000D2   A3           INC     DPTR
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   E4           CLR     A
   \   0000D6   12....       LCALL   ?Subroutine9 & 0xFFFF
    298                msg_t[i].hour = pData[i*OPERATE_MSG_NUM+3];
   \                     ??CrossCallReturnLabel_18:
   \   0000D9   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0000DC   12....       LCALL   ?Subroutine9 & 0xFFFF
    299                msg_t[i].min = pData[i*OPERATE_MSG_NUM+4];
   \                     ??CrossCallReturnLabel_19:
   \   0000DF   A3           INC     DPTR
   \   0000E0   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000E3   12....       LCALL   ?Subroutine7 & 0xFFFF
    300                msg_t[i].sec = pData[i*OPERATE_MSG_NUM+5];
   \                     ??CrossCallReturnLabel_15:
   \   0000E6   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000E9   A3           INC     DPTR
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   05..         INC     ?V0 + 3
   \                     ??SwitchAction_5:
   \   0000ED   85....       MOV     ?V0 + 6,?V0 + 3
   \   0000F0   C3           CLR     C
   \   0000F1   E5..         MOV     A,?V0 + 6
   \   0000F3   95..         SUBB    A,?V0 + 4
   \   0000F5   E4           CLR     A
   \   0000F6   95..         SUBB    A,?V0 + 5
   \   0000F8   5023         JNC     ??SwitchAction_8
   \   0000FA   E5..         MOV     A,?V0 + 3
   \   0000FC   75F006       MOV     B,#0x6
   \   0000FF   A4           MUL     AB
   \   000100   FA           MOV     R2,A
   \   000101   ABF0         MOV     R3,B
   \   000103   EE           MOV     A,R6
   \   000104   2A           ADD     A,R2
   \   000105   F582         MOV     DPL,A
   \   000107   EF           MOV     A,R7
   \   000108   3B           ADDC    A,R3
   \   000109   F583         MOV     DPH,A
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   C3           CLR     C
   \   00010D   9402         SUBB    A,#0x2
   \   00010F   E8           MOV     A,R0
   \   000110   40A1         JC      ??SwitchAction_6
   \   000112   2A           ADD     A,R2
   \   000113   F582         MOV     DPL,A
   \   000115   E9           MOV     A,R1
   \   000116   3B           ADDC    A,R3
   \   000117   F583         MOV     DPH,A
   \   000119   7401         MOV     A,#0x1
   \   00011B   809E         SJMP    ??SwitchAction_7
    301            }
    302            SwitchControl[sw].msg = msg_t;
   \                     ??SwitchAction_8:
   \   00011D   85..82       MOV     DPL,?V0 + 2
   \   000120   AA82         MOV     R2,DPL
   \   000122   EA           MOV     A,R2
   \   000123   75F007       MOV     B,#0x7
   \   000126   A4           MUL     AB
   \   000127   FC           MOV     R4,A
   \   000128   ADF0         MOV     R5,B
   \   00012A   74..         MOV     A,#SwitchControl & 0xff
   \   00012C   2C           ADD     A,R4
   \   00012D   FC           MOV     R4,A
   \   00012E   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   000130   3D           ADDC    A,R5
   \   000131   FD           MOV     R5,A
   \   000132   8C82         MOV     DPL,R4
   \   000134   8D83         MOV     DPH,R5
   \   000136   E8           MOV     A,R0
   \   000137   F0           MOVX    @DPTR,A
   \   000138   A3           INC     DPTR
   \   000139   E9           MOV     A,R1
   \   00013A   F0           MOVX    @DPTR,A
    303            SwitchControl[sw].total = len_t;
   \   00013B   8C82         MOV     DPL,R4
   \   00013D   8D83         MOV     DPH,R5
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   E5..         MOV     A,?V0 + 4
   \   000143   12....       LCALL   ?Subroutine10 & 0xFFFF
    304            SwitchControl[sw].status = 0;
   \                     ??CrossCallReturnLabel_20:
   \   000146   E4           CLR     A
   \   000147   12....       LCALL   ?Subroutine10 & 0xFFFF
    305            SwitchControl[sw].command = command;
   \                     ??CrossCallReturnLabel_21:
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   E5..         MOV     A,?V0 + 0
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   A3           INC     DPTR
   \   000150   E5..         MOV     A,?V0 + 1
   \   000152   F0           MOVX    @DPTR,A
    306            
    307              uint16 event_t;
    308              event_t = SW_UPDATE_EVT | sw;       // 0x5000 | 0x00??
   \   000153   EA           MOV     A,R2
   \   000154   FE           MOV     R6,A
    309            
    310              osal_stop_timerEx(Switch_TaskID, event_t);
   \   000155                ; Setup parameters for call to function osal_stop_timerEx
   \   000155   7B50         MOV     R3,#0x50
   \   000157   90....       MOV     DPTR,#Switch_TaskID
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F9           MOV     R1,A
   \   00015C   12....       LCALL   ??osal_stop_timerEx?relay
    311              osal_set_event(Switch_TaskID, event_t);
   \   00015F                ; Setup parameters for call to function osal_set_event
   \   00015F   EE           MOV     A,R6
   \   000160   FA           MOV     R2,A
   \   000161   7B50         MOV     R3,#0x50
   \   000163   90....       MOV     DPTR,#Switch_TaskID
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F9           MOV     R1,A
   \   000168   12....       LCALL   ??osal_set_event?relay
    312          }
   \                     ??SwitchAction_2:
   \   00016B   7F09         MOV     R7,#0x9
   \   00016D   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000170                REQUIRE P2DIR
   \   000170                REQUIRE P1DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   74..         MOV     A,#(SwitchControl + 4) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((SwitchControl + 4) >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
    313          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    314          void SwitchUpdate(uint8 sw)
   \                     SwitchUpdate:
    315          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    316              uint8 status_m;
    317              status_m = SwitchControl[sw].status;
   \   000007   75F007       MOV     B,#0x7
   \   00000A   A4           MUL     AB
   \   00000B   F8           MOV     R0,A
   \   00000C   AAF0         MOV     R2,B
   \   00000E   EA           MOV     A,R2
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000013   FF           MOV     R7,A
    318              if(status_m == (SwitchControl[sw].total)-1)
   \   000014   8F..         MOV     ?V0 + 0,R7
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   24FF         ADD     A,#-0x1
   \   00001F   F8           MOV     R0,A
   \   000020   E4           CLR     A
   \   000021   34FF         ADDC    A,#-0x1
   \   000023   F9           MOV     R1,A
   \   000024   E8           MOV     A,R0
   \   000025   65..         XRL     A,?V0 + 0
   \   000027   7001         JNZ     ??SwitchUpdate_0
   \   000029   E9           MOV     A,R1
   \                     ??SwitchUpdate_0:
   \   00002A   7032         JNZ     ??SwitchUpdate_1
    319              {
    320                  if(SwitchControl[sw].command == LOOP_OPERATE_CLUSTER)
   \   00002C   EE           MOV     A,R6
   \   00002D   75F007       MOV     B,#0x7
   \   000030   A4           MUL     AB
   \   000031   F8           MOV     R0,A
   \   000032   EA           MOV     A,R2
   \   000033   F9           MOV     R1,A
   \   000034   74..         MOV     A,#(SwitchControl + 5) & 0xff
   \   000036   28           ADD     A,R0
   \   000037   F582         MOV     DPL,A
   \   000039   74..         MOV     A,#((SwitchControl + 5) >> 8) & 0xff
   \   00003B   39           ADDC    A,R1
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6402         XRL     A,#0x2
   \   000041   7004         JNZ     ??SwitchUpdate_2
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   6410         XRL     A,#0x10
   \                     ??SwitchUpdate_2:
   \   000047   7008         JNZ     ??SwitchUpdate_3
    321                  {
    322                      SwitchControl[sw].status = 0xff;
   \   000049   12....       LCALL   ?Subroutine12 & 0xFFFF
    323                  }
   \                     ??CrossCallReturnLabel_24:
   \   00004C   74FF         MOV     A,#-0x1
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   8025         SJMP    ??SwitchUpdate_4
    324                  else
    325                  {
    326                      free(SwitchControl[sw].msg);
   \                     ??SwitchUpdate_3:
   \   000051                ; Setup parameters for call to function __xdata_free
   \   000051   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000054   FA           MOV     R2,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   ??__xdata_free?relay
    327                      return;
   \   00005B   02....       LJMP    ??CrossCallReturnLabel_42 & 0xFFFF
    328                  }
    329              }
    330              else
    331              {
    332                if(SwitchControl[sw].status == 0xff)
   \                     ??SwitchUpdate_1:
   \   00005E   EE           MOV     A,R6
   \   00005F   75F007       MOV     B,#0x7
   \   000062   A4           MUL     AB
   \   000063   F8           MOV     R0,A
   \   000064   EA           MOV     A,R2
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F4           CPL     A
   \   00006B   7005         JNZ     ??SwitchUpdate_5
    333                {
    334                  SwitchControl[sw].status = 0;
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
    335                  status_m = 0;
   \   00006F   FF           MOV     R7,A
   \   000070   8004         SJMP    ??SwitchUpdate_4
    336                }
    337                else
    338                {
    339                  (SwitchControl[sw].status)++;
   \                     ??SwitchUpdate_5:
   \   000072   E0           MOVX    A,@DPTR
   \   000073   04           INC     A
   \   000074   F0           MOVX    @DPTR,A
    340                  status_m++;
   \   000075   0F           INC     R7
    341                }
    342              }
    343              
    344              uint8 port;
    345              port = SwitchControl[sw].port;
   \                     ??SwitchUpdate_4:
   \   000076   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FD           MOV     R5,A
    346              if( port < P2_SWITCH_NUM )
   \   00007B   C3           CLR     C
   \   00007C   9404         SUBB    A,#0x4
   \   00007E   EF           MOV     A,R7
   \   00007F   75F006       MOV     B,#0x6
   \   000082   5022         JNC     ??SwitchUpdate_6
    347              {
    348                  if(SwitchControl[sw].msg[status_m].value)
   \   000084   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000087   600E         JZ      ??SwitchUpdate_7
    349                  {
    350                      P2 |= 0x01 << (port+1);
   \   000089   7401         MOV     A,#0x1
   \   00008B   2D           ADD     A,R5
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?S_SHL
   \   000091   E5..         MOV     A,?V0 + 0
   \   000093   42A0         ORL     0xa0,A
   \   000095   802F         SJMP    ??SwitchUpdate_8
    351                  }
    352                  else
    353                  {
    354                      P2 &= ~(0x01 << (port+1));
   \                     ??SwitchUpdate_7:
   \   000097   7401         MOV     A,#0x1
   \   000099   2D           ADD     A,R5
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?S_SHL
   \   00009F   E5..         MOV     A,?V0 + 0
   \   0000A1   F4           CPL     A
   \   0000A2   52A0         ANL     0xa0,A
   \   0000A4   8020         SJMP    ??SwitchUpdate_8
    355                  }
    356              }
    357              else
    358              {
    359                  if(SwitchControl[sw].msg[status_m].value)
   \                     ??SwitchUpdate_6:
   \   0000A6   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000A9   600E         JZ      ??SwitchUpdate_9
    360                  {
    361                      P1 |= 0x01 << (port-2);
   \   0000AB   74FE         MOV     A,#-0x2
   \   0000AD   2D           ADD     A,R5
   \   0000AE   78..         MOV     R0,#?V0 + 0
   \   0000B0   12....       LCALL   ?S_SHL
   \   0000B3   E5..         MOV     A,?V0 + 0
   \   0000B5   4290         ORL     0x90,A
   \   0000B7   800D         SJMP    ??SwitchUpdate_8
    362                  }
    363                  else
    364                  {
    365                      P1 &= ~(0x01 << (port-2));
   \                     ??SwitchUpdate_9:
   \   0000B9   74FE         MOV     A,#-0x2
   \   0000BB   2D           ADD     A,R5
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?S_SHL
   \   0000C1   E5..         MOV     A,?V0 + 0
   \   0000C3   F4           CPL     A
   \   0000C4   5290         ANL     0x90,A
    366                  }
    367              }
    368              
    369              uint16 event_t;
    370              event_t = SW_UPDATE_EVT | sw;       // 0x5000 | 0x00??
   \                     ??SwitchUpdate_8:
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   A882         MOV     R0,DPL
   \   0000CA   E8           MOV     A,R0
   \   0000CB   FA           MOV     R2,A
   \   0000CC   7B50         MOV     R3,#0x50
    371              
    372              if(SwitchControl[sw].msg[status_m].hour || SwitchControl[sw].msg[status_m].min)
   \   0000CE   EF           MOV     A,R7
   \   0000CF   75F006       MOV     B,#0x6
   \   0000D2   A4           MUL     AB
   \   0000D3   FC           MOV     R4,A
   \   0000D4   85F0..       MOV     ?V0 + 0,B
   \   0000D7   AD..         MOV     R5,?V0 + 0
   \   0000D9   E8           MOV     A,R0
   \   0000DA   75F007       MOV     B,#0x7
   \   0000DD   A4           MUL     AB
   \   0000DE   F8           MOV     R0,A
   \   0000DF   85F0..       MOV     ?V0 + 0,B
   \   0000E2   A9..         MOV     R1,?V0 + 0
   \   0000E4   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000E7   2C           ADD     A,R4
   \   0000E8   F8           MOV     R0,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   3D           ADDC    A,R5
   \   0000EC   8882         MOV     DPL,R0
   \   0000EE   F583         MOV     DPH,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   7016         JNZ     ??SwitchUpdate_10
   \   0000F6   EF           MOV     A,R7
   \   0000F7   75F006       MOV     B,#0x6
   \   0000FA   A4           MUL     AB
   \   0000FB   F8           MOV     R0,A
   \   0000FC   A9F0         MOV     R1,B
   \   0000FE   EE           MOV     A,R6
   \   0000FF   75F007       MOV     B,#0x7
   \   000102   A4           MUL     AB
   \   000103   FC           MOV     R4,A
   \   000104   AD..         MOV     R5,?V0 + 0
   \   000106   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   6006         JZ      ??SwitchUpdate_11
    373                osal_start_timerEx(Switch_TaskID, event_t, 60000); // calc 1min
   \                     ??SwitchUpdate_10:
   \   00010C                ; Setup parameters for call to function osal_start_timerEx
   \   00010C   7C60         MOV     R4,#0x60
   \   00010E   7DEA         MOV     R5,#-0x16
   \   000110   8019         SJMP    ??SwitchUpdate_12
    374              else
    375                osal_start_timerEx(Switch_TaskID, event_t, (SwitchControl[sw].msg[status_m].sec)*1000);
   \                     ??SwitchUpdate_11:
   \   000112                ; Setup parameters for call to function osal_start_timerEx
   \   000112   EE           MOV     A,R6
   \   000113   75F007       MOV     B,#0x7
   \   000116   A4           MUL     AB
   \   000117   FC           MOV     R4,A
   \   000118   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   FC           MOV     R4,A
   \   00011E   75F0E8       MOV     B,#-0x18
   \   000121   A4           MUL     AB
   \   000122   CC           XCH     A,R4
   \   000123   A8F0         MOV     R0,B
   \   000125   75F003       MOV     B,#0x3
   \   000128   A4           MUL     AB
   \   000129   28           ADD     A,R0
   \   00012A   FD           MOV     R5,A
   \                     ??SwitchUpdate_12:
   \   00012B   12....       LCALL   ??Subroutine21_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00012E   7F02         MOV     R7,#0x2
   \   000130   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000133                REQUIRE _A_P2
   \   000133                REQUIRE _A_P1
    376          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   74..         MOV     A,#(SwitchControl + 3) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((SwitchControl + 3) >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   74..         MOV     A,#SwitchControl & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   74..         MOV     A,#SwitchControl & 0xff
   \   000002   2C           ADD     A,R4
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   000007   3D           ADDC    A,R5
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   28           ADD     A,R0
   \   00000C   FC           MOV     R4,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   39           ADDC    A,R1
   \   000010   8C82         MOV     DPL,R4
   \   000012   F583         MOV     DPH,A
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   EE           MOV     A,R6
   \   000005   75F007       MOV     B,#0x7
   \   000008   A4           MUL     AB
   \   000009   FA           MOV     R2,A
   \   00000A   ABF0         MOV     R3,B
   \   00000C   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   75..01       MOV     ?V0 + 0,#0x1
   \   000013   75..00       MOV     ?V0 + 1,#0x0
   \   000016   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Switch_ClusterList>`:
   \   000000   0010         DW 4096
   \   000002   0110         DW 4097
   \   000004   0210         DW 4098
   \   000006   0310         DW 4099

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Switch_SimpleDesc>`:
   \   000000   3C           DB 60
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW Switch_ClusterList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
   \   00000C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000014   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000024   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00002C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000034   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Switch_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Switch_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Switch_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Switch_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SwitchAction?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SwitchAction

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SwitchUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SwitchUpdate
    377          
    378          
    379          /******************************************************************************
    380           * @fn          Switch_AllowBindConfirm
    381           *
    382           * @brief       Indicates when another device attempted to bind to this device
    383           *
    384           * @param
    385           *
    386           * @return      none
    387           */
    388          void Switch_AllowBindConfirm( uint16 source )
    389          {
    390               Sys_AllowBindConfirm(source);
    391          }

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     SwitchAction                   1      0     33
       -> __xdata_malloc            0      0     34
       -> osal_stop_timerEx         0      0     34
       -> osal_set_event            0      0     34
     SwitchUpdate                   0      0     24
       -> __xdata_free              0      0     20
       -> osal_start_timerEx        0      0     20
       -> osal_start_timerEx        0      0     20
     Switch_Init                    1      0      9
       -> afRegister                0      0     18
       -> ZDO_RegisterForZDOMsg     0      0     18
     Switch_ProcessEvent            0      0     16
       -> osal_msg_receive          0      0     28
       -> Sys_AllowBindConfirm      0      0     28
       -> osal_msg_deallocate       0      0     28
       -> osal_msg_receive          0      0     28
       -> SwitchAction              0      0     32
       -> osal_start_timerEx        0      0     28
       -> SwitchUpdate              0      0     28
       -> osal_start_timerEx        0      0     28
       -> osal_start_timerEx        0      0     28


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P1                                    1
     _A_P2                                    1
     P1DIR                                    1
     P2DIR                                    1
     Switch_TaskID                            1
     swCnt                                    1
     Switch_ClusterList                       8
     Switch_SimpleDesc                       60
     Switch_epDesc                           30
     Switch_DstAddr                          12
     SwitchControl                           35
     swTimenow                                1
     Switch_Init                            138
     ?Subroutine17                            9
     ?Subroutine7                             6
     Switch_ProcessEvent                    332
     ?Subroutine14                            4
     ??Subroutine21_0                         9
     ?Subroutine6                            18
     ?Subroutine3                            21
     ?Subroutine16                            5
     ?Subroutine2                            11
     ?Subroutine15                            5
     ?Subroutine19                            8
     ?Subroutine1                            11
     ?Subroutine4                            17
     ?Subroutine20                           21
     SwitchAction                           368
     ?Subroutine13                            5
     ?Subroutine18                            9
     ?Subroutine10                            9
     ?Subroutine9                             4
     ?Subroutine11                           11
     SwitchUpdate                           307
     ?Subroutine12                           11
     ?Subroutine8                            12
     ?Subroutine5                            25
     ?Subroutine0                            23
     ?<Initializer for Switch_ClusterList>    8
     ?<Initializer for Switch_SimpleDesc>    60
     ??Switch_Init?relay                      6
     ??Switch_ProcessEvent?relay              6
     ??SwitchAction?relay                     6
     ??SwitchUpdate?relay                     6

 
 1 399 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     4 bytes in segment SFR_AN
    68 bytes in segment XDATA_I
    68 bytes in segment XDATA_ID
    80 bytes in segment XDATA_Z
 
 1 491 bytes of CODE  memory
     0 bytes of DATA  memory (+ 4 bytes shared)
   148 bytes of XDATA memory

Errors: none
Warnings: none
