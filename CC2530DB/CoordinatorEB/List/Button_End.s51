///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        05/Sep/2017  22:11:30 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\Source\Button_End.c               /
//    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0          /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\Source\But /
//                          ton_End.c -D HOLD_AUTO_START -D                   /
//                          BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D      /
//                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D           /
//                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                  /
//                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\Coo /
//                          rdinatorEB\List\ -lA D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\Coo /
//                          rdinatorEB\List\ --diag_suppress Pe001,Pa010 -o   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\CoordinatorEB\Obj\ -e    /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\ -I                      /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\Source\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\ /
//                           -I D:\ProgramData\Hardware\zigbee\Projects\zstac /
//                          k\Samples\SensorSys\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\include\ -I D:\ProgramData\Hardware\zig /
//                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\ -I D:\ProgramData\Hardware\zigbee\ /
//                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\high_level\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\ -I                         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\ -I             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\ -I D:\ProgramData\Hardware\zigbee\Projects\ /
//                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\ /
//                          Components\osal\include\ -I                       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\ -I D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\ -I D:\ProgramData\Hardware\zigbee\Pro /
//                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\nwk\ -I                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\ -I D:\ProgramData\Hardware\zigbee\P /
//                          rojects\zstack\Samples\SensorSys\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\ -I D:\ProgramData\Hardware\zigbee\Pr /
//                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I D:\ProgramData\Hardware\zigbee\Project /
//                          s\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -Ohz --require_prototypes  /
//    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\CoordinatorEB\List\Butto /
//                          n_End.s51                                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Button_End

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Button_Init?relay
        FUNCTION ??Button_Init?relay,0203H
        PUBLIC ??Button_ProcessEvent?relay
        FUNCTION ??Button_ProcessEvent?relay,0203H
        PUBLIC Button_ClusterList
        PUBLIC Button_DstAddr
        PUBLIC Button_Init
        FUNCTION Button_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Button_ProcessEvent
        FUNCTION Button_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Button_SimpleDesc
        PUBLIC Button_TaskID
        PUBLIC Button_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
HalLedSet           SYMBOL "HalLedSet"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
Button_Init         SYMBOL "Button_Init"
??Button_Init?relay SYMBOL "?relay", Button_Init
Button_ProcessEvent SYMBOL "Button_ProcessEvent"
??Button_ProcessEvent?relay SYMBOL "?relay", Button_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H

// D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Button_End.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include "sapi.h"
//    7 
//    8 #include "SensorSys.h"
//    9 #include "DebugTrace.h"
//   10 
//   11 #if !defined( WIN32 )
//   12 	#include "OnBoard.h"
//   13 #endif
//   14 
//   15 /* HAL */
//   16 #include "hal_led.h"
//   17 #include "hal_key.h"
//   18 #include "hal_uart.h"
//   19 
//   20 /*********************************************************************
//   21  * MACROS
//   22  */
//   23 
//   24 /*********************************************************************
//   25  * CONSTANTS
//   26  */
//   27 
//   28 /*********************************************************************
//   29  * TYPEDEFS
//   30  */
//   31 
//   32 /*********************************************************************
//   33  * GLOBAL VARIABLES
//   34  */
//   35 
//   36 
//   37 
//   38 
//   39 
//   40 
//   41 // Button 端点的簇ID
//   42 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   43 const cId_t Button_ClusterList[BUTTON_MAX_CLUSTERS] =
Button_ClusterList:
        DATA16
        DW 3
        DW 0
//   44 {
//   45 	BUTTON_CLUSTERID
//   46 };
//   47 
//   48 // Button 端点简单描述符

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   49 const SimpleDescriptionFormat_t Button_SimpleDesc =
Button_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW Button_ClusterList
        DATA8
        DB 2
        DATA16
        DW Button_ClusterList
//   50 {
//   51 	BUTTON_ENDPOINT,           //  int Endpoint;
//   52 	SYS_PROFID,                //  uint16 AppProfId[2];
//   53 	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
//   54 	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
//   55 	SYS_FLAGS,                 //  int   AppFlags:4;
//   56 	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   57 	(cId_t *)Button_ClusterList,  //  byte *pAppInClusterList;
//   58 	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   59 	(cId_t *)Button_ClusterList   //  byte *pAppInClusterList;
//   60 };
//   61 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   62 endPointDesc_t Button_epDesc;
Button_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   63 
//   64 /*********************************************************************
//   65  * EXTERNAL VARIABLES
//   66  */
//   67 
//   68 /*********************************************************************
//   69  * EXTERNAL FUNCTIONS
//   70  */
//   71 
//   72 /*********************************************************************
//   73  * LOCAL VARIABLES
//   74  */
//   75 static uint8 keys_shift = 0;
//   76 static uint8 type_join;
//   77 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   78 byte Button_TaskID;
Button_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   79 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   80 afAddrType_t Button_DstAddr;
Button_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   81 
//   82 
//   83 /*********************************************************************
//   84  * LOCAL FUNCTIONS
//   85  */
//   86 void Button_Init( byte task_id );
//   87 UINT16 Button_ProcessEvent( byte task_id, UINT16 events );
//   88 //void Button_HandleKeys( byte shift, byte keys );
//   89 
//   90 
//   91 /*********************************************************************
//   92  * @fn      Button_Init
//   93  *
//   94  * @brief   Initialization function for the Generic App Task.
//   95  *          This is called during initialization and should contain
//   96  *          any application specific initialization (ie. hardware
//   97  *          initialization/setup, table initialization, power up
//   98  *          notificaiton ... ).
//   99  *
//  100  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  101  *                    used to send messages and set timers.
//  102  *
//  103  * @return  none
//  104  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  105 void Button_Init( byte task_id )
Button_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Button_Init
        CODE
//  106 {
        FUNCALL Button_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  107 	Button_TaskID = task_id;
        MOV     DPTR,#Button_TaskID
        MOVX    @DPTR,A
//  108 
//  109 	// Device hardware initialization can be added here or in main() (Zmain.c).
//  110 	// If the hardware is application specific - add it here.
//  111 	// If the hardware is other parts of the device add it in main().
//  112 
//  113 	Button_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#Button_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  114 	Button_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  115 	Button_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#Button_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  116 
//  117 	// Fill out the endpoint description.
//  118 	Button_epDesc.endPoint = BUTTON_ENDPOINT;
        MOV     DPTR,#Button_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  119 	Button_epDesc.task_id = &Button_TaskID;
        INC     DPTR
        MOV     A,#Button_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Button_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  120 	Button_epDesc.simpleDesc
//  121 						= (SimpleDescriptionFormat_t *)&Button_SimpleDesc;
        INC     DPTR
        MOV     A,#Button_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Button_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  122 	Button_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  123 
//  124 	// Register the endpoint description with the AF
//  125 	afRegister( &Button_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Button_epDesc & 0xff
        MOV     R3,#(Button_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  126 
//  127 	// Register for all key events - This app will handle all key events
//  128 	// RegisterForKeys( Button_TaskID ); !!!!!!!!!!!!!!!!!!!!!
//  129  
//  130 	//	ZDO_RegisterForZDOMsg( Button_TaskID, End_Device_Bind_rsp );
//  131 	ZDO_RegisterForZDOMsg( Button_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Button_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  132 
//  133 	HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  134   HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  135   HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
//  136 
//  137 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  138 
//  139 /*********************************************************************
//  140  * @fn      Button_ProcessEvent
//  141  *
//  142  * @brief   Generic Application Task event processor.  This function
//  143  *          is called to process all events for the task.  Events
//  144  *          include timers, messages and any other user defined events.
//  145  *
//  146  * @param   task_id  - The OSAL assigned task ID.
//  147  * @param   events - events to process.  This is a bit map and can
//  148  *                   contain more than one event.
//  149  *
//  150  * @return  none
//  151  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  152 UINT16 Button_ProcessEvent( byte task_id, UINT16 events )
Button_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Button_ProcessEvent
        CODE
//  153 {
        FUNCALL Button_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  154 	afIncomingMSGPacket_t *MSGpkt = NULL;
//  155 	(void)task_id;  // Intentionally unreferenced parameter
//  156 
//  157 	if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??Button_ProcessEvent_0
//  158 	{
//  159     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Button_ProcessEvent_1
//  160     while ( MSGpkt )
//  161     {
//  162       switch ( MSGpkt->hdr.event )
//  163       {
//  164       	case KEY_CHANGE:
//  165       	//	Button_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  166       	break;
//  167       }
//  168       // Release the memory
//  169       osal_msg_deallocate( (uint8 *)MSGpkt );
??Button_ProcessEvent_2:
        ; Setup parameters for call to function osal_msg_deallocate
        LCALL   ??osal_msg_deallocate?relay
//  170 
//  171       // Next
//  172       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Button_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Button_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
??Button_ProcessEvent_1:
        LCALL   ??osal_msg_receive?relay
//  173     }
        MOV     A,R2
        ORL     A,R3
        JNZ     ??Button_ProcessEvent_2
//  174     return (events ^ SYS_EVENT_MSG);
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??Button_ProcessEvent_3
//  175 	}
//  176 	// for test!
//  177 	/*if(events & CLOSE_LIGHT_EVT)
//  178 	{
//  179 		HalLedSet(HAL_LED_ALL, HAL_LED_MODE_ON);
//  180 		return (events ^ CLOSE_LIGHT_EVT);
//  181 	}*/
//  182   return 0;
??Button_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Button_ProcessEvent_3:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  183 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Button_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Button_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Button_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Button_ProcessEvent

        END
//  184 
//  185 /*********************************************************************
//  186  * @fn      Button_HandleKeys
//  187  *
//  188  * @brief   Handles all key events for this device.
//  189  *
//  190  * @param   shift - true if in shift/alt.
//  191  * @param   keys - bit field for key events. Valid entries:
//  192  *                 HAL_KEY_SW_4
//  193  *                 HAL_KEY_SW_3
//  194  *                 HAL_KEY_SW_2
//  195  *                 HAL_KEY_SW_1
//  196  *
//  197  * @return  none
//  198  *//*
//  199 void Button_HandleKeys( byte shift, byte keys )
//  200 {
//  201 	
//  202 	// Shift is used to make each button/switch dual purpose.
//  203 	if ( keys_shift )
//  204 	{
//  205 		// Allow Binding
//  206 		if ( keys & HAL_KEY_SW_1 )
//  207 		{
//  208 			if(type_join)
//  209 			{
//  210 				Sensor_AllowBind(10);
//  211 				HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
//  212 			// osal_start_timerEx(Sys_TaskID, CLOSE_BIND_EVT, 10000);
//  213 			
//  214 				keys_shift = 0;
//  215 				type_join = 0;
//  216 			}
//  217 			else
//  218 			{
//  219 				// wrong endpoint the presend send to
//  220 			}
//  221 		}
//  222 		if ( keys & HAL_KEY_SW_2 )
//  223 		{
//  224 		}
//  225 		if ( keys & HAL_KEY_SW_3 )
//  226 		{
//  227 		}
//  228 		if ( keys & HAL_KEY_SW_4 )
//  229 		{
//  230 		}
//  231 	}
//  232 	else
//  233 	{
//  234 		if ( keys & HAL_KEY_SW_1 )
//  235 		{
//  236 		}
//  237 
//  238 		if ( keys & HAL_KEY_SW_2 )
//  239 		{
//  240 			  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  241   HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  242   HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
//  243 		/*
//  244 			HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  245 
//  246 			// 想绑定另一个端点
//  247 			dstAddr.addrMode = Addr16Bit;
//  248 			dstAddr.addr.shortAddr = 0x0000; 
//  249 			ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
//  250 														Button_epDesc.endPoint,
//  251 														SENSORSYS_PROFID,
//  252 														SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  253 														SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  254 														FALSE );*//*
//  255 		}
//  256 
//  257 		if ( keys & HAL_KEY_SW_3 )
//  258 		{
//  259 		}
//  260 		
//  261 		if ( keys & HAL_KEY_SW_4 )
//  262 		{
//  263 		/*	HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  264 			dstAddr.addrMode = AddrBroadcast;
//  265 			dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  266 			ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
//  267 												SENSORSYS_PROFID,
//  268 												SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  269 												SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  270 												FALSE );
//  271 		*//*
//  272 		}
//  273 	}
//  274 }
//  275 */
// 
// 140 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//  16 bytes in segment XDATA_ROM_C
//  19 bytes in segment XDATA_Z
// 
// 152 bytes of CODE  memory
//  16 bytes of CONST memory
//  19 bytes of XDATA memory
//
//Errors: none
//Warnings: 4
