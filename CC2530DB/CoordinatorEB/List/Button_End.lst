###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         05/Sep/2017  22:11:30 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\Source\Button_End.c                 #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0             #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\Source\Butto #
#                          n_End.c -D HOLD_AUTO_START -D BUILD_ALL_DEVICES    #
#                          -D REFLECTOR -D NV_INIT -D xNV_RESTORE -D          #
#                          xZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D           #
#                          xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC -lC              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\ -lA    #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\        #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\ -e      #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\ -I                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\Button_ #
#                          End.lst                                            #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\Button_E #
#                          nd.r51                                             #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Button_End.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include "sapi.h"
      7          
      8          #include "SensorSys.h"
      9          #include "DebugTrace.h"
     10          
     11          #if !defined( WIN32 )
     12          	#include "OnBoard.h"
     13          #endif
     14          
     15          /* HAL */
     16          #include "hal_led.h"
     17          #include "hal_key.h"
     18          #include "hal_uart.h"
     19          
     20          /*********************************************************************
     21           * MACROS
     22           */
     23          
     24          /*********************************************************************
     25           * CONSTANTS
     26           */
     27          
     28          /*********************************************************************
     29           * TYPEDEFS
     30           */
     31          
     32          /*********************************************************************
     33           * GLOBAL VARIABLES
     34           */
     35          
     36          
     37          
     38          
     39          
     40          
     41          // Button 端点的簇ID
     42          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     43          const cId_t Button_ClusterList[BUTTON_MAX_CLUSTERS] =
   \                     Button_ClusterList:
   \   000000   0300         DW 3
   \   000002   0000         DW 0
     44          {
     45          	BUTTON_CLUSTERID
     46          };
     47          
     48          // Button 端点简单描述符

   \                                 In  segment XDATA_ROM_C, align 1
     49          const SimpleDescriptionFormat_t Button_SimpleDesc =
   \                     Button_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW Button_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW Button_ClusterList
     50          {
     51          	BUTTON_ENDPOINT,           //  int Endpoint;
     52          	SYS_PROFID,                //  uint16 AppProfId[2];
     53          	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
     54          	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
     55          	SYS_FLAGS,                 //  int   AppFlags:4;
     56          	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     57          	(cId_t *)Button_ClusterList,  //  byte *pAppInClusterList;
     58          	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     59          	(cId_t *)Button_ClusterList   //  byte *pAppInClusterList;
     60          };
     61          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     62          endPointDesc_t Button_epDesc;
   \                     Button_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     63          
     64          /*********************************************************************
     65           * EXTERNAL VARIABLES
     66           */
     67          
     68          /*********************************************************************
     69           * EXTERNAL FUNCTIONS
     70           */
     71          
     72          /*********************************************************************
     73           * LOCAL VARIABLES
     74           */
     75          static uint8 keys_shift = 0;
     76          static uint8 type_join;
     77          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          byte Button_TaskID;
   \                     Button_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          afAddrType_t Button_DstAddr;
   \                     Button_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     81          
     82          
     83          /*********************************************************************
     84           * LOCAL FUNCTIONS
     85           */
     86          void Button_Init( byte task_id );
     87          UINT16 Button_ProcessEvent( byte task_id, UINT16 events );
     88          //void Button_HandleKeys( byte shift, byte keys );
     89          
     90          
     91          /*********************************************************************
     92           * @fn      Button_Init
     93           *
     94           * @brief   Initialization function for the Generic App Task.
     95           *          This is called during initialization and should contain
     96           *          any application specific initialization (ie. hardware
     97           *          initialization/setup, table initialization, power up
     98           *          notificaiton ... ).
     99           *
    100           * @param   task_id - the ID assigned by OSAL.  This ID should be
    101           *                    used to send messages and set timers.
    102           *
    103           * @return  none
    104           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          void Button_Init( byte task_id )
   \                     Button_Init:
    106          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    107          	Button_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Button_TaskID
   \   000009   F0           MOVX    @DPTR,A
    108          
    109          	// Device hardware initialization can be added here or in main() (Zmain.c).
    110          	// If the hardware is application specific - add it here.
    111          	// If the hardware is other parts of the device add it in main().
    112          
    113          	Button_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#Button_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    114          	Button_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    115          	Button_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#Button_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    116          
    117          	// Fill out the endpoint description.
    118          	Button_epDesc.endPoint = BUTTON_ENDPOINT;
   \   000017   90....       MOV     DPTR,#Button_epDesc
   \   00001A   740A         MOV     A,#0xa
   \   00001C   F0           MOVX    @DPTR,A
    119          	Button_epDesc.task_id = &Button_TaskID;
   \   00001D   A3           INC     DPTR
   \   00001E   74..         MOV     A,#Button_TaskID & 0xff
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   74..         MOV     A,#(Button_TaskID >> 8) & 0xff
   \   000024   F0           MOVX    @DPTR,A
    120          	Button_epDesc.simpleDesc
    121          						= (SimpleDescriptionFormat_t *)&Button_SimpleDesc;
   \   000025   A3           INC     DPTR
   \   000026   74..         MOV     A,#Button_SimpleDesc & 0xff
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   74..         MOV     A,#(Button_SimpleDesc >> 8) & 0xff
   \   00002C   F0           MOVX    @DPTR,A
    122          	Button_epDesc.latencyReq = noLatencyReqs;
   \   00002D   A3           INC     DPTR
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    123          
    124          	// Register the endpoint description with the AF
    125          	afRegister( &Button_epDesc );
   \   000030                ; Setup parameters for call to function afRegister
   \   000030   7A..         MOV     R2,#Button_epDesc & 0xff
   \   000032   7B..         MOV     R3,#(Button_epDesc >> 8) & 0xff
   \   000034   12....       LCALL   ??afRegister?relay
    126          
    127          	// Register for all key events - This app will handle all key events
    128          	// RegisterForKeys( Button_TaskID ); !!!!!!!!!!!!!!!!!!!!!
    129           
    130          	//	ZDO_RegisterForZDOMsg( Button_TaskID, End_Device_Bind_rsp );
    131          	ZDO_RegisterForZDOMsg( Button_TaskID, Match_Desc_rsp );
   \   000037                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000037   7A06         MOV     R2,#0x6
   \   000039   7B80         MOV     R3,#-0x80
   \   00003B   90....       MOV     DPTR,#Button_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    132          
    133          	HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   000043                ; Setup parameters for call to function HalLedSet
   \   000043   7A01         MOV     R2,#0x1
   \   000045   7901         MOV     R1,#0x1
   \   000047   12....       LCALL   ??HalLedSet?relay
    134            HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   00004A                ; Setup parameters for call to function HalLedSet
   \   00004A   7A01         MOV     R2,#0x1
   \   00004C   7902         MOV     R1,#0x2
   \   00004E   12....       LCALL   ??HalLedSet?relay
    135            HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   000051                ; Setup parameters for call to function HalLedSet
   \   000051   7A01         MOV     R2,#0x1
   \   000053   7904         MOV     R1,#0x4
   \   000055   12....       LCALL   ??HalLedSet?relay
    136          
    137          }
   \   000058   7F01         MOV     R7,#0x1
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
    138          
    139          /*********************************************************************
    140           * @fn      Button_ProcessEvent
    141           *
    142           * @brief   Generic Application Task event processor.  This function
    143           *          is called to process all events for the task.  Events
    144           *          include timers, messages and any other user defined events.
    145           *
    146           * @param   task_id  - The OSAL assigned task ID.
    147           * @param   events - events to process.  This is a bit map and can
    148           *                   contain more than one event.
    149           *
    150           * @return  none
    151           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    152          UINT16 Button_ProcessEvent( byte task_id, UINT16 events )
   \                     Button_ProcessEvent:
    153          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    154          	afIncomingMSGPacket_t *MSGpkt = NULL;
    155          	(void)task_id;  // Intentionally unreferenced parameter
    156          
    157          	if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6019         JZ      ??Button_ProcessEvent_0
    158          	{
    159              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8008         SJMP    ??Button_ProcessEvent_1
    160              while ( MSGpkt )
    161              {
    162                switch ( MSGpkt->hdr.event )
    163                {
    164                	case KEY_CHANGE:
    165                	//	Button_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    166                	break;
    167                }
    168                // Release the memory
    169                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Button_ProcessEvent_2:
   \   00000F                ; Setup parameters for call to function osal_msg_deallocate
   \   00000F   12....       LCALL   ??osal_msg_deallocate?relay
    170          
    171                // Next
    172                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Button_TaskID );
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \   000012   90....       MOV     DPTR,#Button_TaskID
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \                     ??Button_ProcessEvent_1:
   \   000017   12....       LCALL   ??osal_msg_receive?relay
    173              }
   \   00001A   EA           MOV     A,R2
   \   00001B   4B           ORL     A,R3
   \   00001C   70F1         JNZ     ??Button_ProcessEvent_2
    174              return (events ^ SYS_EVENT_MSG);
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   6480         XRL     A,#0x80
   \   000023   FB           MOV     R3,A
   \   000024   8004         SJMP    ??Button_ProcessEvent_3
    175          	}
    176          	// for test!
    177          	/*if(events & CLOSE_LIGHT_EVT)
    178          	{
    179          		HalLedSet(HAL_LED_ALL, HAL_LED_MODE_ON);
    180          		return (events ^ CLOSE_LIGHT_EVT);
    181          	}*/
    182            return 0;
   \                     ??Button_ProcessEvent_0:
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7B00         MOV     R3,#0x0
   \                     ??Button_ProcessEvent_3:
   \   00002A   7F04         MOV     R7,#0x4
   \   00002C   02....       LJMP    ?BANKED_LEAVE_XDATA
    183          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Button_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Button_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Button_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Button_ProcessEvent
    184          
    185          /*********************************************************************
    186           * @fn      Button_HandleKeys
    187           *
    188           * @brief   Handles all key events for this device.
    189           *
    190           * @param   shift - true if in shift/alt.
    191           * @param   keys - bit field for key events. Valid entries:
    192           *                 HAL_KEY_SW_4
    193           *                 HAL_KEY_SW_3
    194           *                 HAL_KEY_SW_2
    195           *                 HAL_KEY_SW_1
    196           *
    197           * @return  none
    198           *//*
    199          void Button_HandleKeys( byte shift, byte keys )
    200          {
    201          	
    202          	// Shift is used to make each button/switch dual purpose.
    203          	if ( keys_shift )
    204          	{
    205          		// Allow Binding
    206          		if ( keys & HAL_KEY_SW_1 )
    207          		{
    208          			if(type_join)
    209          			{
    210          				Sensor_AllowBind(10);
    211          				HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
    212          			// osal_start_timerEx(Sys_TaskID, CLOSE_BIND_EVT, 10000);
    213          			
    214          				keys_shift = 0;
    215          				type_join = 0;
    216          			}
    217          			else
    218          			{
    219          				// wrong endpoint the presend send to
    220          			}
    221          		}
    222          		if ( keys & HAL_KEY_SW_2 )
    223          		{
    224          		}
    225          		if ( keys & HAL_KEY_SW_3 )
    226          		{
    227          		}
    228          		if ( keys & HAL_KEY_SW_4 )
    229          		{
    230          		}
    231          	}
    232          	else
    233          	{
    234          		if ( keys & HAL_KEY_SW_1 )
    235          		{
    236          		}
    237          
    238          		if ( keys & HAL_KEY_SW_2 )
    239          		{
    240          			  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
    241            HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    242            HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
    243          		/*
                 		^
Warning[Pe009]: nested comment is not allowed
    244          			HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    245          
    246          			// 想绑定另一个端点
    247          			dstAddr.addrMode = Addr16Bit;
    248          			dstAddr.addr.shortAddr = 0x0000; 
    249          			ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
    250          														Button_epDesc.endPoint,
    251          														SENSORSYS_PROFID,
    252          														SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    253          														SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    254          														FALSE );*//*
    255          		}
    256          
    257          		if ( keys & HAL_KEY_SW_3 )
    258          		{
    259          		}
    260          		
    261          		if ( keys & HAL_KEY_SW_4 )
    262          		{
    263          		/*	HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
                 		^
Warning[Pe009]: nested comment is not allowed

  static uint8 keys_shift = 0;
               ^
"D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Button_End.c",75  Warning[Pe177]: 
          variable "keys_shift" was declared but never referenced

  static uint8 type_join;
               ^
"D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Button_End.c",76  Warning[Pe177]: 
          variable "type_join" was declared but never referenced
    264          			dstAddr.addrMode = AddrBroadcast;
    265          			dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    266          			ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    267          												SENSORSYS_PROFID,
    268          												SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    269          												SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    270          												FALSE );
    271          		*//*
    272          		}
    273          	}
    274          }
    275          */

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     Button_Init                    0      0      9
       -> afRegister                0      0     18
       -> ZDO_RegisterForZDOMsg     0      0     18
       -> HalLedSet                 0      0     18
       -> HalLedSet                 0      0     18
       -> HalLedSet                 0      0     18
     Button_ProcessEvent            0      0     12
       -> osal_msg_receive          0      0     24
       -> osal_msg_deallocate       0      0     24
       -> osal_msg_receive          0      0     24


   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     Button_ClusterList             4
     Button_SimpleDesc             12
     Button_epDesc                  6
     Button_TaskID                  1
     Button_DstAddr                12
     Button_Init                   93
     Button_ProcessEvent           47
     ??Button_Init?relay            6
     ??Button_ProcessEvent?relay    6

 
 140 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
  16 bytes in segment XDATA_ROM_C
  19 bytes in segment XDATA_Z
 
 152 bytes of CODE  memory
  16 bytes of CONST memory
  19 bytes of XDATA memory

Errors: none
Warnings: 4
