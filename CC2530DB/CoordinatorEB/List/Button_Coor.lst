###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         06/Sep/2017  22:43:27 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\Source\Button_Coor.c                #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0             #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\Source\Butto #
#                          n_Coor.c -D HOLD_AUTO_START -D BUILD_ALL_DEVICES   #
#                          -D REFLECTOR -D NV_INIT -D xNV_RESTORE -D          #
#                          xZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D           #
#                          xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC -lC              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\ -lA    #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\        #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\ -e      #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\ -I                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\Button_ #
#                          Coor.lst                                           #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\Button_C #
#                          oor.r51                                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Button_Coor.c
      1          /*********************************************************************
      2           * INCLUDES
      3           */
      4          #include "OSAL.h"
      5          #include "AF.h"
      6          #include "ZDApp.h"
      7          #include "ZDObject.h"
      8          #include "ZDProfile.h"
      9          #include "sapi.h"
     10          
     11          #include "SensorSys_Coor.h"

  #define ALLOW_BIND_TIMER       0x0020
          ^
"D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\SensorSys_Coor.h",50  Warning[Pe047]: 
          incompatible redefinition of macro "ALLOW_BIND_TIMER" (declared at
          line 87 of
          "D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Sou
          rce\SensorSys_End.h")
     12          #include "DebugTrace.h"
     13          
     14          #if !defined( WIN32 )
     15            #include "OnBoard.h"
     16          #endif
     17          
     18          /* HAL */
     19          #include "hal_led.h"
     20          #include "hal_key.h"
     21          #include "hal_uart.h"
     22          
     23          /*********************************************************************
     24           * MACROS
     25           */
     26          
     27          /*********************************************************************
     28           * CONSTANTS
     29           */
     30          
     31          /*********************************************************************
     32           * TYPEDEFS
     33           */
     34          
     35          /*********************************************************************
     36           * GLOBAL VARIABLES
     37           */
     38          
     39          // Button 端点的簇ID
     40          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     41          const cId_t Button_ClusterList[BUTTON_MAX_CLUSTERS] =
   \                     Button_ClusterList:
   \   000000   0300         DW 3
   \   000002   0000         DW 0
     42          {
     43            BUTTON_CLUSTERID
     44          };
     45          
     46          // Button 端点简单描述符

   \                                 In  segment XDATA_ROM_C, align 1
     47          const SimpleDescriptionFormat_t Button_SimpleDesc =
   \                     Button_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW Button_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW Button_ClusterList
     48          {
     49          	BUTTON_ENDPOINT,           //  int Endpoint;
     50          	SYS_PROFID,                //  uint16 AppProfId[2];
     51          	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
     52          	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
     53          	SYS_FLAGS,                 //  int   AppFlags:4;
     54          	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     55          	(cId_t *)Button_ClusterList,  //  byte *pAppInClusterList;
     56          	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     57          	(cId_t *)Button_ClusterList   //  byte *pAppInClusterList;
     58          };
     59          
     60          /*********************************************************************
     61           * EXTERNAL VARIABLES
     62           */
     63          extern uint8 myAppState;
     64          /*********************************************************************
     65           * EXTERNAL FUNCTIONS
     66           */
     67          
     68          /*********************************************************************
     69           * LOCAL VARIABLES
     70           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     71          byte Button_TaskID;
   \                     Button_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          endPointDesc_t Button_epDesc;
   \                     Button_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     73          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          afAddrType_t Button_DstAddr;
   \                     Button_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     75          
     76          
     77          /*********************************************************************
     78           * LOCAL FUNCTIONS
     79           */
     80          void Button_Init( byte task_id );
     81          void Button_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
     82          void Button_HandleKeys( byte shift, byte keys );
     83          
     84          
     85          /*********************************************************************
     86           * @fn      Button_Init
     87           *
     88           * @brief   Initialization function for the Generic App Task.
     89           *          This is called during initialization and should contain
     90           *          any application specific initialization (ie. hardware
     91           *          initialization/setup, table initialization, power up
     92           *          notificaiton ... ).
     93           *
     94           * @param   task_id - the ID assigned by OSAL.  This ID should be
     95           *                    used to send messages and set timers.
     96           *
     97           * @return  none
     98           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          void Button_Init( byte task_id )
   \                     Button_Init:
    100          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    101            Button_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Button_TaskID
   \   000009   F0           MOVX    @DPTR,A
    102          
    103            // Device hardware initialization can be added here or in main() (Zmain.c).
    104            // If the hardware is application specific - add it here.
    105            // If the hardware is other parts of the device add it in main().
    106          
    107            Button_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#Button_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    108            Button_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    109            Button_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#Button_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    110          
    111            // Fill out the endpoint description.
    112            Button_epDesc.endPoint = BUTTON_ENDPOINT;
   \   000017   90....       MOV     DPTR,#Button_epDesc
   \   00001A   740A         MOV     A,#0xa
   \   00001C   F0           MOVX    @DPTR,A
    113            Button_epDesc.task_id = &Button_TaskID;
   \   00001D   A3           INC     DPTR
   \   00001E   74..         MOV     A,#Button_TaskID & 0xff
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   74..         MOV     A,#(Button_TaskID >> 8) & 0xff
   \   000024   F0           MOVX    @DPTR,A
    114            Button_epDesc.simpleDesc
    115                      = (SimpleDescriptionFormat_t *)&Button_SimpleDesc;
   \   000025   A3           INC     DPTR
   \   000026   74..         MOV     A,#Button_SimpleDesc & 0xff
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   74..         MOV     A,#(Button_SimpleDesc >> 8) & 0xff
   \   00002C   F0           MOVX    @DPTR,A
    116            Button_epDesc.latencyReq = noLatencyReqs;
   \   00002D   A3           INC     DPTR
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    117          
    118            // Register the endpoint description with the AF
    119            afRegister( &Button_epDesc );
   \   000030                ; Setup parameters for call to function afRegister
   \   000030   7A..         MOV     R2,#Button_epDesc & 0xff
   \   000032   7B..         MOV     R3,#(Button_epDesc >> 8) & 0xff
   \   000034   12....       LCALL   ??afRegister?relay
    120          
    121            // Register for all key events - This app will handle all key events
    122            RegisterForKeys( Button_TaskID );
   \   000037                ; Setup parameters for call to function RegisterForKeys
   \   000037   90....       MOV     DPTR,#Button_TaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ??RegisterForKeys?relay
    123          
    124            // To Update the display...
    125            ZDO_RegisterForZDOMsg( Button_TaskID, Match_Desc_rsp );
   \   00003F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00003F   7A06         MOV     R2,#0x6
   \   000041   7B80         MOV     R3,#-0x80
   \   000043   90....       MOV     DPTR,#Button_TaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    126          }
   \   00004B                REQUIRE ?Subroutine0
   \   00004B                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    127          
    128          /*********************************************************************
    129           * @fn      Button_ProcessEvent
    130           *
    131           * @brief   Generic Application Task event processor.  This function
    132           *          is called to process all events for the task.  Events
    133           *          include timers, messages and any other user defined events.
    134           *
    135           * @param   task_id  - The OSAL assigned task ID.
    136           * @param   events - events to process.  This is a bit map and can
    137           *                   contain more than one event.
    138           *
    139           * @return  none
    140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    141          UINT16 Button_ProcessEvent( byte task_id, UINT16 events )
   \                     Button_ProcessEvent:
    142          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    143            afIncomingMSGPacket_t *MSGpkt = NULL;
    144          
    145            (void)task_id;  // Intentionally unreferenced parameter
    146          
    147            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   604C         JZ      ??Button_ProcessEvent_0
    148            {
    149              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   801C         SJMP    ??Button_ProcessEvent_1
    150              while ( MSGpkt )
    151              {
    152                switch ( MSGpkt->hdr.event )
    153                {
    154                  case ZDO_CB_MSG:  // 收到被绑定节点的rsp
    155                    Button_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt);
    156                    break;
    157          
    158                  case KEY_CHANGE:
    159                    Button_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
   \                     ??Button_ProcessEvent_2:
   \   000010                ; Setup parameters for call to function Button_HandleKeys
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FA           MOV     R2,A
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   12....       LCALL   ??Button_HandleKeys?relay
    160                  break;
    161                }
    162                // Release the memory
    163                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Button_ProcessEvent_3:
   \   000020                ; Setup parameters for call to function osal_msg_deallocate
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   ??osal_msg_deallocate?relay
    164          
    165                // Next
    166                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Button_TaskID );
   \   000027                ; Setup parameters for call to function osal_msg_receive
   \   000027   90....       MOV     DPTR,#Button_TaskID
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \                     ??Button_ProcessEvent_1:
   \   00002C   12....       LCALL   ??osal_msg_receive?relay
   \   00002F   8A..         MOV     ?V0 + 4,R2
   \   000031   8B..         MOV     ?V0 + 5,R3
   \   000033   AE..         MOV     R6,?V0 + 4
   \   000035   AF..         MOV     R7,?V0 + 5
   \   000037   EE           MOV     A,R6
   \   000038   4F           ORL     A,R7
   \   000039   6016         JZ      ??Button_ProcessEvent_4
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   2440         ADD     A,#0x40
   \   000042   60CC         JZ      ??Button_ProcessEvent_2
   \   000044   24ED         ADD     A,#-0x13
   \   000046   70D8         JNZ     ??Button_ProcessEvent_3
   \   000048                ; Setup parameters for call to function Button_ProcessZDOMsgs
   \   000048   EE           MOV     A,R6
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   FB           MOV     R3,A
   \   00004C   12....       LCALL   ??Button_ProcessZDOMsgs?relay
   \   00004F   80CF         SJMP    ??Button_ProcessEvent_3
    167              }
    168             return (events ^ SYS_EVENT_MSG);
   \                     ??Button_ProcessEvent_4:
   \   000051   AA..         MOV     R2,?V0 + 0
   \   000053   E5..         MOV     A,?V0 + 1
   \   000055   6480         XRL     A,#0x80
   \   000057   FB           MOV     R3,A
   \   000058   801F         SJMP    ??Button_ProcessEvent_5
    169            }
    170          
    171            if( events & MATCH_BIND_EVT ) // 广播 match 绑定
   \                     ??Button_ProcessEvent_0:
   \   00005A   EA           MOV     A,R2
   \   00005B   5402         ANL     A,#0x2
   \   00005D   6016         JZ      ??Button_ProcessEvent_6
    172            {
    173              Sensor_BindDevice(TRUE, BUTTON_CMD_ID, NULL);
   \   00005F                ; Setup parameters for call to function Sensor_BindDevice
   \   00005F   7C00         MOV     R4,#0x0
   \   000061   7D00         MOV     R5,#0x0
   \   000063   7A01         MOV     R2,#0x1
   \   000065   7B00         MOV     R3,#0x0
   \   000067   7901         MOV     R1,#0x1
   \   000069   12....       LCALL   ??Sensor_BindDevice?relay
    174              // HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF); // 亮D2
    175              return (events ^ MATCH_BIND_EVT);
   \   00006C   E5..         MOV     A,?V0 + 0
   \   00006E   6402         XRL     A,#0x2
   \   000070   FA           MOV     R2,A
   \   000071   AB..         MOV     R3,?V0 + 1
   \   000073   8004         SJMP    ??Button_ProcessEvent_5
    176            }
    177            return 0;
   \                     ??Button_ProcessEvent_6:
   \   000075   7A00         MOV     R2,#0x0
   \   000077   7B00         MOV     R3,#0x0
   \                     ??Button_ProcessEvent_5:
   \   000079   7F06         MOV     R7,#0x6
   \   00007B   02....       LJMP    ?BANKED_LEAVE_XDATA
    178          }
    179          
    180          /*********************************************************************
    181           * @fn      Button_ProcessZDOMsgs()
    182           *
    183           * @brief   Process response messages
    184           *
    185           * @param   none
    186           *
    187           * @return  none
    188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    189          void Button_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     Button_ProcessZDOMsgs:
    190          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    191            switch ( inMsg->clusterID )
   \   00000A   EA           MOV     A,R2
   \   00000B   240C         ADD     A,#0xc
   \   00000D   F582         MOV     DPL,A
   \   00000F   EB           MOV     A,R3
   \   000010   3400         ADDC    A,#0x0
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6406         XRL     A,#0x6
   \   000017   7004         JNZ     ??Button_ProcessZDOMsgs_0
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6480         XRL     A,#0x80
   \                     ??Button_ProcessZDOMsgs_0:
   \   00001D   6003         JZ      $+5
   \   00001F   02....       LJMP    ??Button_ProcessZDOMsgs_1 & 0xFFFF
    192            {
    193              case Match_Desc_rsp:
    194                {
    195                  zAddrType_t dstAddr;
    196                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \   000022                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000022   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   000025   8A..         MOV     ?V0 + 0,R2
   \   000027   8B..         MOV     ?V0 + 1,R3
   \   000029   AE..         MOV     R6,?V0 + 0
   \   00002B   AF..         MOV     R7,?V0 + 1
    197          
    198                  if ( sensor_bindInProgress != 0xffff )
   \   00002D   90....       MOV     DPTR,#sensor_bindInProgress
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F4           CPL     A
   \   000032   7003         JNZ     ??Button_ProcessZDOMsgs_2
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F4           CPL     A
   \                     ??Button_ProcessZDOMsgs_2:
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??Button_ProcessZDOMsgs_1 & 0xFFFF
    199                  {
    200                    // Create a binding table entry
    201                    dstAddr.addrMode = Addr16Bit;
   \   00003C   7408         MOV     A,#0x8
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7402         MOV     A,#0x2
   \   000043   F0           MOVX    @DPTR,A
    202                    dstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   85..82       MOV     DPL,?XSP + 0
   \   000051   85..83       MOV     DPH,?XSP + 1
   \   000054   E8           MOV     A,R0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   E9           MOV     A,R1
   \   000058   F0           MOVX    @DPTR,A
    203          
    204                    if ( APSME_BindRequest( Button_epDesc.simpleDesc->EndPoint,
    205                               sensor_bindInProgress, &dstAddr, pRsp->epList[0] ) == ZSuccess )
   \   000059                ; Setup parameters for call to function APSME_BindRequest
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F5..         MOV     ?V0 + 0,A
   \   000064   78..         MOV     R0,#?V0 + 0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000069   7401         MOV     A,#0x1
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   AC82         MOV     R4,DPL
   \   000070   AD83         MOV     R5,DPH
   \   000072   90....       MOV     DPTR,#sensor_bindInProgress
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FA           MOV     R2,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FB           MOV     R3,A
   \   00007A   90....       MOV     DPTR,#Button_epDesc + 3
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F8           MOV     R0,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F583         MOV     DPH,A
   \   000083   8882         MOV     DPL,R0
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   ??APSME_BindRequest?relay
   \   00008A   7401         MOV     A,#0x1
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008F   E9           MOV     A,R1
   \   000090   7037         JNZ     ??Button_ProcessZDOMsgs_1
    206                    {
    207                      osal_stop_timerEx(sapi_TaskID,  ZB_BIND_TIMER);
   \   000092                ; Setup parameters for call to function osal_stop_timerEx
   \   000092   7A00         MOV     R2,#0x0
   \   000094   7B20         MOV     R3,#0x20
   \   000096   90....       MOV     DPTR,#sapi_TaskID
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   ??osal_stop_timerEx?relay
    208                      osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   00009E                ; Setup parameters for call to function osal_start_timerEx
   \   00009E   7CFA         MOV     R4,#-0x6
   \   0000A0   7D00         MOV     R5,#0x0
   \   0000A2   7A00         MOV     R2,#0x0
   \   0000A4   7B02         MOV     R3,#0x2
   \   0000A6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F9           MOV     R1,A
   \   0000AB   12....       LCALL   ??osal_start_timerEx?relay
    209          
    210                      // Find IEEE addr
    211                      ZDP_IEEEAddrReq( pRsp->nwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0000AE                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7C00         MOV     R4,#0x0
   \   0000B2   7900         MOV     R1,#0x0
   \   0000B4   8E82         MOV     DPL,R6
   \   0000B6   8F83         MOV     DPH,R7
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FA           MOV     R2,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   FB           MOV     R3,A
   \   0000BE   12....       LCALL   ??ZDP_IEEEAddrReq?relay
    212                      // Send bind confirm callback to application
    213          #if ( SAPI_CB_FUNC )
    214                      zb_BindConfirm( sensor_bindInProgress, ZB_SUCCESS );
    215          #endif
    216                      sensor_bindInProgress = 0xffff;
   \   0000C1   90....       MOV     DPTR,#sensor_bindInProgress
   \   0000C4   74FF         MOV     A,#-0x1
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   F0           MOVX    @DPTR,A
    217                    }
    218                  }
    219                }
    220              break;
    221            }
    222          }
   \                     ??Button_ProcessZDOMsgs_1:
   \   0000C9   7409         MOV     A,#0x9
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   7F02         MOV     R7,#0x2
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
    223          
    224          /*********************************************************************
    225           * @fn      Button_HandleKeys
    226           *
    227           * @brief   Handles all key events for this device.
    228           *
    229           * @param   shift - true if in shift/alt.
    230           * @param   keys - bit field for key events. Valid entries:
    231           *                 HAL_KEY_SW_4
    232           *                 HAL_KEY_SW_3
    233           *                 HAL_KEY_SW_2
    234           *                 HAL_KEY_SW_1
    235           *
    236           * @return  none
    237           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    238          void Button_HandleKeys( byte shift, byte keys )
   \                     Button_HandleKeys:
    239          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    240            // Shift is used to make each button/switch dual purpose.
    241            if ( shift )
   \   000009   EE           MOV     A,R6
   \   00000A   7027         JNZ     ??Button_HandleKeys_0
    242            {
    243              if ( keys & HAL_KEY_SW_1 )
    244              {
    245              }
    246              if ( keys & HAL_KEY_SW_2 )
    247              {
    248              }
    249              if ( keys & HAL_KEY_SW_3 )
    250              {
    251              }
    252              if ( keys & HAL_KEY_SW_4 )
    253              {
    254              }
    255            }
    256            else
    257            {
    258              if ( keys & HAL_KEY_SW_1 )
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5022         JNC     ??Button_HandleKeys_0
    259              {
    260                if(myAppState == APP_INIT)
   \   000011   90....       MOV     DPTR,#myAppState
   \   000014   E0           MOVX    A,@DPTR
   \   000015   7007         JNZ     ??Button_HandleKeys_1
    261                  Sys_SendPreBindMessage(BUTTON_TYPE_ID);
   \   000017                ; Setup parameters for call to function Sys_SendPreBindMessage
   \   000017   7901         MOV     R1,#0x1
   \   000019   12....       LCALL   ??Sys_SendPreBindMessage?relay
   \   00001C   8015         SJMP    ??Button_HandleKeys_0
    262                else
    263                {
    264                  HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \                     ??Button_HandleKeys_1:
   \   00001E                ; Setup parameters for call to function HalLedSet
   \   00001E   7A01         MOV     R2,#0x1
   \   000020   7901         MOV     R1,#0x1
   \   000022   12....       LCALL   ??HalLedSet?relay
    265                  HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
   \   000025                ; Setup parameters for call to function HalLedSet
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7902         MOV     R1,#0x2
   \   000029   12....       LCALL   ??HalLedSet?relay
    266                  HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00002C                ; Setup parameters for call to function HalLedSet
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   7904         MOV     R1,#0x4
   \   000030   12....       LCALL   ??HalLedSet?relay
    267                }
    268              }
    269          
    270              // 对远程端点发送命令
    271              if ( keys & HAL_KEY_SW_2 )
    272              {
    273          
    274          //      zb_SendDataRequest( 0xFFFE,  BUTTON_CMD_ID, 0,
    275          //                        (uint8 *)NULL, sysSeqNumber, 0, 0 );
    276              }
    277          
    278              if ( keys & HAL_KEY_SW_3 )
    279              {
    280              }
    281          
    282              // 是用来查找有没有东西可以匹配的
    283              if ( keys & HAL_KEY_SW_4 )
    284              {/*
    285                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    286                // Initiate a Match Description Request (Service Discovery)
    287                dstAddr.addrMode = AddrBroadcast;
    288                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    289                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    290                                  SYS_PROFID,
    291                                  SYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    292                                  SYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    293                                  FALSE );
    294                                  */
    295              }
    296            }
    297          }
   \                     ??Button_HandleKeys_0:
   \   000033   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Button_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Button_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Button_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Button_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Button_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Button_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Button_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Button_HandleKeys

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     Button_HandleKeys               0      0     23
       -> Sys_SendPreBindMessage     0      0     18
       -> HalLedSet                  0      0     18
       -> HalLedSet                  0      0     18
       -> HalLedSet                  0      0     18
     Button_Init                     0      0      9
       -> afRegister                 0      0     18
       -> RegisterForKeys            0      0     18
       -> ZDO_RegisterForZDOMsg      0      0     18
     Button_ProcessEvent             0      0     14
       -> osal_msg_receive           0      0     28
       -> Button_HandleKeys          0      0     28
       -> osal_msg_deallocate        0      0     28
       -> osal_msg_receive           0      0     28
       -> Button_ProcessZDOMsgs      0      0     28
       -> Sensor_BindDevice          0      0     28
     Button_ProcessZDOMsgs           0      0     34
       -> ZDO_ParseEPListRsp         0      0     38
       -> APSME_BindRequest          0      0     40
       -> osal_stop_timerEx          0      0     38
       -> osal_start_timerEx         0      0     38
       -> ZDP_IEEEAddrReq            0      0     38


   Segment part sizes:

     Function/Label                Bytes
     --------------                -----
     Button_ClusterList               4
     Button_SimpleDesc               12
     Button_TaskID                    1
     Button_epDesc                    6
     Button_DstAddr                  12
     Button_Init                     75
     ?Subroutine0                     5
     Button_ProcessEvent            126
     Button_ProcessZDOMsgs          211
     Button_HandleKeys               54
     ??Button_Init?relay              6
     ??Button_ProcessEvent?relay      6
     ??Button_ProcessZDOMsgs?relay    6
     ??Button_HandleKeys?relay        6

 
 471 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
  16 bytes in segment XDATA_ROM_C
  19 bytes in segment XDATA_Z
 
 495 bytes of CODE  memory
  16 bytes of CONST memory
  19 bytes of XDATA memory

Errors: none
Warnings: 1
