###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         01/Sep/2017  20:20:52 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Components\stack\sa #
#                          pi\sapi.c                                          #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0             #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Components\stack\sapi\sapi.c -D                #
#                          HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR  #
#                          -D NV_INIT -D xNV_RESTORE -D xZTOOL_P1 -D          #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_SAPI_FUNC -D       #
#                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigbe #
#                          e\Projects\zstack\Samples\SensorSys\CC2530DB\Coord #
#                          inatorEB\List\ -lA D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\Coordin #
#                          atorEB\List\ --diag_suppress Pe001,Pa010 -o        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\ -e      #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\ -I                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\sapi.ls #
#                          t                                                  #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\sapi.r51 #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Components\stack\sapi\sapi.c
      1          /**************************************************************************************************
      2            Filename:       sapi.c
      3            Revised:        $Date: 2010-05-03 17:46:57 -0700 (Mon, 03 May 2010) $
      4            Revision:       $Revision: 22364 $
      5          
      6            Description:    Z-Stack Simple Application Interface.
      7          
      8          
      9            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /******************************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "hal_drivers.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Tasks.h"
     48          //#include "OSAL_Custom.h"
     49          
     50          #if defined ( MT_TASK )
     51            #include "MT.h"
     52            #include "MT_TASK.h"
     53          #endif
     54          
     55          #include "nwk.h"
     56          #include "APS.h"
     57          #include "ZDApp.h"
     58          
     59          #include "osal_nv.h"
     60          #include "NLMEDE.h"
     61          #include "AF.h"
     62          #include "OnBoard.h"
     63          #include "nwk_util.h"
     64          #include "ZDProfile.h"
     65          #include "ZDObject.h"
     66          #include "hal_led.h"
     67          #include "hal_key.h"
     68          #include "sapi.h"
     69          #include "MT_SAPI.h"
     70          
     71          extern uint8 zgStartDelay;
     72          extern uint8 zgSapiEndpoint;
     73          /*********************************************************************
     74           * CONSTANTS
     75           */
     76          
     77          #if !defined OSAL_SAPI
     78          #define OSAL_SAPI  TRUE
     79          #endif
     80          
     81          #if !defined SAPI_CB_FUNC
     82          #define SAPI_CB_FUNC  TRUE
     83          #endif
     84          
     85          // Message ID's for application user messages must be in 0xE0-0xEF range
     86          #define ZB_USER_MSG                       0xE0
     87          #define SAPICB_DATA_CNF   0xE0
     88          #define SAPICB_BIND_CNF   0xE1
     89          #define SAPICB_START_CNF  0xE2
     90          
     91          /*********************************************************************
     92           * TYPEDEFS
     93           */
     94          
     95          /*********************************************************************
     96           * GLOBAL VARIABLES
     97           */
     98          
     99          #if OSAL_SAPI
    100          // The order in this table must be identical to the task initialization calls below in osalInitTask.
    101          

   \                                 In  segment XDATA_ROM_C, align 1
    102          const pTaskEventHandlerFn tasksArr[] = {
   \                     tasksArr:
   \   000000   ....         DW ??macEventLoop?relay
   \   000002   ....         DW ??nwk_event_loop?relay
   \   000004   ....         DW ??Hal_ProcessEvent?relay
   \   000006   ....         DW ??APS_event_loop?relay
   \   000008   ....         DW ??ZDApp_event_loop?relay
   \   00000A   ....         DW ??Sys_ProcessEvent?relay
   \   00000C   ....         DW ??Button_ProcessEvent?relay
   \   00000E   ....         DW ??SAPI_ProcessEvent?relay
    103            macEventLoop,
    104            nwk_event_loop,
    105            Hal_ProcessEvent,
    106          #if defined( MT_TASK )
    107            MT_ProcessEvent,
    108          #endif
    109            APS_event_loop,
    110            ZDApp_event_loop,
    111          
    112            Sys_ProcessEvent,
    113            Button_ProcessEvent,
    114            SAPI_ProcessEvent
    115          };
    116          

   \                                 In  segment XDATA_ROM_C, align 1
    117          const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
   \                     tasksCnt:
   \   000000   08           DB 8

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          uint16 *tasksEvents;
   \                     tasksEvents:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    119          #endif
    120          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          endPointDesc_t sapi_epDesc;
   \                     sapi_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    122          uint8 sapi_TaskID;
   \                     sapi_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          static uint16 sapi_bindInProgress;
   \                     sapi_bindInProgress:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    124          
    125          /*********************************************************************
    126           * LOCAL FUNCTIONS
    127           */
    128          
    129          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    130          static void SAPI_SendCback( uint8 event, uint8 status, uint16 data );
    131          
    132          static void SAPI_StartConfirm( uint8 status );
    133          static void SAPI_SendDataConfirm( uint8 handle, uint8 status );
    134          static void SAPI_BindConfirm( uint16 commandId, uint8 status );
    135          static void SAPI_FindDeviceConfirm( uint8 searchType,
    136                                                  uint8 *searchKey, uint8 *result );
    137          static void SAPI_ReceiveDataIndication( uint16 source,
    138                                        uint16 command, uint16 len, uint8 *pData  );
    139          static void SAPI_AllowBindConfirm( uint16 source );
    140          
    141          /******************************************************************************
    142           * @fn          zb_SystemReset
    143           *
    144           * @brief       The zb_SystemReset function reboots the ZigBee device.  The
    145           *              zb_SystemReset function can be called after a call to
    146           *              zb_WriteConfiguration to restart Z-Stack with the updated
    147           *              configuration.
    148           *
    149           * @param       none
    150           *
    151           * @return      none
    152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          void zb_SystemReset ( void )
   \                     zb_SystemReset:
    154          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    155            SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
   \   000000                ; Setup parameters for call to function Onboard_soft_reset
   \   000000   12....       LCALL   Onboard_soft_reset & 0xFFFF
    156          }
   \   000003   02....       LJMP    ?BRET
    157          
    158          /******************************************************************************
    159           * @fn          zb_StartRequest
    160           *
    161           * @brief       The zb_StartRequest function starts the ZigBee stack.  When the
    162           *              ZigBee stack starts, the device reads configuration parameters
    163           *              from Nonvolatile memory and the device joins its network.  The
    164           *              ZigBee stack calls the zb_StartConrifm callback function when
    165           *              the startup process completes.
    166           *
    167           * @param       none
    168           *
    169           * @return      none
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          void zb_StartRequest()
   \                     zb_StartRequest:
    172          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    173            uint8 logicalType;
    174          
    175            zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
   \   000009                ; Setup parameters for call to function zb_ReadConfiguration
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7A01         MOV     R2,#0x1
   \   000015   7987         MOV     R1,#-0x79
   \   000017   12....       LCALL   ??zb_ReadConfiguration?relay
    176          
    177            // Check for bad combinations of compile flag definitions and device type setting.
    178            if ((logicalType > ZG_DEVICETYPE_ENDDEVICE)      ||
    179          #if !ZG_BUILD_ENDDEVICE_TYPE   // Only RTR or Coord possible.
    180                (logicalType == ZG_DEVICETYPE_ENDDEVICE)     ||
    181          #endif
    182          #if !ZG_BUILD_RTR_TYPE         // Only End Device possible.
    183                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    184                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    185          #elif ZG_BUILD_RTRONLY_TYPE    // Only RTR possible.
    186                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    187          #elif !ZG_BUILD_JOINING_TYPE   // Only Coord possible.
    188                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    189          #endif
    190                (0))
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C3           CLR     C
   \   000022   9403         SUBB    A,#0x3
   \   000024   400F         JC      ??zb_StartRequest_0
    191            {
    192              logicalType = ZB_INVALID_PARAMETER;
   \   000026   7402         MOV     A,#0x2
   \   000028   F0           MOVX    @DPTR,A
    193              SAPI_SendCback(SAPICB_START_CNF, logicalType, 0);
   \   000029                ; Setup parameters for call to function SAPI_SendCback
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   FA           MOV     R2,A
   \   00002E   79E2         MOV     R1,#-0x1e
   \   000030   12....       LCALL   ??SAPI_SendCback?relay
   \   000033   800C         SJMP    ??zb_StartRequest_1
    194            }
    195            else
    196            {
    197              logicalType = ZB_SUCCESS;
   \                     ??zb_StartRequest_0:
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
    198              ZDOInitDevice(zgStartDelay);
   \   000037                ; Setup parameters for call to function ZDOInitDevice
   \   000037   90....       MOV     DPTR,#zgStartDelay
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FA           MOV     R2,A
   \   00003C   7B00         MOV     R3,#0x0
   \   00003E   12....       LCALL   ??ZDOInitDevice?relay
    199            }
    200          
    201            
    202            return;
   \                     ??zb_StartRequest_1:
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046                REQUIRE ?Subroutine0
   \   000046                ; // Fall through to label ?Subroutine0
    203          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    204          
    205          /******************************************************************************
    206           * @fn          zb_BindDevice
    207           *
    208           * @brief       The zb_BindDevice function establishes or removes a ‘binding? *              between two devices.  Once bound, an application can send
    209           *              messages to a device by referencing the commandId for the
    210           *              binding.
    211           *
    212           * @param       create - TRUE to create a binding, FALSE to remove a binding
    213           *              commandId - The identifier of the binding
    214           *              pDestination - The 64-bit IEEE address of the device to bind to
    215           *
    216           * @return      The status of the bind operation is returned in the
    217           *              zb_BindConfirm callback.
    218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    219          void zb_BindDevice ( uint8 create, uint16 commandId, uint8 *pDestination )
   \                     zb_BindDevice:
    220          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   FE           MOV     R6,A
   \   000017   ED           MOV     A,R5
   \   000018   FF           MOV     R7,A
    221            zAddrType_t destination;
    222            uint8 ret = ZB_ALREADY_IN_PROGRESS;
   \   000019   75..20       MOV     ?V0 + 1,#0x20
    223          
    224            if ( create )
   \   00001C   E9           MOV     A,R1
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??zb_BindDevice_0 & 0xFFFF
    225            {
    226              if (sapi_bindInProgress == 0xffff)
   \   000022   90....       MOV     DPTR,#sapi_bindInProgress
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F4           CPL     A
   \   000027   7003         JNZ     ??zb_BindDevice_1
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F4           CPL     A
   \                     ??zb_BindDevice_1:
   \   00002C   7056         JNZ     ??CrossCallReturnLabel_10
    227              {
    228                if ( pDestination )
   \   00002E   EE           MOV     A,R6
   \   00002F   4F           ORL     A,R7
   \   000030   6067         JZ      ??zb_BindDevice_2
    229                {
    230                  destination.addrMode = Addr64Bit;
   \   000032   740A         MOV     A,#0xa
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   7403         MOV     A,#0x3
   \   000039   F0           MOVX    @DPTR,A
    231                  osal_cpyExtAddr( destination.addr.extAddr, pDestination );
   \   00003A                ; Setup parameters for call to function sAddrExtCpy
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   AA82         MOV     R2,DPL
   \   000041   AB83         MOV     R3,DPH
   \   000043   12....       LCALL   ??sAddrExtCpy?relay
    232          
    233                  ret = APSME_BindRequest( sapi_epDesc.endPoint, commandId,
    234                                                      &destination, sapi_epDesc.endPoint );
   \   000046                ; Setup parameters for call to function APSME_BindRequest
   \   000046   90....       MOV     DPTR,#sapi_epDesc
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V0 + 1,A
   \   00004C   78..         MOV     R0,#?V0 + 1
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   7403         MOV     A,#0x3
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   AC82         MOV     R4,DPL
   \   000058   AD83         MOV     R5,DPH
   \   00005A   7401         MOV     A,#0x1
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   12....       LCALL   ??Subroutine18_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000062   90....       MOV     DPTR,#sapi_epDesc
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   12....       LCALL   ??APSME_BindRequest?relay
   \   00006A   7401         MOV     A,#0x1
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006F   E9           MOV     A,R1
   \   000070   F5..         MOV     ?V0 + 1,A
    235          
    236                  if ( ret == ZSuccess )
   \   000072   7010         JNZ     ??CrossCallReturnLabel_10
    237                  {
    238                    // Find nwk addr
    239                    ZDP_NwkAddrReq(pDestination, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000074                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7C00         MOV     R4,#0x0
   \   000078   7900         MOV     R1,#0x0
   \   00007A   EE           MOV     A,R6
   \   00007B   FA           MOV     R2,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   ??ZDP_NwkAddrReq?relay
    240                    osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   000081                ; Setup parameters for call to function osal_start_timerEx
   \   000081   12....       LCALL   ?Subroutine9 & 0xFFFF
    241                  }
    242                }
    243                else
    244                {
    245                  ret = ZB_INVALID_PARAMETER;
    246                  destination.addrMode = Addr16Bit;
    247                  destination.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    248                  if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumOutClusters,
    249                                                          sapi_epDesc.simpleDesc->pAppOutClusterList ) )
    250                  {
    251                    // Try to match with a device in the allow bind mode
    252                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    253                        sapi_epDesc.simpleDesc->AppProfId, 1, &commandId, 0, (cId_t *)NULL, 0 );
    254                  }
    255                  else if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumInClusters,
    256                                                          sapi_epDesc.simpleDesc->pAppInClusterList ) )
    257                  {
    258                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    259                        sapi_epDesc.simpleDesc->AppProfId, 0, (cId_t *)NULL, 1, &commandId, 0 );
    260                  }
    261          
    262                  if ( ret == ZB_SUCCESS )
    263                  {
    264                    // Set a timer to make sure bind completes
    265          #if ( ZG_BUILD_RTR_TYPE )
    266                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, AIB_MaxBindingTime);
    267          #else
    268                    // AIB_MaxBindingTime is not defined for an End Device
    269                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, zgApsDefaultMaxBindingTime);
    270          #endif
    271                    sapi_bindInProgress = commandId;
    272                    return; // dont send cback event
    273                  }
    274                }
    275              }
    276          
    277              SAPI_SendCback( SAPICB_BIND_CNF, ret, commandId );
   \                     ??CrossCallReturnLabel_10:
   \   000084                ; Setup parameters for call to function SAPI_SendCback
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FC           MOV     R4,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FD           MOV     R5,A
   \   00008F   AA..         MOV     R2,?V0 + 1
   \   000091   79E1         MOV     R1,#-0x1f
   \   000093   12....       LCALL   ??SAPI_SendCback?relay
   \   000096   02....       LJMP    ??CrossCallReturnLabel_11 & 0xFFFF
   \                     ??zb_BindDevice_2:
   \   000099   75..02       MOV     ?V0 + 1,#0x2
   \   00009C   740A         MOV     A,#0xa
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   74FF         MOV     A,#-0x1
   \   0000A9   F0           MOVX    @DPTR,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B5   8882         MOV     DPL,R0
   \   0000B7   8983         MOV     DPH,R1
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   FC           MOV     R4,A
   \   0000C4   7402         MOV     A,#0x2
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   \   0000CD   7901         MOV     R1,#0x1
   \   0000CF   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   0000D2   7402         MOV     A,#0x2
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   6031         JZ      ??zb_BindDevice_3
   \   0000DA                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000DA   75..00       MOV     ?V0 + 1,#0x0
   \   0000DD   78..         MOV     R0,#?V0 + 1
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E2   E4           CLR     A
   \   0000E3   F5..         MOV     ?V0 + 2,A
   \   0000E5   F5..         MOV     ?V0 + 3,A
   \   0000E7   78..         MOV     R0,#?V0 + 2
   \   0000E9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EC   78..         MOV     R0,#?V0 + 1
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F1   7404         MOV     A,#0x4
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   8582..       MOV     ?V0 + 2,DPL
   \   0000F9   8583..       MOV     ?V0 + 3,DPH
   \   0000FC   78..         MOV     R0,#?V0 + 2
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000104   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000107   7901         MOV     R1,#0x1
   \   000109   805D         SJMP    ??zb_BindDevice_4
   \                     ??zb_BindDevice_3:
   \   00010B   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00010E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000111   8882         MOV     DPL,R0
   \   000113   8983         MOV     DPH,R1
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   FC           MOV     R4,A
   \   00011D   7402         MOV     A,#0x2
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   AA82         MOV     R2,DPL
   \   000124   AB83         MOV     R3,DPH
   \   000126   7901         MOV     R1,#0x1
   \   000128   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   00012B   7402         MOV     A,#0x2
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   E9           MOV     A,R1
   \   000131   7003         JNZ     $+5
   \   000133   02....       LJMP    ??CrossCallReturnLabel_10 & 0xFFFF
   \   000136                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000136   75..00       MOV     ?V0 + 1,#0x0
   \   000139   78..         MOV     R0,#?V0 + 1
   \   00013B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00013E   7401         MOV     A,#0x1
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   8582..       MOV     ?V0 + 2,DPL
   \   000146   8583..       MOV     ?V0 + 3,DPH
   \   000149   78..         MOV     R0,#?V0 + 2
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014E   75..01       MOV     ?V0 + 1,#0x1
   \   000151   78..         MOV     R0,#?V0 + 1
   \   000153   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000156   E4           CLR     A
   \   000157   F5..         MOV     ?V0 + 2,A
   \   000159   F5..         MOV     ?V0 + 3,A
   \   00015B   78..         MOV     R0,#?V0 + 2
   \   00015D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000160   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000163   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000166   7900         MOV     R1,#0x0
   \                     ??zb_BindDevice_4:
   \   000168   7CFF         MOV     R4,#-0x1
   \   00016A   7DFF         MOV     R5,#-0x1
   \   00016C   740A         MOV     A,#0xa
   \   00016E   12....       LCALL   ?XSTACK_DISP0_8
   \   000171   AA82         MOV     R2,DPL
   \   000173   AB83         MOV     R3,DPH
   \   000175   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   000178   7408         MOV     A,#0x8
   \   00017A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017D   E9           MOV     A,R1
   \   00017E   F5..         MOV     ?V0 + 1,A
   \   000180   E5..         MOV     A,?V0 + 1
   \   000182   6003         JZ      $+5
   \   000184   02....       LJMP    ??CrossCallReturnLabel_10 & 0xFFFF
   \   000187                ; Setup parameters for call to function osal_start_timerEx
   \   000187   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   FC           MOV     R4,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   FD           MOV     R5,A
   \   00018F   7A00         MOV     R2,#0x0
   \   000191   7B20         MOV     R3,#0x20
   \   000193   90....       MOV     DPTR,#sapi_TaskID
   \   000196   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000199   85..82       MOV     DPL,?XSP + 0
   \   00019C   85..83       MOV     DPH,?XSP + 1
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   F8           MOV     R0,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   F9           MOV     R1,A
   \   0001A4   90....       MOV     DPTR,#sapi_bindInProgress
   \   0001A7   E8           MOV     A,R0
   \   0001A8   F0           MOVX    @DPTR,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E9           MOV     A,R1
   \   0001AB   F0           MOVX    @DPTR,A
   \   0001AC   8018         SJMP    ??CrossCallReturnLabel_11
    278            }
    279            else
    280            {
    281              // Remove local bindings for the commandId
    282              BindingEntry_t *pBind;
    283          
    284              // Loop through bindings an remove any that match the cluster
    285              while ( pBind = bindFind( sapi_epDesc.simpleDesc->EndPoint, commandId, 0 ) )
    286              {
    287                bindRemoveEntry(pBind);
   \                     ??zb_BindDevice_5:
   \   0001AE                ; Setup parameters for call to function bindRemoveEntry
   \   0001AE   12....       LCALL   ??bindRemoveEntry?relay
    288              }
   \                     ??zb_BindDevice_0:
   \   0001B1                ; Setup parameters for call to function bindFind
   \   0001B1   7C00         MOV     R4,#0x0
   \   0001B3   85..82       MOV     DPL,?XSP + 0
   \   0001B6   85..83       MOV     DPH,?XSP + 1
   \   0001B9   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0001BC   12....       LCALL   ??bindFind?relay
   \   0001BF   EA           MOV     A,R2
   \   0001C0   4B           ORL     A,R3
   \   0001C1   70EB         JNZ     ??zb_BindDevice_5
    289              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   0001C3                ; Setup parameters for call to function osal_start_timerEx
   \   0001C3   12....       LCALL   ?Subroutine9 & 0xFFFF
    290            }
   \                     ??CrossCallReturnLabel_11:
   \   0001C6   740B         MOV     A,#0xb
   \   0001C8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CB                REQUIRE ?Subroutine1
   \   0001CB                ; // Fall through to label ?Subroutine1
    291            return;
    292          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000008                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7CFA         MOV     R4,#-0x6
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B02         MOV     R3,#0x2
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B                REQUIRE ??Subroutine15_0
   \   00000B                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??osal_start_timerEx?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine18_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    293          /******************************************************************************
    294           * @fn          zb_PermitJoiningRequest
    295           *
    296           * @brief       The zb_PermitJoiningRequest function is used to control the
    297           *              joining permissions and thus allow or disallow new devices from
    298           *              joining the network.
    299           *
    300           * @param       destination - The destination parameter indicates the address
    301           *                            of the device for which the joining permissions
    302           *                            should be set. This is usually the local device
    303           *                            address or the special broadcast address that denotes
    304           *                            all routers and coordinator ( 0xFFFC ). This way
    305           *                            the joining permissions of a single device or the
    306           *                            whole network can be controlled.
    307           *              timeout -  Indicates the amount of time in seconds for which
    308           *                         the joining permissions should be turned on.
    309           *                         If timeout is set to 0x00, the device will turn off the
    310           *                         joining permissions indefinitely. If it is set to 0xFF,
    311           *                         the joining permissions will be turned on indefinitely.
    312           *
    313           *
    314           * @return      ZB_SUCCESS or a failure code
    315           *
    316           */
    317          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          uint8 zb_PermitJoiningRequest ( uint16 destination, uint8 timeout )
   \                     zb_PermitJoiningRequest:
    319          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    320          #if defined( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    321            zAddrType_t dstAddr;
    322          
    323            dstAddr.addrMode = Addr16Bit;
    324            dstAddr.addr.shortAddr = destination;
    325          
    326            return( (uint8) ZDP_MgmtPermitJoinReq( &dstAddr, timeout, 0, 0 ) );
    327          #else
    328            (void)destination;
    329            (void)timeout;
    330            return ZUnsupportedMode;
   \   000000   7912         MOV     R1,#0x12
   \   000002   02....       LJMP    ?BRET
    331          #endif
    332          }
    333          /******************************************************************************
    334           * @fn          zb_AllowBind
    335           *
    336           * @brief       The zb_AllowBind function puts the device into the
    337           *              Allow Binding Mode for a given period of time.  A peer device
    338           *              can establish a binding to a device in the Allow Binding Mode
    339           *              by calling zb_BindDevice with a destination address of NULL
    340           *
    341           * @param       timeout - The number of seconds to remain in the allow binding
    342           *                        mode.  Valid values range from 1 through 65.
    343           *                        If 0, the Allow Bind mode will be set false without TO
    344           *                        If greater than 64, the Allow Bind mode will be true
    345           *
    346           * @return      ZB_SUCCESS if the device entered the allow bind mode, else
    347           *              an error code.
    348           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    349          void zb_AllowBind ( uint8 timeout )
   \                     zb_AllowBind:
    350          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    351          
    352            //HalLedSet(HAL_LED_1, HAL_LED_MODE_FLASH);
    353            osal_stop_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER);
   \   000007                ; Setup parameters for call to function osal_stop_timerEx
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B40         MOV     R3,#0x40
   \   00000B   90....       MOV     DPTR,#sapi_TaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??osal_stop_timerEx?relay
    354          
    355            if ( timeout == 0 )
   \   000013   EE           MOV     A,R6
   \   000014   7005         JNZ     ??zb_AllowBind_0
    356            {
    357              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   000016                ; Setup parameters for call to function afSetMatch
   \   000016   12....       LCALL   ?Subroutine5 & 0xFFFF
    358            }
   \                     ??CrossCallReturnLabel_15:
   \   000019   802B         SJMP    ??CrossCallReturnLabel_14
    359            else
    360            {
    361              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, TRUE);
   \                     ??zb_AllowBind_0:
   \   00001B                ; Setup parameters for call to function afSetMatch
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   12....       LCALL   ??Subroutine16_0 & 0xFFFF
    362              if ( timeout != 0xFF )
   \                     ??CrossCallReturnLabel_18:
   \   000020   74FF         MOV     A,#-0x1
   \   000022   6E           XRL     A,R6
   \   000023   6021         JZ      ??CrossCallReturnLabel_14
    363              {
    364                if ( timeout > 64 )
   \   000025   EE           MOV     A,R6
   \   000026   C3           CLR     C
   \   000027   9441         SUBB    A,#0x41
   \   000029   4002         JC      ??zb_AllowBind_1
    365                {
    366                  timeout = 64;
   \   00002B   7E40         MOV     R6,#0x40
    367                }
    368                osal_start_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER, timeout*1000);
   \                     ??zb_AllowBind_1:
   \   00002D                ; Setup parameters for call to function osal_start_timerEx
   \   00002D   EE           MOV     A,R6
   \   00002E   FC           MOV     R4,A
   \   00002F   75F0E8       MOV     B,#-0x18
   \   000032   A4           MUL     AB
   \   000033   CC           XCH     A,R4
   \   000034   A8F0         MOV     R0,B
   \   000036   75F003       MOV     B,#0x3
   \   000039   A4           MUL     AB
   \   00003A   28           ADD     A,R0
   \   00003B   FD           MOV     R5,A
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B40         MOV     R3,#0x40
   \   000040   90....       MOV     DPTR,#sapi_TaskID
   \   000043   12....       LCALL   ??Subroutine15_0 & 0xFFFF
    369              }
    370            }
    371            return;
   \                     ??CrossCallReturnLabel_14:
   \   000046                REQUIRE ?Subroutine2
   \   000046                ; // Fall through to label ?Subroutine2
    372          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7A00         MOV     R2,#0x0
   \   000002                REQUIRE ??Subroutine16_0
   \   000002                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   12....       LCALL   ??afSetMatch?relay
   \   000006   22           RET
    373          /******************************************************************************
    374           * @fn          zb_SendDataRequest
    375           *
    376           * @brief       The zb_SendDataRequest function initiates transmission of data
    377           *              to a peer device
    378           *
    379           * @param       destination - The destination of the data.  The destination can
    380           *                            be one of the following:
    381           *                            - 16-Bit short address of device [0-0xfffD]
    382           *                            - ZB_BROADCAST_ADDR sends the data to all devices
    383           *                              in the network.
    384           *                            - ZB_BINDING_ADDR sends the data to a previously
    385           *                              bound device.
    386           *
    387           *              commandId - The command ID to send with the message.  If the
    388           *                          ZB_BINDING_ADDR destination is used, this parameter
    389           *                          also indicates the binding to use.
    390           *
    391           *              len - The size of the pData buffer in bytes
    392           *              handle - A handle used to identify the send data request.
    393           *              txOptions - TRUE if requesting acknowledgement from the destination.
    394           *              radius - The max number of hops the packet can travel through
    395           *                       before it is dropped.
    396           *
    397           * @return      none
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          void zb_SendDataRequest ( uint16 destination, uint16 commandId, uint8 len,
   \                     zb_SendDataRequest:
    400                                    uint8 *pData, uint8 handle, uint8 txOptions, uint8 radius )
    401          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V0 + 2,R4
   \   00000C   8D..         MOV     ?V0 + 3,R5
   \   00000E   E9           MOV     A,R1
   \   00000F   FF           MOV     R7,A
   \   000010   741A         MOV     A,#0x1a
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0 + 4,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 5,A
   \   00001C   741D         MOV     A,#0x1d
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FE           MOV     R6,A
   \   000023   741E         MOV     A,#0x1e
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F5..         MOV     ?V0 + 0,A
    402            afStatus_t status;
    403            afAddrType_t dstAddr;
    404          
    405            txOptions |= AF_DISCV_ROUTE;
   \   00002B   EE           MOV     A,R6
   \   00002C   D2E5         SETB    0xE0 /* A   */.5
   \   00002E   FE           MOV     R6,A
    406          
    407            // Set the destination address
    408            if (destination == ZB_BINDING_ADDR)
   \   00002F   74FE         MOV     A,#-0x2
   \   000031   6A           XRL     A,R2
   \   000032   7003         JNZ     ??zb_SendDataRequest_0
   \   000034   74FF         MOV     A,#-0x1
   \   000036   6B           XRL     A,R3
   \                     ??zb_SendDataRequest_0:
   \   000037   7009         JNZ     ??zb_SendDataRequest_1
    409            {
    410              // Binding
    411              dstAddr.addrMode = afAddrNotPresent;
   \   000039   7408         MOV     A,#0x8
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E4           CLR     A
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   801D         SJMP    ??zb_SendDataRequest_2
    412            }
    413            else
    414            {
    415              // Use short address
    416              dstAddr.addr.shortAddr = destination;
   \                     ??zb_SendDataRequest_1:
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   EA           MOV     A,R2
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   EB           MOV     A,R3
   \   00004C   F0           MOVX    @DPTR,A
    417              dstAddr.addrMode = afAddr16Bit;
   \   00004D   7408         MOV     A,#0x8
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7402         MOV     A,#0x2
   \   000054   F0           MOVX    @DPTR,A
    418          
    419              if ( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( destination ) )
   \   000055                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000055   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   000058   E9           MOV     A,R1
   \   000059   6004         JZ      ??zb_SendDataRequest_2
    420              {
    421                txOptions &= ~AF_ACK_REQUEST;
   \   00005B   EE           MOV     A,R6
   \   00005C   C2E4         CLR     0xE0 /* A   */.4
   \   00005E   FE           MOV     R6,A
    422              }
    423            }
    424          
    425            dstAddr.panId = 0;                                    // Not an inter-pan message.
   \                     ??zb_SendDataRequest_2:
   \   00005F   740A         MOV     A,#0xa
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   F0           MOVX    @DPTR,A
    426            dstAddr.endPoint = sapi_epDesc.simpleDesc->EndPoint;  // Set the endpoint.
   \   000068   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   C0E0         PUSH    A
   \   00006E   7409         MOV     A,#0x9
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   D0E0         POP     A
   \   000075   F0           MOVX    @DPTR,A
    427          
    428            // Send the message
    429            status = AF_DataRequest(&dstAddr, &sapi_epDesc, commandId, len,
    430                                    pData, &handle, txOptions, radius);
   \   000076                ; Setup parameters for call to function AF_DataRequest
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007B   741D         MOV     A,#0x1d
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   8582..       MOV     ?V0 + 0,DPL
   \   000083   8583..       MOV     ?V0 + 1,DPH
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   78..         MOV     R0,#?V0 + 4
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   8F..         MOV     ?V0 + 0,R7
   \   000092   75..00       MOV     ?V0 + 1,#0x0
   \   000095   78..         MOV     R0,#?V0 + 0
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   78..         MOV     R0,#?V0 + 2
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009F   EE           MOV     A,R6
   \   0000A0   F9           MOV     R1,A
   \   0000A1   7C..         MOV     R4,#sapi_epDesc & 0xff
   \   0000A3   7D..         MOV     R5,#(sapi_epDesc >> 8) & 0xff
   \   0000A5   7409         MOV     A,#0x9
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   AA82         MOV     R2,DPL
   \   0000AC   AB83         MOV     R3,DPH
   \   0000AE   12....       LCALL   ??AF_DataRequest?relay
   \   0000B1   7409         MOV     A,#0x9
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B6   E9           MOV     A,R1
   \   0000B7   FA           MOV     R2,A
    431          
    432            if (status != afStatus_SUCCESS)
   \   0000B8   600E         JZ      ??zb_SendDataRequest_3
    433            {
    434              SAPI_SendCback( SAPICB_DATA_CNF, status, handle );
   \   0000BA                ; Setup parameters for call to function SAPI_SendCback
   \   0000BA   741C         MOV     A,#0x1c
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   FC           MOV     R4,A
   \   0000C1   7D00         MOV     R5,#0x0
   \   0000C3   79E0         MOV     R1,#-0x20
   \   0000C5   12....       LCALL   ??SAPI_SendCback?relay
    435            }
    436          }
   \                     ??zb_SendDataRequest_3:
   \   0000C8   740C         MOV     A,#0xc
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD                REQUIRE ?Subroutine3
   \   0000CD                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    437          
    438          /******************************************************************************
    439           * @fn          zb_ReadConfiguration
    440           *
    441           * @brief       The zb_ReadConfiguration function is used to get a
    442           *              Configuration Protperty from Nonvolatile memory.
    443           *
    444           * @param       configId - The identifier for the configuration property
    445           *              len - The size of the pValue buffer in bytes
    446           *              pValue - A buffer to hold the configuration property
    447           *
    448           * @return      none
    449           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    450          uint8 zb_ReadConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_ReadConfiguration:
    451          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    452            uint8 size;
    453          
    454            size = (uint8)osal_nv_item_len( configId );
   \   00000D                ; Setup parameters for call to function osal_nv_item_len
   \   00000D   8F..         MOV     ?V0 + 2,R7
   \   00000F   AA..         MOV     R2,?V0 + 2
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_nv_item_len?relay
   \   000016   EA           MOV     A,R2
   \   000017   F9           MOV     R1,A
    455            if ( size > len )
   \   000018   EE           MOV     A,R6
   \   000019   C3           CLR     C
   \   00001A   99           SUBB    A,R1
   \   00001B   5004         JNC     ??zb_ReadConfiguration_0
    456            {
    457              return ZFailure;
   \   00001D   7901         MOV     R1,#0x1
   \   00001F   8021         SJMP    ??zb_ReadConfiguration_1
    458            }
    459            else
    460            {
    461              return( osal_nv_read(configId, 0, size, pValue) );
   \                     ??zb_ReadConfiguration_0:
   \   000021                ; Setup parameters for call to function osal_nv_read
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   89..         MOV     ?V0 + 0,R1
   \   000028   75..00       MOV     ?V0 + 1,#0x0
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7C00         MOV     R4,#0x0
   \   000032   7D00         MOV     R5,#0x0
   \   000034   8F..         MOV     ?V0 + 0,R7
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   ??osal_nv_read?relay
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
    462            }
   \                     ??zb_ReadConfiguration_1:
   \   000042   02....       LJMP    ?Subroutine1 & 0xFFFF
    463          }
    464          /******************************************************************************
    465           * @fn          zb_WriteConfiguration
    466           *
    467           * @brief       The zb_WriteConfiguration function is used to write a
    468           *              Configuration Property to nonvolatile memory.
    469           *
    470           * @param       configId - The identifier for the configuration property
    471           *              len - The size of the pValue buffer in bytes
    472           *              pValue - A buffer containing the new value of the
    473           *                       configuration property
    474           *
    475           * @return      none
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          uint8 zb_WriteConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_WriteConfiguration:
    478          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    479            return( osal_nv_write(configId, 0, len, pValue) );
   \   000009                ; Setup parameters for call to function osal_nv_write
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   8E..         MOV     ?V0 + 0,R6
   \   000014   75..00       MOV     ?V0 + 1,#0x0
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   8F..         MOV     ?V0 + 0,R7
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   12....       LCALL   ??osal_nv_write?relay
   \   000029   7404         MOV     A,#0x4
   \   00002B                REQUIRE ?Subroutine4
   \   00002B                ; // Fall through to label ?Subroutine4
    480          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    481          /******************************************************************************
    482           * @fn          zb_GetDeviceInfo
    483           *
    484           * @brief       The zb_GetDeviceInfo function retrieves a Device Information
    485           *              Property.
    486           *
    487           * @param       param - The identifier for the device information
    488           *              pValue - A buffer to hold the device information
    489           *
    490           * @return      none
    491           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    492          void zb_GetDeviceInfo ( uint8 param, void *pValue )
   \                     zb_GetDeviceInfo:
    493          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    494            switch(param)
   \   000006   6017         JZ      ??zb_GetDeviceInfo_0
   \   000008   14           DEC     A
   \   000009   6026         JZ      ??zb_GetDeviceInfo_1
   \   00000B   14           DEC     A
   \   00000C   602B         JZ      ??zb_GetDeviceInfo_2
   \   00000E   14           DEC     A
   \   00000F   603A         JZ      ??zb_GetDeviceInfo_3
   \   000011   14           DEC     A
   \   000012   603F         JZ      ??zb_GetDeviceInfo_4
   \   000014   14           DEC     A
   \   000015   6044         JZ      ??zb_GetDeviceInfo_5
   \   000017   14           DEC     A
   \   000018   6049         JZ      ??zb_GetDeviceInfo_6
   \   00001A   14           DEC     A
   \   00001B   604E         JZ      ??zb_GetDeviceInfo_7
   \   00001D   8066         SJMP    ??zb_GetDeviceInfo_8
    495            {
    496              case ZB_INFO_DEV_STATE:
    497                osal_memcpy(pValue, &devState, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_0:
   \   00001F                ; Setup parameters for call to function osal_memcpy
   \   00001F   75....       MOV     ?V0 + 0,#devState & 0xff
   \   000022   75....       MOV     ?V0 + 1,#(devState >> 8) & 0xff
   \                     ??zb_GetDeviceInfo_9:
   \   000025   75..00       MOV     ?V0 + 2,#0x0
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002D   7C01         MOV     R4,#0x1
   \   00002F   804A         SJMP    ??zb_GetDeviceInfo_10
    498                break;
    499              case ZB_INFO_IEEE_ADDR:
    500                osal_memcpy(pValue, &aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_1:
   \   000031                ; Setup parameters for call to function osal_memcpy
   \   000031   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000037   8038         SJMP    ??zb_GetDeviceInfo_11
    501                break;
    502              case ZB_INFO_SHORT_ADDR:
    503                osal_memcpy(pValue, &_NIB.nwkDevAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_2:
   \   000039                ; Setup parameters for call to function osal_memcpy
   \   000039   75....       MOV     ?V0 + 0,#(_NIB + 20) & 0xff
   \   00003C   75....       MOV     ?V0 + 1,#((_NIB + 20) >> 8) & 0xff
   \                     ??zb_GetDeviceInfo_12:
   \   00003F   75..00       MOV     ?V0 + 2,#0x0
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000047   7C02         MOV     R4,#0x2
   \   000049   8030         SJMP    ??zb_GetDeviceInfo_10
    504                break;
    505              case ZB_INFO_PARENT_SHORT_ADDR:
    506                osal_memcpy(pValue, &_NIB.nwkCoordAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_3:
   \   00004B                ; Setup parameters for call to function osal_memcpy
   \   00004B   75....       MOV     ?V0 + 0,#(_NIB + 23) & 0xff
   \   00004E   75....       MOV     ?V0 + 1,#((_NIB + 23) >> 8) & 0xff
   \   000051   80EC         SJMP    ??zb_GetDeviceInfo_12
    507                break;
    508              case ZB_INFO_PARENT_IEEE_ADDR:
    509                osal_memcpy(pValue, &_NIB.nwkCoordExtAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_4:
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   75....       MOV     ?V0 + 0,#(_NIB + 25) & 0xff
   \   000056   75....       MOV     ?V0 + 1,#((_NIB + 25) >> 8) & 0xff
   \   000059   8016         SJMP    ??zb_GetDeviceInfo_11
    510                break;
    511              case ZB_INFO_CHANNEL:
    512                osal_memcpy(pValue, &_NIB.nwkLogicalChannel, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_5:
   \   00005B                ; Setup parameters for call to function osal_memcpy
   \   00005B   75....       MOV     ?V0 + 0,#(_NIB + 22) & 0xff
   \   00005E   75....       MOV     ?V0 + 1,#((_NIB + 22) >> 8) & 0xff
   \   000061   80C2         SJMP    ??zb_GetDeviceInfo_9
    513                break;
    514              case ZB_INFO_PAN_ID:
    515                osal_memcpy(pValue, &_NIB.nwkPanId, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_6:
   \   000063                ; Setup parameters for call to function osal_memcpy
   \   000063   75....       MOV     ?V0 + 0,#(_NIB + 33) & 0xff
   \   000066   75....       MOV     ?V0 + 1,#((_NIB + 33) >> 8) & 0xff
   \   000069   80D4         SJMP    ??zb_GetDeviceInfo_12
    516                break;
    517              case ZB_INFO_EXT_PAN_ID:
    518                osal_memcpy(pValue, &_NIB.extendedPANID, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_7:
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   75....       MOV     ?V0 + 0,#(_NIB + 53) & 0xff
   \   00006E   75....       MOV     ?V0 + 1,#((_NIB + 53) >> 8) & 0xff
   \                     ??zb_GetDeviceInfo_11:
   \   000071   75..00       MOV     ?V0 + 2,#0x0
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000079   7C08         MOV     R4,#0x8
   \                     ??zb_GetDeviceInfo_10:
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   12....       LCALL   ??osal_memcpy?relay
   \   000080   7403         MOV     A,#0x3
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    519                break;
    520            }
    521          }
   \                     ??zb_GetDeviceInfo_8:
   \   000085   7F03         MOV     R7,#0x3
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    522          
    523          /******************************************************************************
    524           * @fn          zb_FindDeviceRequest
    525           *
    526           * @brief       The zb_FindDeviceRequest function is used to determine the
    527           *              short address for a device in the network.  The device initiating
    528           *              a call to zb_FindDeviceRequest and the device being discovered
    529           *              must both be a member of the same network.  When the search is
    530           *              complete, the zv_FindDeviceConfirm callback function is called.
    531           *
    532           * @param       searchType - The type of search to perform. Can be one of following:
    533           *                           ZB_IEEE_SEARCH - Search for 16-bit addr given IEEE addr.
    534           *              searchKey - Value to search on.
    535           *
    536           * @return      none
    537           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    538          void zb_FindDeviceRequest( uint8 searchType, void *searchKey )
   \                     zb_FindDeviceRequest:
    539          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    540            if (searchType == ZB_IEEE_SEARCH)
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7009         JNZ     ??zb_FindDeviceRequest_0
    541            {
    542              ZDP_NwkAddrReq((uint8*) searchKey, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00000C                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   ??ZDP_NwkAddrReq?relay
    543            }
    544          }
   \                     ??zb_FindDeviceRequest_0:
   \   000015   02....       LJMP    ?Subroutine2 & 0xFFFF
    545          /******************************************************************************
    546           * @fn          SAPI_StartConfirm
    547           *
    548           * @brief       The SAPI_StartConfirm callback is called by the ZigBee stack
    549           *              after a start request operation completes
    550           *
    551           * @param       status - The status of the start operation.  Status of
    552           *                       ZB_SUCCESS indicates the start operation completed
    553           *                       successfully.  Else the status is an error code.
    554           *
    555           * @return      none
    556           */
    557          void SAPI_StartConfirm( uint8 status )
    558          {
    559          #if defined ( MT_SAPI_CB_FUNC )
    560            /* First check if MT has subscribed for this callback. If so , pass it as
    561            a event to MonitorTest and return control to calling function after that */
    562            if ( SAPICB_CHECK( SPI_CB_SAPI_START_CNF ) )
    563            {
    564              zb_MTCallbackStartConfirm( status );
    565            }
    566            else
    567          #endif  //MT_SAPI_CB_FUNC
    568            {
    569          #if ( SAPI_CB_FUNC )
    570              zb_StartConfirm( status );
    571          #endif
    572            }
    573          }
    574          
    575          /******************************************************************************
    576           * @fn          SAPI_SendDataConfirm
    577           *
    578           * @brief       The SAPI_SendDataConfirm callback function is called by the
    579           *              ZigBee after a send data operation completes
    580           *
    581           * @param       handle - The handle identifying the data transmission.
    582           *              status - The status of the operation.
    583           *
    584           * @return      none
    585           */
    586          void SAPI_SendDataConfirm( uint8 handle, uint8 status )
    587          {
    588          #if defined ( MT_SAPI_CB_FUNC )
    589            /* First check if MT has subscribed for this callback. If so , pass it as
    590            a event to MonitorTest and return control to calling function after that */
    591            if ( SAPICB_CHECK( SPI_CB_SAPI_SEND_DATA_CNF ) )
    592            {
    593              zb_MTCallbackSendDataConfirm( handle, status );
    594            }
    595            else
    596          #endif  //MT_SAPI_CB_FUNC
    597            {
    598          #if ( SAPI_CB_FUNC )
    599              zb_SendDataConfirm( handle, status );
    600          #endif
    601            }
    602          }
    603          
    604          /******************************************************************************
    605           * @fn          SAPI_BindConfirm
    606           *
    607           * @brief       The SAPI_BindConfirm callback is called by the ZigBee stack
    608           *              after a bind operation completes.
    609           *
    610           * @param       commandId - The command ID of the binding being confirmed.
    611           *              status - The status of the bind operation.
    612           *              allowBind - TRUE if the bind operation was initiated by a call
    613           *                          to zb_AllowBindRespones.  FALSE if the operation
    614           *                          was initiated by a call to ZB_BindDevice
    615           *
    616           * @return      none
    617           */
    618          void SAPI_BindConfirm( uint16 commandId, uint8 status )
    619          {
    620          #if defined ( MT_SAPI_CB_FUNC )
    621            /* First check if MT has subscribed for this callback. If so , pass it as
    622            a event to MonitorTest and return control to calling function after that */
    623            if ( SAPICB_CHECK( SPI_CB_SAPI_BIND_CNF ) )
    624            {
    625              zb_MTCallbackBindConfirm( commandId, status );
    626            }
    627            else
    628          #endif  //MT_SAPI_CB_FUNC
    629            {
    630          #if ( SAPI_CB_FUNC )
    631              zb_BindConfirm( commandId, status );
    632          #endif
    633            }
    634          }
    635          /******************************************************************************
    636           * @fn          SAPI_AllowBindConfirm
    637           *
    638           * @brief       Indicates when another device attempted to bind to this device
    639           *
    640           * @param
    641           *
    642           * @return      none
    643           */
    644          void SAPI_AllowBindConfirm( uint16 source )
    645          {
    646            #if defined ( MT_SAPI_CB_FUNC )
    647            /* First check if MT has subscribed for this callback. If so , pass it as
    648            a event to MonitorTest and return control to calling function after that */
    649            if ( SAPICB_CHECK( SPI_CB_SAPI_ALLOW_BIND_CNF ) )
    650            {
    651              zb_MTCallbackAllowBindConfirm( source );
    652            }
    653            else
    654          #endif  //MT_SAPI_CB_FUNC
    655            {
    656          #if ( SAPI_CB_FUNC )
    657              zb_AllowBindConfirm( source );
    658          #endif
    659            }
    660          }
    661          /******************************************************************************
    662           * @fn          SAPI_FindDeviceConfirm
    663           *
    664           * @brief       The SAPI_FindDeviceConfirm callback function is called by the
    665           *              ZigBee stack when a find device operation completes.
    666           *
    667           * @param       searchType - The type of search that was performed.
    668           *              searchKey - Value that the search was executed on.
    669           *              result - The result of the search.
    670           *
    671           * @return      none
    672           */
    673          void SAPI_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
    674          {
    675          #if defined ( MT_SAPI_CB_FUNC )
    676            /* First check if MT has subscribed for this callback. If so , pass it as
    677            a event to MonitorTest and return control to calling function after that */
    678            if ( SAPICB_CHECK( SPI_CB_SAPI_FIND_DEV_CNF ) )
    679            {
    680              zb_MTCallbackFindDeviceConfirm( searchType, searchKey, result );
    681            }
    682            else
    683          #endif  //MT_SAPI_CB_FUNC
    684            {
    685          #if ( SAPI_CB_FUNC )
    686              zb_FindDeviceConfirm( searchType, searchKey, result );
    687          #endif
    688            }
    689          }
    690          /******************************************************************************
    691           * @fn          SAPI_ReceiveDataIndication
    692           *
    693           * @brief       The SAPI_ReceiveDataIndication callback function is called
    694           *              asynchronously by the ZigBee stack to notify the application
    695           *              when data is received from a peer device.
    696           *
    697           * @param       source - The short address of the peer device that sent the data
    698           *              command - The commandId associated with the data
    699           *              len - The number of bytes in the pData parameter
    700           *              pData - The data sent by the peer device
    701           *
    702           * @return      none
    703           */
    704          void SAPI_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
    705          {
    706          #if defined ( MT_SAPI_CB_FUNC )
    707            /* First check if MT has subscribed for this callback. If so , pass it as
    708            a event to MonitorTest and return control to calling function after that */
    709            if ( SAPICB_CHECK( SPI_CB_SAPI_RCV_DATA_IND ) )
    710            {
    711              zb_MTCallbackReceiveDataIndication( source, command, len, pData  );
    712            }
    713            else
    714          #endif  //MT_SAPI_CB_FUNC
    715            {
    716          #if ( SAPI_CB_FUNC )
    717              zb_ReceiveDataIndication( source, command, len, pData  );
    718          #endif
    719            }
    720          }
    721          /*********************************************************************
    722           * @fn      SAPI_ProcessEvent
    723           *
    724           * @brief   Simple API Task event processor.  This function
    725           *          is called to process all events for the task.  Events
    726           *          include timers, messages and any other user defined events.
    727           *
    728           * @param   task_id  - The OSAL assigned task ID.
    729           * @param   events - events to process.  This is a bit map and can
    730           *                   contain more than one event.
    731           *
    732           * @return  none
    733           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    734          UINT16 SAPI_ProcessEvent( byte task_id, UINT16 events )
   \                     SAPI_ProcessEvent:
    735          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
    736            osal_event_hdr_t *pMsg;
    737            afIncomingMSGPacket_t *pMSGpkt;
    738            afDataConfirm_t *pDataConfirm;
    739          
    740            if ( events & SYS_EVENT_MSG )
   \   00000B   EB           MOV     A,R3
   \   00000C   5480         ANL     A,#0x80
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??SAPI_ProcessEvent_0 & 0xFFFF
    741            {
    742              pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   000013                ; Setup parameters for call to function osal_msg_receive
   \   000013   800F         SJMP    ??SAPI_ProcessEvent_1
    743              while ( pMsg )
    744              {
    745                switch ( pMsg->event )
    746                {
    747                  case ZDO_CB_MSG:
    748                    SAPI_ProcessZDOMsgs( (zdoIncomingMsg_t *)pMsg );
    749                    break;
    750          
    751                  case AF_DATA_CONFIRM_CMD:
    752                    // This message is received as a confirmation of a data packet sent.
    753                    // The status is of ZStatus_t type [defined in ZComDef.h]
    754                    // The message fields are defined in AF.h
    755                    pDataConfirm = (afDataConfirm_t *) pMsg;
    756                    SAPI_SendDataConfirm( pDataConfirm->transID, pDataConfirm->hdr.status );
    757                    break;
    758          
    759                  case AF_INCOMING_MSG_CMD:
    760                    pMSGpkt = (afIncomingMSGPacket_t *) pMsg;
    761                    SAPI_ReceiveDataIndication( pMSGpkt->srcAddr.addr.shortAddr, pMSGpkt->clusterId,
    762                                              pMSGpkt->cmd.DataLength, pMSGpkt->cmd.Data);
    763                    break;
    764          
    765                  case ZDO_STATE_CHANGE:
    766                    // If the device has started up, notify the application
    767                    if (pMsg->status == DEV_END_DEVICE ||
    768                        pMsg->status == DEV_ROUTER ||
    769                        pMsg->status == DEV_ZB_COORD )
    770                    {
    771                      SAPI_StartConfirm( ZB_SUCCESS );
    772                    }
    773                    else  if (pMsg->status == DEV_HOLD ||
    774                            pMsg->status == DEV_INIT)
    775                    {
    776                      SAPI_StartConfirm( ZB_INIT );
    777                    }
    778                    break;
    779          
    780                  case ZDO_MATCH_DESC_RSP_SENT:
    781                    SAPI_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)pMsg)->nwkAddr );
    782                    break;
    783          
    784                  case SAPICB_DATA_CNF:
    785                    SAPI_SendDataConfirm( (uint8)((sapi_CbackEvent_t *)pMsg)->data,
    786                                              ((sapi_CbackEvent_t *)pMsg)->hdr.status );
    787                    break;
    788          
    789                  case SAPICB_BIND_CNF:
    790                    SAPI_BindConfirm( ((sapi_CbackEvent_t *)pMsg)->data,
    791                                        ((sapi_CbackEvent_t *)pMsg)->hdr.status );
    792                    break;
    793          
    794                  case SAPICB_START_CNF:
    795                    SAPI_StartConfirm( ((sapi_CbackEvent_t *)pMsg)->hdr.status );
   \                     ??SAPI_ProcessEvent_2:
   \   000015                ; Setup parameters for call to function zb_StartConfirm
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \                     ??SAPI_ProcessEvent_3:
   \   000018   12....       LCALL   ??zb_StartConfirm?relay
    796                    break;
    797          
    798                  default:
    799                    // User messages should be handled by user or passed to the application
    800                    if ( pMsg->event >= ZB_USER_MSG )
    801                    {
    802          
    803                    }
    804                    break;
    805                }
    806          
    807                // Release the memory
    808                osal_msg_deallocate( (uint8 *) pMsg );
   \                     ??SAPI_ProcessEvent_4:
   \   00001B                ; Setup parameters for call to function osal_msg_deallocate
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   ??osal_msg_deallocate?relay
    809          
    810                // Next
    811                pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   000022                ; Setup parameters for call to function osal_msg_receive
   \   000022   A9..         MOV     R1,?V0 + 2
   \                     ??SAPI_ProcessEvent_1:
   \   000024   12....       LCALL   ??osal_msg_receive?relay
   \   000027   8A..         MOV     ?V0 + 4,R2
   \   000029   8B..         MOV     ?V0 + 5,R3
   \   00002B   AE..         MOV     R6,?V0 + 4
   \   00002D   AF..         MOV     R7,?V0 + 5
   \   00002F   EE           MOV     A,R6
   \   000030   4F           ORL     A,R7
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??SAPI_ProcessEvent_5 & 0xFFFF
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   24E6         ADD     A,#-0x1a
   \   00003D   603D         JZ      ??SAPI_ProcessEvent_6
   \   00003F   2449         ADD     A,#0x49
   \   000041   6076         JZ      ??SAPI_ProcessEvent_7
   \   000043   14           DEC     A
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??SAPI_ProcessEvent_8 & 0xFFFF
   \   000049   14           DEC     A
   \   00004A   6016         JZ      ??SAPI_ProcessEvent_9
   \   00004C   24F3         ADD     A,#-0xd
   \   00004E   7003         JNZ     $+5
   \   000050   02....       LJMP    ??SAPI_ProcessEvent_10 & 0xFFFF
   \   000053   14           DEC     A
   \   000054   7003         JNZ     $+5
   \   000056   02....       LJMP    ??SAPI_ProcessEvent_11 & 0xFFFF
   \   000059   14           DEC     A
   \   00005A   60B9         JZ      ??SAPI_ProcessEvent_2
   \   00005C   24E5         ADD     A,#-0x1b
   \   00005E   600B         JZ      ??SAPI_ProcessEvent_12
   \   000060   80B9         SJMP    ??SAPI_ProcessEvent_4
   \                     ??SAPI_ProcessEvent_9:
   \   000062                ; Setup parameters for call to function SAPI_ProcessZDOMsgs
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   ??SAPI_ProcessZDOMsgs?relay
   \   000069   80B0         SJMP    ??SAPI_ProcessEvent_4
   \                     ??SAPI_ProcessEvent_12:
   \   00006B                ; Setup parameters for call to function zb_SendDataConfirm
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   FA           MOV     R2,A
   \   00006E   8E82         MOV     DPL,R6
   \   000070   8F83         MOV     DPH,R7
   \   000072   A3           INC     DPTR
   \                     ??SAPI_ProcessEvent_13:
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   12....       LCALL   ??zb_SendDataConfirm?relay
   \   00007A   809F         SJMP    ??SAPI_ProcessEvent_4
   \                     ??SAPI_ProcessEvent_6:
   \   00007C                ; Setup parameters for call to function zb_ReceiveDataIndication
   \   00007C   EE           MOV     A,R6
   \   00007D   2422         ADD     A,#0x22
   \   00007F   F582         MOV     DPL,A
   \   000081   EF           MOV     A,R7
   \   000082   3400         ADDC    A,#0x0
   \   000084   F583         MOV     DPH,A
   \   000086   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000089   EE           MOV     A,R6
   \   00008A   2420         ADD     A,#0x20
   \   00008C   F582         MOV     DPL,A
   \   00008E   EF           MOV     A,R7
   \   00008F   3400         ADDC    A,#0x0
   \   000091   F583         MOV     DPH,A
   \   000093   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FC           MOV     R4,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FD           MOV     R5,A
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000AE   12....       LCALL   ??zb_ReceiveDataIndication?relay
   \   0000B1   7404         MOV     A,#0x4
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B6   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
   \                     ??SAPI_ProcessEvent_7:
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   6406         XRL     A,#0x6
   \   0000BD   6014         JZ      ??SAPI_ProcessEvent_14
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   6407         XRL     A,#0x7
   \   0000C7   600A         JZ      ??SAPI_ProcessEvent_14
   \   0000C9   8E82         MOV     DPL,R6
   \   0000CB   8F83         MOV     DPH,R7
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   6409         XRL     A,#0x9
   \   0000D1   7005         JNZ     ??SAPI_ProcessEvent_15
   \                     ??SAPI_ProcessEvent_14:
   \   0000D3                ; Setup parameters for call to function zb_StartConfirm
   \   0000D3   7900         MOV     R1,#0x0
   \   0000D5   02....       LJMP    ??SAPI_ProcessEvent_3 & 0xFFFF
   \                     ??SAPI_ProcessEvent_15:
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   6007         JZ      ??SAPI_ProcessEvent_16
   \   0000E0   6401         XRL     A,#0x1
   \   0000E2   6003         JZ      $+5
   \   0000E4   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
   \                     ??SAPI_ProcessEvent_16:
   \   0000E7                ; Setup parameters for call to function zb_StartConfirm
   \   0000E7   7922         MOV     R1,#0x22
   \   0000E9   02....       LJMP    ??SAPI_ProcessEvent_3 & 0xFFFF
   \                     ??SAPI_ProcessEvent_8:
   \   0000EC                ; Setup parameters for call to function zb_AllowBindConfirm
   \   0000EC   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0000EF   12....       LCALL   ??zb_AllowBindConfirm?relay
   \   0000F2   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
   \                     ??SAPI_ProcessEvent_10:
   \   0000F5                ; Setup parameters for call to function zb_SendDataConfirm
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   FA           MOV     R2,A
   \   0000F8   8E82         MOV     DPL,R6
   \   0000FA   8F83         MOV     DPH,R7
   \   0000FC   02....       LJMP    ??SAPI_ProcessEvent_13 & 0xFFFF
   \                     ??SAPI_ProcessEvent_11:
   \   0000FF                ; Setup parameters for call to function zb_BindConfirm
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F9           MOV     R1,A
   \   000102   8E82         MOV     DPL,R6
   \   000104   8F83         MOV     DPH,R7
   \   000106   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000109   12....       LCALL   ??zb_BindConfirm?relay
   \   00010C   02....       LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
    812              }
    813          
    814              // Return unprocessed events
    815              return (events ^ SYS_EVENT_MSG);
   \                     ??SAPI_ProcessEvent_5:
   \   00010F   AA..         MOV     R2,?V0 + 0
   \   000111   E5..         MOV     A,?V0 + 1
   \   000113   6480         XRL     A,#0x80
   \                     ??SAPI_ProcessEvent_17:
   \   000115   FB           MOV     R3,A
   \   000116   804A         SJMP    ??SAPI_ProcessEvent_18
    816            }
    817          
    818            if ( events & ZB_ALLOW_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_0:
   \   000118   EB           MOV     A,R3
   \   000119   5440         ANL     A,#0x40
   \   00011B   600B         JZ      ??SAPI_ProcessEvent_19
    819            {
    820              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   00011D                ; Setup parameters for call to function afSetMatch
   \   00011D   12....       LCALL   ?Subroutine5 & 0xFFFF
    821              return (events ^ ZB_ALLOW_BIND_TIMER);
   \                     ??CrossCallReturnLabel_16:
   \   000120   AA..         MOV     R2,?V0 + 0
   \   000122   E5..         MOV     A,?V0 + 1
   \   000124   6440         XRL     A,#0x40
   \   000126   80ED         SJMP    ??SAPI_ProcessEvent_17
    822            }
    823          
    824            if ( events & ZB_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_19:
   \   000128   EB           MOV     A,R3
   \   000129   5420         ANL     A,#0x20
   \   00012B   600D         JZ      ??SAPI_ProcessEvent_20
    825            {
    826              // Send bind confirm callback to application
    827              SAPI_BindConfirm( sapi_bindInProgress, ZB_TIMEOUT );
   \   00012D                ; Setup parameters for call to function zb_BindConfirm
   \   00012D   7921         MOV     R1,#0x21
   \   00012F   12....       LCALL   ?Subroutine7 & 0xFFFF
    828              sapi_bindInProgress = 0xffff;
    829          
    830              return (events ^ ZB_BIND_TIMER);
   \                     ??CrossCallReturnLabel_2:
   \   000132   AA..         MOV     R2,?V0 + 0
   \   000134   E5..         MOV     A,?V0 + 1
   \   000136   6420         XRL     A,#0x20
   \   000138   80DB         SJMP    ??SAPI_ProcessEvent_17
    831            }
    832          
    833            if ( events & ZB_ENTRY_EVENT )
   \                     ??SAPI_ProcessEvent_20:
   \   00013A   EB           MOV     A,R3
   \   00013B   5410         ANL     A,#0x10
   \   00013D   6019         JZ      ??SAPI_ProcessEvent_21
    834            {
    835              uint8 startOptions;
                           ^
Warning[Pe177]: variable "startOptions" was declared but never referenced
    836          
    837              // Give indication to application of device startup
    838          #if ( SAPI_CB_FUNC )
    839              zb_HandleOsalEvent( ZB_ENTRY_EVENT );
   \   00013F                ; Setup parameters for call to function zb_HandleOsalEvent
   \   00013F   7A00         MOV     R2,#0x0
   \   000141   7B10         MOV     R3,#0x10
   \   000143   12....       LCALL   ??zb_HandleOsalEvent?relay
    840          #endif
    841          
    842              // LED off cancels HOLD_AUTO_START blink set in the stack
    843              HalLedSet (HAL_LED_4, HAL_LED_MODE_ON);
   \   000146                ; Setup parameters for call to function HalLedSet
   \   000146   7A01         MOV     R2,#0x1
   \   000148   7908         MOV     R1,#0x8
   \   00014A   12....       LCALL   ??HalLedSet?relay
    844          
    845            //  zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
    846            //  if ( startOptions & ZCD_STARTOPT_AUTO_START )
    847            //  {
    848                zb_StartRequest();
   \   00014D                ; Setup parameters for call to function zb_StartRequest
   \   00014D   12....       LCALL   ??zb_StartRequest?relay
    849            //  }
    850            //  else
    851            //  {
    852                // blink leds and wait for external input to config and restart
    853            //    HalLedBlink(HAL_LED_2, 0, 50, 500);
    854            //  }
    855          
    856              return (events ^ ZB_ENTRY_EVENT );
   \   000150   AA..         MOV     R2,?V0 + 0
   \   000152   E5..         MOV     A,?V0 + 1
   \   000154   6410         XRL     A,#0x10
   \   000156   80BD         SJMP    ??SAPI_ProcessEvent_17
    857            }
    858          
    859            // This must be the last event to be processed
    860            if ( events & ( ZB_USER_EVENTS ) )
   \                     ??SAPI_ProcessEvent_21:
   \   000158   EA           MOV     A,R2
   \   000159   6003         JZ      ??SAPI_ProcessEvent_22
    861            {
    862              // User events are passed to the application
    863          #if ( SAPI_CB_FUNC )
    864              zb_HandleOsalEvent( events );
   \   00015B                ; Setup parameters for call to function zb_HandleOsalEvent
   \   00015B   12....       LCALL   ??zb_HandleOsalEvent?relay
    865          #endif
    866          
    867              // Do not return here, return 0 later
    868            }
    869          
    870            // Discard unknown events
    871            return 0;
   \                     ??SAPI_ProcessEvent_22:
   \   00015E   7A00         MOV     R2,#0x0
   \   000160   7B00         MOV     R3,#0x0
   \                     ??SAPI_ProcessEvent_18:
   \   000162   02....       LJMP    ?Subroutine3 & 0xFFFF
    872          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   90....       MOV     DPTR,#sapi_bindInProgress
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??zb_BindConfirm?relay
   \   00000B   90....       MOV     DPTR,#sapi_bindInProgress
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET
    873          
    874          /*********************************************************************
    875           * @fn      SAPI_ProcessZDOMsgs()
    876           *
    877           * @brief   Process response messages
    878           *
    879           * @param   none
    880           *
    881           * @return  none
    882           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    883          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     SAPI_ProcessZDOMsgs:
    884          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    885            switch ( inMsg->clusterID )
   \   00000A   EA           MOV     A,R2
   \   00000B   240C         ADD     A,#0xc
   \   00000D   F582         MOV     DPL,A
   \   00000F   EB           MOV     A,R3
   \   000010   3400         ADDC    A,#0x0
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 1,A
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for SAPI_ProcessZDOMsgs>_0`:
   \   000020   0000         DW        0
   \   000022   0200         DW        2
   \   000024   0080         DW        32768
   \   000026   ....         DW        ??SAPI_ProcessZDOMsgs_0
   \   000028   0680         DW        32774
   \   00002A   ....         DW        ??SAPI_ProcessZDOMsgs_1
   \   00002C   ....         DW        ??CrossCallReturnLabel_3
    886            {
    887              case NWK_addr_rsp:
    888                {
    889                  // Send find device callback to application
    890                  ZDO_NwkIEEEAddrResp_t *pNwkAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_0:
   \   00002E                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002E   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   000031   8A82         MOV     DPL,R2
   \   000033   8B83         MOV     DPH,R3
    891                  SAPI_FindDeviceConfirm( ZB_IEEE_SEARCH, (uint8*)&pNwkAddrRsp->nwkAddr, pNwkAddrRsp->extAddr );
   \   000035                ; Setup parameters for call to function zb_FindDeviceConfirm
   \   000035   E582         MOV     A,DPL
   \   000037   2403         ADD     A,#0x3
   \   000039   FC           MOV     R4,A
   \   00003A   E583         MOV     A,DPH
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   FD           MOV     R5,A
   \   00003F   A3           INC     DPTR
   \   000040   AA82         MOV     R2,DPL
   \   000042   AB83         MOV     R3,DPH
   \   000044   7901         MOV     R1,#0x1
   \   000046   12....       LCALL   ??zb_FindDeviceConfirm?relay
    892                }
    893                break;
   \   000049   02....       LJMP    ??CrossCallReturnLabel_3 & 0xFFFF
    894          
    895              case Match_Desc_rsp:
    896                {
    897                  zAddrType_t dstAddr;
    898                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_1:
   \   00004C                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00004C   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00004F   8A..         MOV     ?V0 + 0,R2
   \   000051   8B..         MOV     ?V0 + 1,R3
   \   000053   AE..         MOV     R6,?V0 + 0
   \   000055   AF..         MOV     R7,?V0 + 1
    899          
    900                  if ( sapi_bindInProgress != 0xffff )
   \   000057   90....       MOV     DPTR,#sapi_bindInProgress
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F4           CPL     A
   \   00005C   7003         JNZ     ??SAPI_ProcessZDOMsgs_2
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F4           CPL     A
   \                     ??SAPI_ProcessZDOMsgs_2:
   \   000061   606B         JZ      ??CrossCallReturnLabel_3
    901                  {
    902                    // Create a binding table entry
    903                    dstAddr.addrMode = Addr16Bit;
   \   000063   7408         MOV     A,#0x8
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   7402         MOV     A,#0x2
   \   00006A   F0           MOVX    @DPTR,A
    904                    dstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   85..82       MOV     DPL,?XSP + 0
   \   000078   85..83       MOV     DPH,?XSP + 1
   \   00007B   E8           MOV     A,R0
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   E9           MOV     A,R1
   \   00007F   F0           MOVX    @DPTR,A
    905          
    906                    if ( APSME_BindRequest( sapi_epDesc.simpleDesc->EndPoint,
    907                               sapi_bindInProgress, &dstAddr, pRsp->epList[0] ) == ZSuccess )
   \   000080                ; Setup parameters for call to function APSME_BindRequest
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F5..         MOV     ?V0 + 0,A
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   7401         MOV     A,#0x1
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   AC82         MOV     R4,DPL
   \   000097   AD83         MOV     R5,DPH
   \   000099   90....       MOV     DPTR,#sapi_bindInProgress
   \   00009C   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00009F   12....       LCALL   ??APSME_BindRequest?relay
   \   0000A2   7401         MOV     A,#0x1
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   E9           MOV     A,R1
   \   0000A8   7024         JNZ     ??CrossCallReturnLabel_3
    908                    {
    909                      osal_stop_timerEx(sapi_TaskID,  ZB_BIND_TIMER);
   \   0000AA                ; Setup parameters for call to function osal_stop_timerEx
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   7B20         MOV     R3,#0x20
   \   0000AE   90....       MOV     DPTR,#sapi_TaskID
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   12....       LCALL   ??osal_stop_timerEx?relay
    910                      osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   0000B6                ; Setup parameters for call to function osal_start_timerEx
   \   0000B6   12....       LCALL   ?Subroutine9 & 0xFFFF
    911          
    912                      // Find IEEE addr
    913                      ZDP_IEEEAddrReq( pRsp->nwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \                     ??CrossCallReturnLabel_12:
   \   0000B9                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000B9   7D00         MOV     R5,#0x0
   \   0000BB   7C00         MOV     R4,#0x0
   \   0000BD   7900         MOV     R1,#0x0
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   12....       LCALL   ??Subroutine17_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000C6   12....       LCALL   ??ZDP_IEEEAddrReq?relay
    914          #if defined ( MT_SAPI_CB_FUNC )
    915                      zb_MTCallbackBindConfirm( sapi_bindInProgress, ZB_SUCCESS );
    916          #endif              
    917                      // Send bind confirm callback to application
    918          #if ( SAPI_CB_FUNC )
    919                      zb_BindConfirm( sapi_bindInProgress, ZB_SUCCESS );
   \   0000C9                ; Setup parameters for call to function zb_BindConfirm
   \   0000C9   7900         MOV     R1,#0x0
   \   0000CB   12....       LCALL   ?Subroutine7 & 0xFFFF
    920          #endif
    921                      sapi_bindInProgress = 0xffff;
    922                    }
    923                  }
    924                }
    925                break;
    926            }
    927          }
   \                     ??CrossCallReturnLabel_3:
   \   0000CE   7409         MOV     A,#0x9
   \   0000D0   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine18_0
   \   000001                ; // Fall through to label ??Subroutine18_0
    928          
    929          /*********************************************************************
    930           * @fn      SAPI_Init
    931           *
    932           * @brief   Initialization function for the Simple API Task.
    933           *          This is called during initialization and should contain
    934           *          any application specific initialization (ie. hardware
    935           *          initialization/setup, table initialization, power up
    936           *          notification ... ).
    937           *
    938           * @param   task_id - the ID assigned by OSAL.  This ID should be
    939           *                    used to send messages and set timers.
    940           *
    941           * @return  none
    942           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    943          void SAPI_Init( byte task_id )
   \                     SAPI_Init:
    944          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    945            sapi_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#sapi_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    946            sapi_bindInProgress = 0xffff;
   \   00000B   90....       MOV     DPTR,#sapi_bindInProgress
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
    947          
    948            sapi_epDesc.task_id = &sapi_TaskID;
   \   000013   90....       MOV     DPTR,#sapi_epDesc + 1
   \   000016   74..         MOV     A,#sapi_TaskID & 0xff
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   74..         MOV     A,#(sapi_TaskID >> 8) & 0xff
   \   00001C   F0           MOVX    @DPTR,A
    949            sapi_epDesc.endPoint = 0;
   \   00001D   90....       MOV     DPTR,#sapi_epDesc
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
    950            
    951          #if ( SAPI_CB_FUNC )
    952            sapi_epDesc.endPoint = zb_SimpleDesc.EndPoint;
   \   000022   90....       MOV     DPTR,#zb_SimpleDesc
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#sapi_epDesc
   \   000029   F0           MOVX    @DPTR,A
    953            sapi_epDesc.task_id = &sapi_TaskID;
    954            sapi_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&zb_SimpleDesc;
   \   00002A   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00002D   74..         MOV     A,#zb_SimpleDesc & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(zb_SimpleDesc >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
    955            sapi_epDesc.latencyReq = noLatencyReqs;
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
    956          
    957            // Register the endpoint/interface description with the AF
    958            afRegister( &sapi_epDesc );
   \   000037                ; Setup parameters for call to function afRegister
   \   000037   7A..         MOV     R2,#sapi_epDesc & 0xff
   \   000039   7B..         MOV     R3,#(sapi_epDesc >> 8) & 0xff
   \   00003B   12....       LCALL   ??afRegister?relay
    959          #endif
    960          
    961            // Turn off match descriptor response by default
    962            afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   00003E                ; Setup parameters for call to function afSetMatch
   \   00003E   12....       LCALL   ?Subroutine5 & 0xFFFF
    963          
    964            // Register callback evetns from the ZDApp
    965            ZDO_RegisterForZDOMsg( sapi_TaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_17:
   \   000041                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000041   7A00         MOV     R2,#0x0
   \   000043   7B80         MOV     R3,#-0x80
   \   000045   90....       MOV     DPTR,#sapi_TaskID
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    966            ZDO_RegisterForZDOMsg( sapi_TaskID, Match_Desc_rsp );
   \   00004D                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00004D   7A06         MOV     R2,#0x6
   \   00004F   7B80         MOV     R3,#-0x80
   \   000051   90....       MOV     DPTR,#sapi_TaskID
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    967          
    968          #if ( SAPI_CB_FUNC )
    969            // Set an event to start the application
    970            osal_set_event(task_id, ZB_ENTRY_EVENT);
   \   000059                ; Setup parameters for call to function osal_set_event
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   7B10         MOV     R3,#0x10
   \   00005D   EE           MOV     A,R6
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   ??osal_set_event?relay
    971          #endif
    972          }
   \   000062   02....       LJMP    ?Subroutine2 & 0xFFFF
    973          /*********************************************************************
    974           * @fn      SAPI_SendCback
    975           *
    976           * @brief   Sends a message to the sapi task ( itself ) so that a
    977           *           callback can be generated later.
    978           *
    979           * @return  none
    980           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    981          void SAPI_SendCback( uint8 event, uint8 status, uint16 data )
   \                     SAPI_SendCback:
    982          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    983            sapi_CbackEvent_t *pMsg;
    984          
    985            pMsg = (sapi_CbackEvent_t *)osal_msg_allocate( sizeof(sapi_CbackEvent_t) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A04         MOV     R2,#0x4
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_msg_allocate?relay
    986            if( pMsg )
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   601E         JZ      ??SAPI_SendCback_0
    987            {
    988              pMsg->hdr.event = event;
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   E5..         MOV     A,?V0 + 0
   \   00001E   F0           MOVX    @DPTR,A
    989              pMsg->hdr.status = status;
   \   00001F   A3           INC     DPTR
   \   000020   E5..         MOV     A,?V0 + 1
   \   000022   F0           MOVX    @DPTR,A
    990              pMsg->data = data;
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   EE           MOV     A,R6
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   EF           MOV     A,R7
   \   00002D   F0           MOVX    @DPTR,A
    991          
    992              osal_msg_send( sapi_TaskID, (uint8 *)pMsg );
   \   00002E                ; Setup parameters for call to function osal_msg_send
   \   00002E   90....       MOV     DPTR,#sapi_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_msg_send?relay
    993            }
    994          
    995          }
   \                     ??SAPI_SendCback_0:
   \   000036   02....       LJMP    ?Subroutine1 & 0xFFFF
    996          
    997          #if OSAL_SAPI
    998          /*********************************************************************
    999           * @fn      osalInitTasks
   1000           *
   1001           * @brief   This function invokes the initialization function for each task.
   1002           *
   1003           * @param   void
   1004           *
   1005           * @return  none
   1006           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1007          void osalInitTasks( void )
   \                     osalInitTasks:
   1008          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1009            uint8 taskID = 0;
   1010          
   1011            tasksEvents = (uint16 *)osal_mem_alloc( sizeof( uint16 ) * tasksCnt);
   \   000004                ; Setup parameters for call to function osal_mem_alloc
   \   000004   7A10         MOV     R2,#0x10
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??osal_mem_alloc?relay
   \   00000B   90....       MOV     DPTR,#tasksEvents
   \   00000E   EA           MOV     A,R2
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   A3           INC     DPTR
   \   000011   EB           MOV     A,R3
   \   000012   F0           MOVX    @DPTR,A
   1012            osal_memset( tasksEvents, 0, (sizeof( uint16 ) * tasksCnt));
   \   000013                ; Setup parameters for call to function osal_memset
   \   000013   7C10         MOV     R4,#0x10
   \   000015   7D00         MOV     R5,#0x0
   \   000017   7900         MOV     R1,#0x0
   \   000019   12....       LCALL   ??osal_memset?relay
   1013          
   1014            macTaskInit( taskID++ );
   \   00001C                ; Setup parameters for call to function macTaskInit
   \   00001C   7900         MOV     R1,#0x0
   \   00001E   12....       LCALL   ??macTaskInit?relay
   1015            nwk_init( taskID++ );
   \   000021                ; Setup parameters for call to function nwk_init
   \   000021   7901         MOV     R1,#0x1
   \   000023   12....       LCALL   ??nwk_init?relay
   1016            Hal_Init( taskID++ );
   \   000026                ; Setup parameters for call to function Hal_Init
   \   000026   7902         MOV     R1,#0x2
   \   000028   12....       LCALL   ??Hal_Init?relay
   1017          #if defined( MT_TASK )
   1018            MT_TaskInit( taskID++ );
   1019          #endif
   1020            APS_Init( taskID++ );
   \   00002B                ; Setup parameters for call to function APS_Init
   \   00002B   7903         MOV     R1,#0x3
   \   00002D   12....       LCALL   ??APS_Init?relay
   1021            ZDApp_Init( taskID++ );
   \   000030                ; Setup parameters for call to function ZDApp_Init
   \   000030   7904         MOV     R1,#0x4
   \   000032   12....       LCALL   ??ZDApp_Init?relay
   1022            Sys_Init( taskID++ );
   \   000035                ; Setup parameters for call to function Sys_Init
   \   000035   7905         MOV     R1,#0x5
   \   000037   12....       LCALL   ??Sys_Init?relay
   1023            Button_Init( taskID++ );
   \   00003A                ; Setup parameters for call to function Button_Init
   \   00003A   7906         MOV     R1,#0x6
   \   00003C   12....       LCALL   ??Button_Init?relay
   1024            SAPI_Init( taskID );
   \   00003F                ; Setup parameters for call to function SAPI_Init
   \   00003F   7907         MOV     R1,#0x7
   \   000041   12....       LCALL   ??SAPI_Init?relay
   1025          }
   \   000044   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine17_0
   \   000001                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_SystemReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SystemReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_StartRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_BindDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_PermitJoiningRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_PermitJoiningRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_AllowBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_SendDataRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_ReadConfiguration?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReadConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_WriteConfiguration?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_WriteConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_GetDeviceInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_GetDeviceInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_FindDeviceRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SAPI_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SAPI_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SAPI_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SAPI_SendCback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_SendCback

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??osalInitTasks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalInitTasks
   1026          #endif
   1027          
   1028          /*********************************************************************
   1029          *********************************************************************/
   1030          

   Maximum stack usage in bytes:

     Function                      ISTACK PSTACK XSTACK
     --------                      ------ ------ ------
     SAPI_Init                         0      0      9
       -> afRegister                   0      0     18
       -> afSetMatch                   0      0     18
       -> ZDO_RegisterForZDOMsg        0      0     18
       -> ZDO_RegisterForZDOMsg        0      0     18
       -> osal_set_event               0      0     18
     SAPI_ProcessEvent                 0      0     18
       -> osal_msg_receive             0      0     28
       -> zb_StartConfirm              0      0     28
       -> osal_msg_deallocate          0      0     28
       -> osal_msg_receive             0      0     28
       -> SAPI_ProcessZDOMsgs          0      0     28
       -> zb_SendDataConfirm           0      0     28
       -> zb_ReceiveDataIndication     0      0     36
       -> zb_StartConfirm              0      0     28
       -> zb_StartConfirm              0      0     28
       -> zb_AllowBindConfirm          0      0     28
       -> zb_SendDataConfirm           0      0     28
       -> zb_BindConfirm               0      0     28
       -> afSetMatch                   0      0     28
       -> zb_BindConfirm               0      0     28
       -> zb_HandleOsalEvent           0      0     28
       -> HalLedSet                    0      0     28
       -> zb_StartRequest              0      0     28
       -> zb_HandleOsalEvent           0      0     28
     SAPI_ProcessZDOMsgs               0      0     34
       -> ZDO_ParseAddrRsp             0      0     38
       -> zb_FindDeviceConfirm         0      0     38
       -> ZDO_ParseEPListRsp           0      0     38
       -> APSME_BindRequest            0      0     40
       -> osal_stop_timerEx            0      0     38
       -> osal_start_timerEx           0      0     38
       -> ZDP_IEEEAddrReq              0      0     38
       -> zb_BindConfirm               0      0     38
     SAPI_SendCback                    1      0     38
       -> osal_msg_allocate            0      0     24
       -> osal_msg_send                0      0     24
     osalInitTasks                     2      0      0
       -> osal_mem_alloc               4      0      0
       -> osal_memset                  4      0      0
       -> macTaskInit                  4      0      0
       -> nwk_init                     4      0      0
       -> Hal_Init                     4      0      0
       -> APS_Init                     4      0      0
       -> ZDApp_Init                   4      0      0
       -> Sys_Init                     4      0      0
       -> Button_Init                  4      0      0
       -> SAPI_Init                    4      0      0
     zb_AllowBind                      0      0      9
       -> osal_stop_timerEx            0      0     18
       -> afSetMatch                   0      0     18
       -> afSetMatch                   0      0     18
       -> osal_start_timerEx           0      0     18
     zb_BindDevice                     0      0     31
       -> sAddrExtCpy                  0      0     46
       -> APSME_BindRequest            0      0     48
       -> ZDP_NwkAddrReq               0      0     46
       -> osal_start_timerEx           0      0     46
       -> SAPI_SendCback               0      0     46
       -> ZDO_AnyClusterMatches        0      0     50
       -> ZDP_MatchDescReq             0      0     62
       -> ZDO_AnyClusterMatches        0      0     50
       -> ZDP_MatchDescReq             0      0     62
       -> osal_start_timerEx           0      0     46
       -> bindRemoveEntry              0      0     46
       -> bindFind                     0      0     46
       -> osal_start_timerEx           0      0     46
     zb_FindDeviceRequest              0      0      9
       -> ZDP_NwkAddrReq               0      0     18
     zb_GetDeviceInfo                  0      0     14
       -> osal_memcpy                  0      0     28
       -> osal_memcpy                  0      0     28
       -> osal_memcpy                  0      0     28
       -> osal_memcpy                  0      0     28
       -> osal_memcpy                  0      0     28
       -> osal_memcpy                  0      0     28
       -> osal_memcpy                  0      0     28
       -> osal_memcpy                  0      0     28
     zb_PermitJoiningRequest           0      0      0
     zb_ReadConfiguration              0      0     17
       -> osal_nv_item_len             0      0     24
       -> osal_nv_read                 0      0     32
     zb_SendDataRequest                1      0     40
       -> NLME_IsAddressBroadcast      0      0     52
       -> AF_DataRequest               0      0     70
       -> SAPI_SendCback               0      0     52
     zb_StartRequest                   2      0     15
       -> zb_ReadConfiguration         4      0      2
       -> SAPI_SendCback               4      0      2
       -> ZDOInitDevice                4      0      2
     zb_SystemReset                    0      0      0
       -> Onboard_soft_reset           0      0      0
     zb_WriteConfiguration             0      0     14
       -> osal_nv_write                0      0     28


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     tasksArr                          16
     tasksCnt                           1
     tasksEvents                        2
     sapi_epDesc                        6
     sapi_TaskID                        1
     sapi_bindInProgress                2
     zb_SystemReset                     6
     zb_StartRequest                   70
     ?Subroutine0                       7
     zb_BindDevice                    459
     ?Subroutine1                       5
     ?Subroutine11                      5
     ?Subroutine8                      20
     ?Subroutine9                      11
     ??Subroutine15_0                   6
     ?Subroutine13                      4
     ?Subroutine14                     12
     ??Subroutine18_0                   6
     ?Subroutine6                       9
     ?Subroutine12                      6
     zb_PermitJoiningRequest            5
     zb_AllowBind                      70
     ?Subroutine2                       5
     ?Subroutine5                       2
     ??Subroutine16_0                   7
     zb_SendDataRequest               205
     ?Subroutine3                       5
     zb_ReadConfiguration              69
     zb_WriteConfiguration             43
     ?Subroutine4                       8
     zb_GetDeviceInfo                 138
     zb_FindDeviceRequest              24
     SAPI_ProcessEvent                357
     ?Subroutine7                      20
     SAPI_ProcessZDOMsgs              211
     ??Subroutine17_0                   1
     SAPI_Init                        101
     SAPI_SendCback                    57
     osalInitTasks                     71
     ?Subroutine10                      1
     ??zb_SystemReset?relay             6
     ??zb_StartRequest?relay            6
     ??zb_BindDevice?relay              6
     ??zb_PermitJoiningRequest?relay    6
     ??zb_AllowBind?relay               6
     ??zb_SendDataRequest?relay         6
     ??zb_ReadConfiguration?relay       6
     ??zb_WriteConfiguration?relay      6
     ??zb_GetDeviceInfo?relay           6
     ??zb_FindDeviceRequest?relay       6
     ??SAPI_ProcessEvent?relay          6
     ??SAPI_ProcessZDOMsgs?relay        6
     ??SAPI_Init?relay                  6
     ??SAPI_SendCback?relay             6
     ??osalInitTasks?relay              6

 
 2 026 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
    17 bytes in segment XDATA_ROM_C
    11 bytes in segment XDATA_Z
 
 2 116 bytes of CODE  memory
    17 bytes of CONST memory
    11 bytes of XDATA memory

Errors: none
Warnings: 1
