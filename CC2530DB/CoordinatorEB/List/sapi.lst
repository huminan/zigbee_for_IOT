###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         05/Apr/2018  20:32:34 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Components\stack\sa #
#                          pi\sapi.c                                          #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0             #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Components\stack\sapi\sapi.c -D                #
#                          HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR  #
#                          -D NV_INIT -D xNV_RESTORE -D ZTOOL_P1 -D xMT_TASK  #
#                          -D xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                #
#                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigbe #
#                          e\Projects\zstack\Samples\SensorSys\CC2530DB\Coord #
#                          inatorEB\List\ -lA D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\Coordin #
#                          atorEB\List\ --diag_suppress Pe001,Pa010 -o        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\ -e      #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\ -I                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\List\sapi.ls #
#                          t                                                  #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\CoordinatorEB\Obj\sapi.r51 #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Components\stack\sapi\sapi.c
      1          /**************************************************************************************************
      2            Filename:       sapi.c
      3            Revised:        $Date: 2010-05-03 17:46:57 -0700 (Mon, 03 May 2010) $
      4            Revision:       $Revision: 22364 $
      5          
      6            Description:    Z-Stack Simple Application Interface.
      7          
      8          
      9            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /******************************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "hal_drivers.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Tasks.h"
     48          //#include "OSAL_Custom.h"
     49          
     50          #if defined ( MT_TASK )
     51            #include "MT.h"
     52            #include "MT_TASK.h"
     53          #endif
     54          
     55          #include "nwk.h"
     56          #include "APS.h"
     57          #include "ZDApp.h"
     58          
     59          #include "osal_nv.h"
     60          #include "NLMEDE.h"
     61          #include "AF.h"
     62          #include "OnBoard.h"
     63          #include "nwk_util.h"
     64          #include "ZDProfile.h"
     65          #include "ZDObject.h"
     66          #include "hal_led.h"
     67          #include "hal_key.h"
     68          #include "sapi.h"
     69          #include "MT_SAPI.h"
     70          
     71          extern uint8 zgStartDelay;
     72          extern uint8 zgSapiEndpoint;
     73          /*********************************************************************
     74           * CONSTANTS
     75           */
     76          #if !defined SAPI_CB_FUNC
     77          #define SAPI_CB_FUNC  TRUE
     78          #endif
     79          
     80          // Message ID's for application user messages must be in 0xE0-0xEF range
     81          #define ZB_USER_MSG                       0xE0
     82          #define SAPICB_DATA_CNF   0xE0
     83          #define SAPICB_BIND_CNF   0xE1
     84          #define SAPICB_START_CNF  0xE2
     85          
     86          /*********************************************************************
     87           * TYPEDEFS
     88           */
     89          
     90          /*********************************************************************
     91           * GLOBAL VARIABLES
     92           */
     93          
     94          #if OSAL_SAPI
     95          // The order in this table must be identical to the task initialization calls below in osalInitTask.
     96          const pTaskEventHandlerFn tasksArr[] = {
     97            macEventLoop,
     98            nwk_event_loop,
     99            Hal_ProcessEvent,
    100          #if defined( MT_TASK )
    101            MT_ProcessEvent,
    102          #endif
    103            APS_event_loop,
    104            ZDApp_event_loop,
    105          
    106            SAPI_ProcessEvent
    107          };
    108          
    109          const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
    110          uint16 *tasksEvents;
    111          #endif
    112          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          endPointDesc_t sapi_epDesc;
   \                     sapi_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    114          uint8 sapi_TaskID;
   \                     sapi_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    115          static uint16 sapi_bindInProgress;
   \                     sapi_bindInProgress:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    116          
    117          /*********************************************************************
    118           * LOCAL FUNCTIONS
    119           */
    120          
    121          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    122          static void SAPI_SendCback( uint8 event, uint8 status, uint16 data );
    123          
    124          static void SAPI_StartConfirm( uint8 status );
    125          //static void SAPI_SendDataConfirm( uint8 handle, uint8 status );
    126          //static void SAPI_BindConfirm( uint16 commandId, uint8 status );
    127          static void SAPI_FindDeviceConfirm( uint8 searchType,
    128                                                  uint8 *searchKey, uint8 *result );
    129          static void SAPI_ReceiveDataIndication( uint16 source,
    130                                        uint16 command, uint16 len, uint8 *pData  );
    131          static void SAPI_AllowBindConfirm( uint16 source );
    132          
    133          /******************************************************************************
    134           * @fn          zb_SystemReset
    135           *
    136           * @brief       The zb_SystemReset function reboots the ZigBee device.  The
    137           *              zb_SystemReset function can be called after a call to
    138           *              zb_WriteConfiguration to restart Z-Stack with the updated
    139           *              configuration.
    140           *
    141           * @param       none
    142           *
    143           * @return      none
    144           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    145          void zb_SystemReset ( void )
   \                     zb_SystemReset:
    146          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    147            SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
   \   000000                ; Setup parameters for call to function Onboard_soft_reset
   \   000000   12....       LCALL   Onboard_soft_reset & 0xFFFF
    148          }
   \   000003   02....       LJMP    ?BRET
    149          
    150          /******************************************************************************
    151           * @fn          zb_StartRequest
    152           *
    153           * @brief       The zb_StartRequest function starts the ZigBee stack.  When the
    154           *              ZigBee stack starts, the device reads configuration parameters
    155           *              from Nonvolatile memory and the device joins its network.  The
    156           *              ZigBee stack calls the zb_StartConrifm callback function when
    157           *              the startup process completes.
    158           *
    159           * @param       none
    160           *
    161           * @return      none
    162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    163          void zb_StartRequest()
   \                     zb_StartRequest:
    164          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    165            uint8 logicalType;
    166          
    167            zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
   \   000009                ; Setup parameters for call to function zb_ReadConfiguration
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7A01         MOV     R2,#0x1
   \   000015   7987         MOV     R1,#-0x79
   \   000017   12....       LCALL   ??zb_ReadConfiguration?relay
    168          
    169            // Check for bad combinations of compile flag definitions and device type setting.
    170            if ((logicalType > ZG_DEVICETYPE_ENDDEVICE)      ||
    171          #if !ZG_BUILD_ENDDEVICE_TYPE   // Only RTR or Coord possible.
    172                (logicalType == ZG_DEVICETYPE_ENDDEVICE)     ||
    173          #endif
    174          #if !ZG_BUILD_RTR_TYPE         // Only End Device possible.
    175                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    176                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    177          #elif ZG_BUILD_RTRONLY_TYPE    // Only RTR possible.
    178                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    179          #elif !ZG_BUILD_JOINING_TYPE   // Only Coord possible.
    180                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    181          #endif
    182                (0))
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C3           CLR     C
   \   000022   9403         SUBB    A,#0x3
   \   000024   400F         JC      ??zb_StartRequest_0
    183            {
    184              logicalType = ZB_INVALID_PARAMETER;
   \   000026   7402         MOV     A,#0x2
   \   000028   F0           MOVX    @DPTR,A
    185              SAPI_SendCback(SAPICB_START_CNF, logicalType, 0);
   \   000029                ; Setup parameters for call to function SAPI_SendCback
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   FA           MOV     R2,A
   \   00002E   79E2         MOV     R1,#-0x1e
   \   000030   12....       LCALL   ??SAPI_SendCback?relay
   \   000033   800C         SJMP    ??zb_StartRequest_1
    186            }
    187            else
    188            {
    189              logicalType = ZB_SUCCESS;
   \                     ??zb_StartRequest_0:
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
    190              ZDOInitDevice(zgStartDelay);
   \   000037                ; Setup parameters for call to function ZDOInitDevice
   \   000037   90....       MOV     DPTR,#zgStartDelay
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   FA           MOV     R2,A
   \   00003C   7B00         MOV     R3,#0x0
   \   00003E   12....       LCALL   ??ZDOInitDevice?relay
    191            }
    192          
    193            
    194            return;
   \                     ??zb_StartRequest_1:
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046   D083         POP     DPH
   \   000048   D082         POP     DPL
   \   00004A   02....       LJMP    ?BRET
    195          }
    196          
    197          /******************************************************************************
    198           * @fn          zb_BindDevice
    199           *
    200           * @brief       The zb_BindDevice function establishes or removes a ‘binding? *              between two devices.  Once bound, an application can send
    201           *              messages to a device by referencing the commandId for the
    202           *              binding.
    203           *
    204           * @param       create - TRUE to create a binding, FALSE to remove a binding
    205           *              commandId - The identifier of the binding
    206           *              pDestination - The 64-bit IEEE address of the device to bind to
    207           *
    208           * @return      The status of the bind operation is returned in the
    209           *              zb_BindConfirm callback.
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          void zb_BindDevice ( uint8 create, uint16 commandId, uint8 *pDestination )
   \                     zb_BindDevice:
    212          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   FE           MOV     R6,A
   \   000017   ED           MOV     A,R5
   \   000018   FF           MOV     R7,A
    213            zAddrType_t destination;
    214            uint8 ret = ZB_ALREADY_IN_PROGRESS;
   \   000019   75..20       MOV     ?V0 + 1,#0x20
    215          
    216            if ( create )
   \   00001C   E9           MOV     A,R1
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??zb_BindDevice_0 & 0xFFFF
    217            {
    218              if (sapi_bindInProgress == 0xffff)
   \   000022   90....       MOV     DPTR,#sapi_bindInProgress
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F4           CPL     A
   \   000027   7003         JNZ     ??zb_BindDevice_1
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F4           CPL     A
   \                     ??zb_BindDevice_1:
   \   00002C   7058         JNZ     ??CrossCallReturnLabel_6
    219              {
    220                if ( pDestination )
   \   00002E   EE           MOV     A,R6
   \   00002F   4F           ORL     A,R7
   \   000030   6069         JZ      ??zb_BindDevice_2
    221                {
    222                  destination.addrMode = Addr64Bit;
   \   000032   740A         MOV     A,#0xa
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   7403         MOV     A,#0x3
   \   000039   F0           MOVX    @DPTR,A
    223                  osal_cpyExtAddr( destination.addr.extAddr, pDestination );
   \   00003A                ; Setup parameters for call to function sAddrExtCpy
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   AA82         MOV     R2,DPL
   \   000041   AB83         MOV     R3,DPH
   \   000043   12....       LCALL   ??sAddrExtCpy?relay
    224          
    225                  ret = APSME_BindRequest( sapi_epDesc.endPoint, commandId,
    226                                                      &destination, sapi_epDesc.endPoint );
   \   000046                ; Setup parameters for call to function APSME_BindRequest
   \   000046   90....       MOV     DPTR,#sapi_epDesc
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F5..         MOV     ?V0 + 1,A
   \   00004C   78..         MOV     R0,#?V0 + 1
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   7403         MOV     A,#0x3
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   AC82         MOV     R4,DPL
   \   000058   AD83         MOV     R5,DPH
   \   00005A   7401         MOV     A,#0x1
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FB           MOV     R3,A
   \   000064   90....       MOV     DPTR,#sapi_epDesc
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   ??APSME_BindRequest?relay
   \   00006C   7401         MOV     A,#0x1
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   E9           MOV     A,R1
   \   000072   F5..         MOV     ?V0 + 1,A
    227          
    228                  if ( ret == ZSuccess )
   \   000074   7010         JNZ     ??CrossCallReturnLabel_6
    229                  {
    230                    // Find nwk addr
    231                    ZDP_NwkAddrReq(pDestination, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000076                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000076   7D00         MOV     R5,#0x0
   \   000078   7C00         MOV     R4,#0x0
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   ??ZDP_NwkAddrReq?relay
    232                    osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   000083                ; Setup parameters for call to function osal_start_timerEx
   \   000083   12....       LCALL   ?Subroutine6 & 0xFFFF
    233                  }
    234                }
    235                else
    236                {
    237                  ret = ZB_INVALID_PARAMETER;
    238                  destination.addrMode = Addr16Bit;
    239                  destination.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    240                  if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumOutClusters,
    241                                                          sapi_epDesc.simpleDesc->pAppOutClusterList ) )
    242                  {
    243                    // Try to match with a device in the allow bind mode
    244                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    245                        sapi_epDesc.simpleDesc->AppProfId, 1, &commandId, 0, (cId_t *)NULL, 0 );
    246                  }
    247                  else if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumInClusters,
    248                                                          sapi_epDesc.simpleDesc->pAppInClusterList ) )
    249                  {
    250                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    251                        sapi_epDesc.simpleDesc->AppProfId, 0, (cId_t *)NULL, 1, &commandId, 0 );
    252                  }
    253          
    254                  if ( ret == ZB_SUCCESS )
    255                  {
    256                    // Set a timer to make sure bind completes
    257          #if ( ZG_BUILD_RTR_TYPE )
    258                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, AIB_MaxBindingTime);
    259          #else
    260                    // AIB_MaxBindingTime is not defined for an End Device
    261                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, zgApsDefaultMaxBindingTime);
    262          #endif
    263                    sapi_bindInProgress = commandId;
    264                    return; // dont send cback event
    265                  }
    266                }
    267              }
    268          
    269              SAPI_SendCback( SAPICB_BIND_CNF, ret, commandId );
   \                     ??CrossCallReturnLabel_6:
   \   000086                ; Setup parameters for call to function SAPI_SendCback
   \   000086   85..82       MOV     DPL,?XSP + 0
   \   000089   85..83       MOV     DPH,?XSP + 1
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FC           MOV     R4,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FD           MOV     R5,A
   \   000091   AA..         MOV     R2,?V0 + 1
   \   000093   79E1         MOV     R1,#-0x1f
   \   000095   12....       LCALL   ??SAPI_SendCback?relay
   \   000098   02....       LJMP    ??CrossCallReturnLabel_7 & 0xFFFF
   \                     ??zb_BindDevice_2:
   \   00009B   75..02       MOV     ?V0 + 1,#0x2
   \   00009E   740A         MOV     A,#0xa
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   74FF         MOV     A,#-0x1
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   A3           INC     DPTR
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B7   8882         MOV     DPL,R0
   \   0000B9   8983         MOV     DPH,R1
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FC           MOV     R4,A
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   AA82         MOV     R2,DPL
   \   0000CD   AB83         MOV     R3,DPH
   \   0000CF   7901         MOV     R1,#0x1
   \   0000D1   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   E9           MOV     A,R1
   \   0000DA   6031         JZ      ??zb_BindDevice_3
   \   0000DC                ; Setup parameters for call to function ZDP_MatchDescReq
   \   0000DC   75..00       MOV     ?V0 + 1,#0x0
   \   0000DF   78..         MOV     R0,#?V0 + 1
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E4   E4           CLR     A
   \   0000E5   F5..         MOV     ?V0 + 2,A
   \   0000E7   F5..         MOV     ?V0 + 3,A
   \   0000E9   78..         MOV     R0,#?V0 + 2
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EE   78..         MOV     R0,#?V0 + 1
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F3   7404         MOV     A,#0x4
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   8582..       MOV     ?V0 + 2,DPL
   \   0000FB   8583..       MOV     ?V0 + 3,DPH
   \   0000FE   78..         MOV     R0,#?V0 + 2
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000103   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000106   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000109   7901         MOV     R1,#0x1
   \   00010B   805D         SJMP    ??zb_BindDevice_4
   \                     ??zb_BindDevice_3:
   \   00010D   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000110   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000113   8882         MOV     DPL,R0
   \   000115   8983         MOV     DPH,R1
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   FC           MOV     R4,A
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   AA82         MOV     R2,DPL
   \   000126   AB83         MOV     R3,DPH
   \   000128   7901         MOV     R1,#0x1
   \   00012A   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   00012D   7402         MOV     A,#0x2
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000132   E9           MOV     A,R1
   \   000133   7003         JNZ     $+5
   \   000135   02....       LJMP    ??CrossCallReturnLabel_6 & 0xFFFF
   \   000138                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000138   75..00       MOV     ?V0 + 1,#0x0
   \   00013B   78..         MOV     R0,#?V0 + 1
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000140   7401         MOV     A,#0x1
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   8582..       MOV     ?V0 + 2,DPL
   \   000148   8583..       MOV     ?V0 + 3,DPH
   \   00014B   78..         MOV     R0,#?V0 + 2
   \   00014D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000150   75..01       MOV     ?V0 + 1,#0x1
   \   000153   78..         MOV     R0,#?V0 + 1
   \   000155   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000158   E4           CLR     A
   \   000159   F5..         MOV     ?V0 + 2,A
   \   00015B   F5..         MOV     ?V0 + 3,A
   \   00015D   78..         MOV     R0,#?V0 + 2
   \   00015F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000162   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000165   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000168   7900         MOV     R1,#0x0
   \                     ??zb_BindDevice_4:
   \   00016A   7CFF         MOV     R4,#-0x1
   \   00016C   7DFF         MOV     R5,#-0x1
   \   00016E   740A         MOV     A,#0xa
   \   000170   12....       LCALL   ?XSTACK_DISP0_8
   \   000173   AA82         MOV     R2,DPL
   \   000175   AB83         MOV     R3,DPH
   \   000177   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   00017A   7408         MOV     A,#0x8
   \   00017C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017F   E9           MOV     A,R1
   \   000180   F5..         MOV     ?V0 + 1,A
   \   000182   E5..         MOV     A,?V0 + 1
   \   000184   6003         JZ      $+5
   \   000186   02....       LJMP    ??CrossCallReturnLabel_6 & 0xFFFF
   \   000189                ; Setup parameters for call to function osal_start_timerEx
   \   000189   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   FC           MOV     R4,A
   \   00018E   A3           INC     DPTR
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   FD           MOV     R5,A
   \   000191   7A00         MOV     R2,#0x0
   \   000193   7B20         MOV     R3,#0x20
   \   000195   90....       MOV     DPTR,#sapi_TaskID
   \   000198   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00019B   85..82       MOV     DPL,?XSP + 0
   \   00019E   85..83       MOV     DPH,?XSP + 1
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F8           MOV     R0,A
   \   0001A3   A3           INC     DPTR
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   F9           MOV     R1,A
   \   0001A6   90....       MOV     DPTR,#sapi_bindInProgress
   \   0001A9   E8           MOV     A,R0
   \   0001AA   F0           MOVX    @DPTR,A
   \   0001AB   A3           INC     DPTR
   \   0001AC   E9           MOV     A,R1
   \   0001AD   F0           MOVX    @DPTR,A
   \   0001AE   8018         SJMP    ??CrossCallReturnLabel_7
    270            }
    271            else
    272            {
    273              // Remove local bindings for the commandId
    274              BindingEntry_t *pBind;
    275          
    276              // Loop through bindings an remove any that match the cluster
    277              while ( pBind = bindFind( sapi_epDesc.simpleDesc->EndPoint, commandId, 0 ) )
    278              {
    279                bindRemoveEntry(pBind);
   \                     ??zb_BindDevice_5:
   \   0001B0                ; Setup parameters for call to function bindRemoveEntry
   \   0001B0   12....       LCALL   ??bindRemoveEntry?relay
    280              }
   \                     ??zb_BindDevice_0:
   \   0001B3                ; Setup parameters for call to function bindFind
   \   0001B3   7C00         MOV     R4,#0x0
   \   0001B5   85..82       MOV     DPL,?XSP + 0
   \   0001B8   85..83       MOV     DPH,?XSP + 1
   \   0001BB   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0001BE   12....       LCALL   ??bindFind?relay
   \   0001C1   EA           MOV     A,R2
   \   0001C2   4B           ORL     A,R3
   \   0001C3   70EB         JNZ     ??zb_BindDevice_5
    281              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   0001C5                ; Setup parameters for call to function osal_start_timerEx
   \   0001C5   12....       LCALL   ?Subroutine6 & 0xFFFF
    282            }
   \                     ??CrossCallReturnLabel_7:
   \   0001C8   740B         MOV     A,#0xb
   \   0001CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CD                REQUIRE ?Subroutine0
   \   0001CD                ; // Fall through to label ?Subroutine0
    283            return;
    284          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000008                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7CFA         MOV     R4,#-0x6
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B02         MOV     R3,#0x2
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B                REQUIRE ??Subroutine10_0
   \   00000B                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   12....       LCALL   ??osal_start_timerEx?relay
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   22           RET
    285          /******************************************************************************
    286           * @fn          zb_PermitJoiningRequest
    287           *
    288           * @brief       The zb_PermitJoiningRequest function is used to control the
    289           *              joining permissions and thus allow or disallow new devices from
    290           *              joining the network.
    291           *
    292           * @param       destination - The destination parameter indicates the address
    293           *                            of the device for which the joining permissions
    294           *                            should be set. This is usually the local device
    295           *                            address or the special broadcast address that denotes
    296           *                            all routers and coordinator ( 0xFFFC ). This way
    297           *                            the joining permissions of a single device or the
    298           *                            whole network can be controlled.
    299           *              timeout -  Indicates the amount of time in seconds for which
    300           *                         the joining permissions should be turned on.
    301           *                         If timeout is set to 0x00, the device will turn off the
    302           *                         joining permissions indefinitely. If it is set to 0xFF,
    303           *                         the joining permissions will be turned on indefinitely.
    304           *
    305           *
    306           * @return      ZB_SUCCESS or a failure code
    307           *
    308           */
    309          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          uint8 zb_PermitJoiningRequest ( uint16 destination, uint8 timeout )
   \                     zb_PermitJoiningRequest:
    311          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    312          #if defined( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    313            zAddrType_t dstAddr;
    314          
    315            dstAddr.addrMode = Addr16Bit;
    316            dstAddr.addr.shortAddr = destination;
    317          
    318            return( (uint8) ZDP_MgmtPermitJoinReq( &dstAddr, timeout, 0, 0 ) );
    319          #else
    320            (void)destination;
    321            (void)timeout;
    322            return ZUnsupportedMode;
   \   000000   7912         MOV     R1,#0x12
   \   000002   02....       LJMP    ?BRET
    323          #endif
    324          }
    325          /******************************************************************************
    326           * @fn          zb_AllowBind
    327           *
    328           * @brief       The zb_AllowBind function puts the device into the
    329           *              Allow Binding Mode for a given period of time.  A peer device
    330           *              can establish a binding to a device in the Allow Binding Mode
    331           *              by calling zb_BindDevice with a destination address of NULL
    332           *
    333           * @param       timeout - The number of seconds to remain in the allow binding
    334           *                        mode.  Valid values range from 1 through 65.
    335           *                        If 0, the Allow Bind mode will be set false without TO
    336           *                        If greater than 64, the Allow Bind mode will be true
    337           *
    338           * @return      ZB_SUCCESS if the device entered the allow bind mode, else
    339           *              an error code.
    340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    341          void zb_AllowBind ( uint8 timeout )
   \                     zb_AllowBind:
    342          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    343            HalLedSet(HAL_LED_1, HAL_LED_MODE_FLASH);
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A04         MOV     R2,#0x4
   \   000009   7901         MOV     R1,#0x1
   \   00000B   12....       LCALL   ??HalLedSet?relay
    344          
    345            osal_stop_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER);
   \   00000E                ; Setup parameters for call to function osal_stop_timerEx
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B40         MOV     R3,#0x40
   \   000012   90....       MOV     DPTR,#sapi_TaskID
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   ??osal_stop_timerEx?relay
    346          
    347            if ( timeout == 0 )
   \   00001A   EE           MOV     A,R6
   \   00001B   7005         JNZ     ??zb_AllowBind_0
    348            {
    349              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   00001D                ; Setup parameters for call to function afSetMatch
   \   00001D   12....       LCALL   ?Subroutine3 & 0xFFFF
    350            }
   \                     ??CrossCallReturnLabel_11:
   \   000020   802B         SJMP    ??CrossCallReturnLabel_10
    351            else
    352            {
    353              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, TRUE);
   \                     ??zb_AllowBind_0:
   \   000022                ; Setup parameters for call to function afSetMatch
   \   000022   7A01         MOV     R2,#0x1
   \   000024   12....       LCALL   ??Subroutine11_0 & 0xFFFF
    354              if ( timeout != 0xFF )
   \                     ??CrossCallReturnLabel_14:
   \   000027   74FF         MOV     A,#-0x1
   \   000029   6E           XRL     A,R6
   \   00002A   6021         JZ      ??CrossCallReturnLabel_10
    355              {
    356                if ( timeout > 64 )
   \   00002C   EE           MOV     A,R6
   \   00002D   C3           CLR     C
   \   00002E   9441         SUBB    A,#0x41
   \   000030   4002         JC      ??zb_AllowBind_1
    357                {
    358                  timeout = 64;
   \   000032   7E40         MOV     R6,#0x40
    359                }
    360                osal_start_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER, timeout*1000);
   \                     ??zb_AllowBind_1:
   \   000034                ; Setup parameters for call to function osal_start_timerEx
   \   000034   EE           MOV     A,R6
   \   000035   FC           MOV     R4,A
   \   000036   75F0E8       MOV     B,#-0x18
   \   000039   A4           MUL     AB
   \   00003A   CC           XCH     A,R4
   \   00003B   A8F0         MOV     R0,B
   \   00003D   75F003       MOV     B,#0x3
   \   000040   A4           MUL     AB
   \   000041   28           ADD     A,R0
   \   000042   FD           MOV     R5,A
   \   000043   7A00         MOV     R2,#0x0
   \   000045   7B40         MOV     R3,#0x40
   \   000047   90....       MOV     DPTR,#sapi_TaskID
   \   00004A   12....       LCALL   ??Subroutine10_0 & 0xFFFF
    361              }
    362            }
    363            return;
   \                     ??CrossCallReturnLabel_10:
   \   00004D                REQUIRE ?Subroutine1
   \   00004D                ; // Fall through to label ?Subroutine1
    364          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7A00         MOV     R2,#0x0
   \   000002                REQUIRE ??Subroutine11_0
   \   000002                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   12....       LCALL   ??afSetMatch?relay
   \   000006   22           RET
    365          /******************************************************************************
    366           * @fn          zb_SendDataRequest
    367           *
    368           * @brief       The zb_SendDataRequest function initiates transmission of data
    369           *              to a peer device
    370           *
    371           * @param       destination - The destination of the data.  The destination can
    372           *                            be one of the following:
    373           *                            - 16-Bit short address of device [0-0xfffD]
    374           *                            - ZB_BROADCAST_ADDR sends the data to all devices
    375           *                              in the network.
    376           *                            - ZB_BINDING_ADDR sends the data to a previously
    377           *                              bound device.
    378           *
    379           *              commandId - The command ID to send with the message.  If the
    380           *                          ZB_BINDING_ADDR destination is used, this parameter
    381           *                          also indicates the binding to use.
    382           *
    383           *              len - The size of the pData buffer in bytes
    384           *              handle - A handle used to identify the send data request.
    385           *              txOptions - TRUE if requesting acknowledgement from the destination.
    386           *              radius - The max number of hops the packet can travel through
    387           *                       before it is dropped.
    388           *
    389           * @return      none
    390           *//*
    391          void Sys_SendDataRequest ( uint16 destination, endPointDesc_t *epDesc, uint16 commandId, uint8 len,
    392                                    uint8 *pData, uint8 handle, uint8 txOptions, uint8 radius )
    393          {
    394            afStatus_t status;
    395            afAddrType_t dstAddr;
    396          
    397            txOptions |= AF_DISCV_ROUTE;
    398          
    399            // Set the destination address
    400            if (destination == ZB_BINDING_ADDR)
    401            {
    402              // Binding
    403              dstAddr.addrMode = afAddrNotPresent;
    404            } 
    405            else
    406            {
    407              // Use short address
    408              dstAddr.addr.shortAddr = destination;
    409              dstAddr.addrMode = afAddr16Bit;
    410          
    411              if ( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( destination ) )
    412              {
    413                txOptions &= ~AF_ACK_REQUEST;
    414              }
    415            }
    416          
    417            dstAddr.panId = 0;                                    // Not an inter-pan message.
    418            dstAddr.endPoint = epDesc->simpleDesc->EndPoint;  // Set the endpoint.
    419          
    420            
    421            // Send the message
    422            status = AF_DataRequest(&dstAddr, epDesc, commandId, len,
    423                                    pData, &handle, txOptions, radius);
    424          
    425            if (status != afStatus_SUCCESS)
    426            {
    427              SAPI_SendCback( SAPICB_DATA_CNF, status, handle );
    428            }
    429          }
    430          */
    431          /******************************************************************************
    432           * @fn          zb_ReadConfiguration
    433           *
    434           * @brief       The zb_ReadConfiguration function is used to get a
    435           *              Configuration Protperty from Nonvolatile memory.
    436           *
    437           * @param       configId - The identifier for the configuration property
    438           *              len - The size of the pValue buffer in bytes
    439           *              pValue - A buffer to hold the configuration property
    440           *
    441           * @return      none
    442           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    443          uint8 zb_ReadConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_ReadConfiguration:
    444          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    445            uint8 size;
    446          
    447            size = (uint8)osal_nv_item_len( configId );
   \   00000D                ; Setup parameters for call to function osal_nv_item_len
   \   00000D   8F..         MOV     ?V0 + 2,R7
   \   00000F   AA..         MOV     R2,?V0 + 2
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   ??osal_nv_item_len?relay
   \   000016   EA           MOV     A,R2
   \   000017   F9           MOV     R1,A
    448            if ( size > len )
   \   000018   EE           MOV     A,R6
   \   000019   C3           CLR     C
   \   00001A   99           SUBB    A,R1
   \   00001B   5004         JNC     ??zb_ReadConfiguration_0
    449            {
    450              return ZFailure;
   \   00001D   7901         MOV     R1,#0x1
   \   00001F   8021         SJMP    ??zb_ReadConfiguration_1
    451            }
    452            else
    453            {
    454              return( osal_nv_read(configId, 0, size, pValue) );
   \                     ??zb_ReadConfiguration_0:
   \   000021                ; Setup parameters for call to function osal_nv_read
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   89..         MOV     ?V0 + 0,R1
   \   000028   75..00       MOV     ?V0 + 1,#0x0
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7C00         MOV     R4,#0x0
   \   000032   7D00         MOV     R5,#0x0
   \   000034   8F..         MOV     ?V0 + 0,R7
   \   000036   AA..         MOV     R2,?V0 + 0
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   ??osal_nv_read?relay
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
    455            }
   \                     ??zb_ReadConfiguration_1:
   \   000042   02....       LJMP    ?Subroutine0 & 0xFFFF
    456          }
    457          /******************************************************************************
    458           * @fn          zb_WriteConfiguration
    459           *
    460           * @brief       The zb_WriteConfiguration function is used to write a
    461           *              Configuration Property to nonvolatile memory.
    462           *
    463           * @param       configId - The identifier for the configuration property
    464           *              len - The size of the pValue buffer in bytes
    465           *              pValue - A buffer containing the new value of the
    466           *                       configuration property
    467           *
    468           * @return      none
    469           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    470          uint8 zb_WriteConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_WriteConfiguration:
    471          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    472            return( osal_nv_write(configId, 0, len, pValue) );
   \   000009                ; Setup parameters for call to function osal_nv_write
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   8E..         MOV     ?V0 + 0,R6
   \   000014   75..00       MOV     ?V0 + 1,#0x0
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   8F..         MOV     ?V0 + 0,R7
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   12....       LCALL   ??osal_nv_write?relay
   \   000029   7404         MOV     A,#0x4
   \   00002B                REQUIRE ?Subroutine2
   \   00002B                ; // Fall through to label ?Subroutine2
    473          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    474          /******************************************************************************
    475           * @fn          zb_GetDeviceInfo
    476           *
    477           * @brief       The zb_GetDeviceInfo function retrieves a Device Information
    478           *              Property.
    479           *
    480           * @param       param - The identifier for the device information
    481           *              pValue - A buffer to hold the device information
    482           *
    483           * @return      none
    484           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    485          void zb_GetDeviceInfo ( uint8 param, void *pValue )
   \                     zb_GetDeviceInfo:
    486          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    487            switch(param)
   \   000006   6017         JZ      ??zb_GetDeviceInfo_0
   \   000008   14           DEC     A
   \   000009   6026         JZ      ??zb_GetDeviceInfo_1
   \   00000B   14           DEC     A
   \   00000C   602B         JZ      ??zb_GetDeviceInfo_2
   \   00000E   14           DEC     A
   \   00000F   603A         JZ      ??zb_GetDeviceInfo_3
   \   000011   14           DEC     A
   \   000012   603F         JZ      ??zb_GetDeviceInfo_4
   \   000014   14           DEC     A
   \   000015   6044         JZ      ??zb_GetDeviceInfo_5
   \   000017   14           DEC     A
   \   000018   6049         JZ      ??zb_GetDeviceInfo_6
   \   00001A   14           DEC     A
   \   00001B   604E         JZ      ??zb_GetDeviceInfo_7
   \   00001D   8066         SJMP    ??zb_GetDeviceInfo_8
    488            {
    489              case ZB_INFO_DEV_STATE:
    490                osal_memcpy(pValue, &devState, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_0:
   \   00001F                ; Setup parameters for call to function osal_memcpy
   \   00001F   75....       MOV     ?V0 + 0,#devState & 0xff
   \   000022   75....       MOV     ?V0 + 1,#(devState >> 8) & 0xff
   \                     ??zb_GetDeviceInfo_9:
   \   000025   75..00       MOV     ?V0 + 2,#0x0
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002D   7C01         MOV     R4,#0x1
   \   00002F   804A         SJMP    ??zb_GetDeviceInfo_10
    491                break;
    492              case ZB_INFO_IEEE_ADDR:
    493                osal_memcpy(pValue, &aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_1:
   \   000031                ; Setup parameters for call to function osal_memcpy
   \   000031   75....       MOV     ?V0 + 0,#aExtendedAddress & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
   \   000037   8038         SJMP    ??zb_GetDeviceInfo_11
    494                break;
    495              case ZB_INFO_SHORT_ADDR:
    496                osal_memcpy(pValue, &_NIB.nwkDevAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_2:
   \   000039                ; Setup parameters for call to function osal_memcpy
   \   000039   75....       MOV     ?V0 + 0,#(_NIB + 20) & 0xff
   \   00003C   75....       MOV     ?V0 + 1,#((_NIB + 20) >> 8) & 0xff
   \                     ??zb_GetDeviceInfo_12:
   \   00003F   75..00       MOV     ?V0 + 2,#0x0
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000047   7C02         MOV     R4,#0x2
   \   000049   8030         SJMP    ??zb_GetDeviceInfo_10
    497                break;
    498              case ZB_INFO_PARENT_SHORT_ADDR:
    499                osal_memcpy(pValue, &_NIB.nwkCoordAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_3:
   \   00004B                ; Setup parameters for call to function osal_memcpy
   \   00004B   75....       MOV     ?V0 + 0,#(_NIB + 23) & 0xff
   \   00004E   75....       MOV     ?V0 + 1,#((_NIB + 23) >> 8) & 0xff
   \   000051   80EC         SJMP    ??zb_GetDeviceInfo_12
    500                break;
    501              case ZB_INFO_PARENT_IEEE_ADDR:
    502                osal_memcpy(pValue, &_NIB.nwkCoordExtAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_4:
   \   000053                ; Setup parameters for call to function osal_memcpy
   \   000053   75....       MOV     ?V0 + 0,#(_NIB + 25) & 0xff
   \   000056   75....       MOV     ?V0 + 1,#((_NIB + 25) >> 8) & 0xff
   \   000059   8016         SJMP    ??zb_GetDeviceInfo_11
    503                break;
    504              case ZB_INFO_CHANNEL:
    505                osal_memcpy(pValue, &_NIB.nwkLogicalChannel, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_5:
   \   00005B                ; Setup parameters for call to function osal_memcpy
   \   00005B   75....       MOV     ?V0 + 0,#(_NIB + 22) & 0xff
   \   00005E   75....       MOV     ?V0 + 1,#((_NIB + 22) >> 8) & 0xff
   \   000061   80C2         SJMP    ??zb_GetDeviceInfo_9
    506                break;
    507              case ZB_INFO_PAN_ID:
    508                osal_memcpy(pValue, &_NIB.nwkPanId, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_6:
   \   000063                ; Setup parameters for call to function osal_memcpy
   \   000063   75....       MOV     ?V0 + 0,#(_NIB + 33) & 0xff
   \   000066   75....       MOV     ?V0 + 1,#((_NIB + 33) >> 8) & 0xff
   \   000069   80D4         SJMP    ??zb_GetDeviceInfo_12
    509                break;
    510              case ZB_INFO_EXT_PAN_ID:
    511                osal_memcpy(pValue, &_NIB.extendedPANID, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_7:
   \   00006B                ; Setup parameters for call to function osal_memcpy
   \   00006B   75....       MOV     ?V0 + 0,#(_NIB + 53) & 0xff
   \   00006E   75....       MOV     ?V0 + 1,#((_NIB + 53) >> 8) & 0xff
   \                     ??zb_GetDeviceInfo_11:
   \   000071   75..00       MOV     ?V0 + 2,#0x0
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000079   7C08         MOV     R4,#0x8
   \                     ??zb_GetDeviceInfo_10:
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   12....       LCALL   ??osal_memcpy?relay
   \   000080   7403         MOV     A,#0x3
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    512                break;
    513            }
    514          }
   \                     ??zb_GetDeviceInfo_8:
   \   000085   7F03         MOV     R7,#0x3
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    515          
    516          /******************************************************************************
    517           * @fn          zb_FindDeviceRequest
    518           *
    519           * @brief       The zb_FindDeviceRequest function is used to determine the
    520           *              short address for a device in the network.  The device initiating
    521           *              a call to zb_FindDeviceRequest and the device being discovered
    522           *              must both be a member of the same network.  When the search is
    523           *              complete, the zv_FindDeviceConfirm callback function is called.
    524           *
    525           * @param       searchType - The type of search to perform. Can be one of following:
    526           *                           ZB_IEEE_SEARCH - Search for 16-bit addr given IEEE addr.
    527           *              searchKey - Value to search on.
    528           *
    529           * @return      none
    530           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    531          void zb_FindDeviceRequest( uint8 searchType, void *searchKey )
   \                     zb_FindDeviceRequest:
    532          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    533            if (searchType == ZB_IEEE_SEARCH)
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   7009         JNZ     ??zb_FindDeviceRequest_0
    534            {
    535              ZDP_NwkAddrReq((uint8*) searchKey, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00000C                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   ??ZDP_NwkAddrReq?relay
    536            }
    537          }
   \                     ??zb_FindDeviceRequest_0:
   \   000015   02....       LJMP    ?Subroutine1 & 0xFFFF
    538          /******************************************************************************
    539           * @fn          SAPI_StartConfirm
    540           *
    541           * @brief       The SAPI_StartConfirm callback is called by the ZigBee stack
    542           *              after a start request operation completes
    543           *
    544           * @param       status - The status of the start operation.  Status of
    545           *                       ZB_SUCCESS indicates the start operation completed
    546           *                       successfully.  Else the status is an error code.
    547           *
    548           * @return      none
    549           */
    550          void SAPI_StartConfirm( uint8 status )
    551          {
    552          #if defined ( MT_SAPI_CB_FUNC )
    553            /* First check if MT has subscribed for this callback. If so , pass it as
    554            a event to MonitorTest and return control to calling function after that */
    555            if ( SAPICB_CHECK( SPI_CB_SAPI_START_CNF ) )
    556            {
    557              zb_MTCallbackStartConfirm( status );
    558            }
    559            else
    560          #endif  //MT_SAPI_CB_FUNC
    561            {
    562          #if ( SAPI_CB_FUNC )
    563              zb_StartConfirm( status );
    564          #endif
    565            }
    566          }
    567          
    568          /******************************************************************************
    569           * @fn          SAPI_SendDataConfirm
    570           *
    571           * @brief       The SAPI_SendDataConfirm callback function is called by the
    572           *              ZigBee after a send data operation completes
    573           *
    574           * @param       handle - The handle identifying the data transmission.
    575           *              status - The status of the operation.
    576           *
    577           * @return      none
    578           *//*
    579          void SAPI_SendDataConfirm( uint8 handle, uint8 status )
    580          {
    581          #if defined ( MT_SAPI_CB_FUNC )*/
    582            /* First check if MT has subscribed for this callback. If so , pass it as
    583            a event to MonitorTest and return control to calling function after that *//*
    584            if ( SAPICB_CHECK( SPI_CB_SAPI_SEND_DATA_CNF ) )
    585            {
    586              zb_MTCallbackSendDataConfirm( handle, status );
    587            }
    588            else
    589          #endif  //MT_SAPI_CB_FUNC
    590            {
    591          #if ( SAPI_CB_FUNC )
    592              zb_SendDataConfirm( handle, status );
    593          #endif
    594            }
    595          }
    596          */
    597          /******************************************************************************
    598           * @fn          SAPI_BindConfirm
    599           *
    600           * @brief       The SAPI_BindConfirm callback is called by the ZigBee stack
    601           *              after a bind operation completes.
    602           *
    603           * @param       commandId - The command ID of the binding being confirmed.
    604           *              status - The status of the bind operation.
    605           *              allowBind - TRUE if the bind operation was initiated by a call
    606           *                          to zb_AllowBindRespones.  FALSE if the operation
    607           *                          was initiated by a call to ZB_BindDevice
    608           *
    609           * @return      none
    610           
    611          void SAPI_BindConfirm( uint16 commandId, uint8 status )
    612          {
    613          #if defined ( MT_SAPI_CB_FUNC )
    614             First check if MT has subscribed for this callback. If so , pass it as
    615            a event to MonitorTest and return control to calling function after that 
    616            if ( SAPICB_CHECK( SPI_CB_SAPI_BIND_CNF ) )
    617            {
    618              zb_MTCallbackBindConfirm( commandId, status );
    619            }
    620            else
    621          #endif  //MT_SAPI_CB_FUNC
    622            {
    623          #if ( SAPI_CB_FUNC )
    624              zb_BindConfirm( commandId, status );
    625          #endif
    626            }
    627          }*/
    628          /******************************************************************************
    629           * @fn          SAPI_AllowBindConfirm
    630           *
    631           * @brief       Indicates when another device attempted to bind to this device
    632           *
    633           * @param
    634           *
    635           * @return      none
    636           */
    637          void SAPI_AllowBindConfirm( uint16 source )
    638          {
    639            #if defined ( MT_SAPI_CB_FUNC )
    640            /* First check if MT has subscribed for this callback. If so , pass it as
    641            a event to MonitorTest and return control to calling function after that */
    642            if ( SAPICB_CHECK( SPI_CB_SAPI_ALLOW_BIND_CNF ) )
    643            {
    644              zb_MTCallbackAllowBindConfirm( source );
    645            }
    646            else
    647          #endif  //MT_SAPI_CB_FUNC
    648            {
    649          #if ( SAPI_CB_FUNC )
    650          //    zb_AllowBindConfirm( source );
    651          #endif
    652            }
    653          }
    654          /******************************************************************************
    655           * @fn          SAPI_FindDeviceConfirm
    656           *
    657           * @brief       The SAPI_FindDeviceConfirm callback function is called by the
    658           *              ZigBee stack when a find device operation completes.
    659           *
    660           * @param       searchType - The type of search that was performed.
    661           *              searchKey - Value that the search was executed on.
    662           *              result - The result of the search.
    663           *
    664           * @return      none
    665           */
    666          void SAPI_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
    667          {
    668          #if defined ( MT_SAPI_CB_FUNC )
    669            /* First check if MT has subscribed for this callback. If so , pass it as
    670            a event to MonitorTest and return control to calling function after that */
    671            if ( SAPICB_CHECK( SPI_CB_SAPI_FIND_DEV_CNF ) )
    672            {
    673              zb_MTCallbackFindDeviceConfirm( searchType, searchKey, result );
    674            }
    675            else
    676          #endif  //MT_SAPI_CB_FUNC
    677            {
    678          #if ( SAPI_CB_FUNC )
    679              zb_FindDeviceConfirm( searchType, searchKey, result );
    680          #endif
    681            }
    682          }
    683          /******************************************************************************
    684           * @fn          SAPI_ReceiveDataIndication
    685           *
    686           * @brief       The SAPI_ReceiveDataIndication callback function is called
    687           *              asynchronously by the ZigBee stack to notify the application
    688           *              when data is received from a peer device.
    689           *
    690           * @param       source - The short address of the peer device that sent the data
    691           *              command - The commandId associated with the data
    692           *              len - The number of bytes in the pData parameter
    693           *              pData - The data sent by the peer device
    694           *
    695           * @return      none
    696           */
    697          void SAPI_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
    698          {
    699          #if defined ( MT_SAPI_CB_FUNC )
    700            /* First check if MT has subscribed for this callback. If so , pass it as
    701            a event to MonitorTest and return control to calling function after that */
    702            if ( SAPICB_CHECK( SPI_CB_SAPI_RCV_DATA_IND ) )
    703            {
    704              zb_MTCallbackReceiveDataIndication( source, command, len, pData  );
    705            }
    706            else
    707          #endif  //MT_SAPI_CB_FUNC
    708            {
    709          #if ( SAPI_CB_FUNC )
    710          //    zb_ReceiveDataIndication( source, command, len, pData  );
    711          #endif
    712            }
    713          }
    714          /*********************************************************************
    715           * @fn      SAPI_ProcessEvent
    716           *
    717           * @brief   Simple API Task event processor.  This function
    718           *          is called to process all events for the task.  Events
    719           *          include timers, messages and any other user defined events.
    720           *
    721           * @param   task_id  - The OSAL assigned task ID.
    722           * @param   events - events to process.  This is a bit map and can
    723           *                   contain more than one event.
    724           *
    725           * @return  none
    726           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    727          UINT16 SAPI_ProcessEvent( byte task_id, UINT16 events )
   \                     SAPI_ProcessEvent:
    728          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    729            osal_event_hdr_t *pMsg;
    730            afIncomingMSGPacket_t *pMSGpkt;
    731          //  afDataConfirm_t *pDataConfirm;
    732          
    733            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL     A,#0x80
   \   00000D   6078         JZ      ??SAPI_ProcessEvent_0
    734            {
    735              pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   00000F                ; Setup parameters for call to function osal_msg_receive
   \   00000F   800F         SJMP    ??SAPI_ProcessEvent_1
    736              while ( pMsg )
    737              {
    738                switch ( pMsg->event )
    739                {
    740                  case ZDO_CB_MSG:
    741                    SAPI_ProcessZDOMsgs( (zdoIncomingMsg_t *)pMsg );
    742                    break;
    743          /*
    744                  case AF_DATA_CONFIRM_CMD:
    745                    // This message is received as a confirmation of a data packet sent.
    746                    // The status is of ZStatus_t type [defined in ZComDef.h]
    747                    // The message fields are defined in AF.h
    748                    pDataConfirm = (afDataConfirm_t *) pMsg;
    749                    SAPI_SendDataConfirm( pDataConfirm->transID, pDataConfirm->hdr.status );
    750                    break;
    751          */
    752                  case AF_INCOMING_MSG_CMD:
    753                    pMSGpkt = (afIncomingMSGPacket_t *) pMsg;
    754                    SAPI_ReceiveDataIndication( pMSGpkt->srcAddr.addr.shortAddr, pMSGpkt->clusterId,
    755                                              pMSGpkt->cmd.DataLength, pMSGpkt->cmd.Data);
    756                    break;
    757          
    758                  case ZDO_STATE_CHANGE:
    759                    // If the device has started up, notify the application
    760                    if (pMsg->status == DEV_END_DEVICE ||
    761                        pMsg->status == DEV_ROUTER ||
    762                        pMsg->status == DEV_ZB_COORD )
    763                    {
    764                      SAPI_StartConfirm( ZB_SUCCESS );
    765                    }
    766                    else  if (pMsg->status == DEV_HOLD ||
    767                            pMsg->status == DEV_INIT)
    768                    {
    769                      SAPI_StartConfirm( ZB_INIT );
    770                    }
    771                    break;
    772          
    773                  case ZDO_MATCH_DESC_RSP_SENT:
    774                    SAPI_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)pMsg)->nwkAddr );
    775                    break;
    776          /*
    777                  case SAPICB_DATA_CNF:
    778                    SAPI_SendDataConfirm( (uint8)((sapi_CbackEvent_t *)pMsg)->data,
    779                                              ((sapi_CbackEvent_t *)pMsg)->hdr.status );
    780                    break;
    781          */
    782          /*        case SAPICB_BIND_CNF:
    783                    SAPI_BindConfirm( ((sapi_CbackEvent_t *)pMsg)->data,
    784                                        ((sapi_CbackEvent_t *)pMsg)->hdr.status );
    785                    break;
    786          */
    787                  case SAPICB_START_CNF:
    788                    SAPI_StartConfirm( ((sapi_CbackEvent_t *)pMsg)->hdr.status );
   \                     ??SAPI_ProcessEvent_2:
   \   000011                ; Setup parameters for call to function zb_StartConfirm
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
   \                     ??SAPI_ProcessEvent_3:
   \   000014   12....       LCALL   ??zb_StartConfirm?relay
    789                    break;
    790          
    791                  default:
    792                    // User messages should be handled by user or passed to the application
    793                    if ( pMsg->event >= ZB_USER_MSG )
    794                    {
    795          
    796                    }
    797                    break;
    798                }
    799          
    800                // Release the memory
    801                osal_msg_deallocate( (uint8 *) pMsg );
   \                     ??SAPI_ProcessEvent_4:
   \   000017                ; Setup parameters for call to function osal_msg_deallocate
   \   000017   AA..         MOV     R2,?V0 + 0
   \   000019   AB..         MOV     R3,?V0 + 1
   \   00001B   12....       LCALL   ??osal_msg_deallocate?relay
    802          
    803                // Next
    804                pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   00001E                ; Setup parameters for call to function osal_msg_receive
   \   00001E   A9..         MOV     R1,?V0 + 2
   \                     ??SAPI_ProcessEvent_1:
   \   000020   12....       LCALL   ??osal_msg_receive?relay
   \   000023   8A..         MOV     ?V0 + 0,R2
   \   000025   8B..         MOV     ?V0 + 1,R3
   \   000027   E5..         MOV     A,?V0 + 0
   \   000029   45..         ORL     A,?V0 + 1
   \   00002B   6052         JZ      ??SAPI_ProcessEvent_5
   \   00002D   85..82       MOV     DPL,?V0 + 0
   \   000030   85..83       MOV     DPH,?V0 + 1
   \   000033   E0           MOVX    A,@DPTR
   \   000034   242F         ADD     A,#0x2f
   \   000036   6013         JZ      ??SAPI_ProcessEvent_6
   \   000038   24FE         ADD     A,#-0x2
   \   00003A   6006         JZ      ??SAPI_ProcessEvent_7
   \   00003C   24F1         ADD     A,#-0xf
   \   00003E   60D1         JZ      ??SAPI_ProcessEvent_2
   \   000040   80D5         SJMP    ??SAPI_ProcessEvent_4
   \                     ??SAPI_ProcessEvent_7:
   \   000042                ; Setup parameters for call to function SAPI_ProcessZDOMsgs
   \   000042   AA..         MOV     R2,?V0 + 0
   \   000044   AB..         MOV     R3,?V0 + 1
   \   000046   12....       LCALL   ??SAPI_ProcessZDOMsgs?relay
   \   000049   80CC         SJMP    ??SAPI_ProcessEvent_4
   \                     ??SAPI_ProcessEvent_6:
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6406         XRL     A,#0x6
   \   00004F   6018         JZ      ??SAPI_ProcessEvent_8
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   85..83       MOV     DPH,?V0 + 1
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   6407         XRL     A,#0x7
   \   00005B   600C         JZ      ??SAPI_ProcessEvent_8
   \   00005D   85..82       MOV     DPL,?V0 + 0
   \   000060   85..83       MOV     DPH,?V0 + 1
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   6409         XRL     A,#0x9
   \   000067   7004         JNZ     ??SAPI_ProcessEvent_9
   \                     ??SAPI_ProcessEvent_8:
   \   000069                ; Setup parameters for call to function zb_StartConfirm
   \   000069   7900         MOV     R1,#0x0
   \   00006B   80A7         SJMP    ??SAPI_ProcessEvent_3
   \                     ??SAPI_ProcessEvent_9:
   \   00006D   85..82       MOV     DPL,?V0 + 0
   \   000070   85..83       MOV     DPH,?V0 + 1
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   6004         JZ      ??SAPI_ProcessEvent_10
   \   000077   6401         XRL     A,#0x1
   \   000079   709C         JNZ     ??SAPI_ProcessEvent_4
   \                     ??SAPI_ProcessEvent_10:
   \   00007B                ; Setup parameters for call to function zb_StartConfirm
   \   00007B   7922         MOV     R1,#0x22
   \   00007D   8095         SJMP    ??SAPI_ProcessEvent_3
    805              }
    806          
    807              // Return unprocessed events
    808              return (events ^ SYS_EVENT_MSG);
   \                     ??SAPI_ProcessEvent_5:
   \   00007F   EE           MOV     A,R6
   \   000080   FA           MOV     R2,A
   \   000081   EF           MOV     A,R7
   \   000082   6480         XRL     A,#0x80
   \                     ??SAPI_ProcessEvent_11:
   \   000084   FB           MOV     R3,A
   \   000085   8048         SJMP    ??SAPI_ProcessEvent_12
    809            }
    810          
    811            if ( events & ZB_ALLOW_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_0:
   \   000087   EF           MOV     A,R7
   \   000088   5440         ANL     A,#0x40
   \   00008A   600A         JZ      ??SAPI_ProcessEvent_13
    812            {
    813              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   00008C                ; Setup parameters for call to function afSetMatch
   \   00008C   12....       LCALL   ?Subroutine3 & 0xFFFF
    814              return (events ^ ZB_ALLOW_BIND_TIMER);
   \                     ??CrossCallReturnLabel_12:
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   6440         XRL     A,#0x40
   \   000094   80EE         SJMP    ??SAPI_ProcessEvent_11
    815            }
    816          
    817            if ( events & ZB_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_13:
   \   000096   EF           MOV     A,R7
   \   000097   5420         ANL     A,#0x20
   \   000099   600D         JZ      ??SAPI_ProcessEvent_14
    818            {
    819              // Send bind confirm callback to application
    820          //    SAPI_BindConfirm( sapi_bindInProgress, ZB_TIMEOUT );
    821              sapi_bindInProgress = 0xffff;
   \   00009B   90....       MOV     DPTR,#sapi_bindInProgress
   \   00009E   74FF         MOV     A,#-0x1
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   F0           MOVX    @DPTR,A
    822          
    823              return (events ^ ZB_BIND_TIMER);
   \   0000A3   EF           MOV     A,R7
   \   0000A4   6420         XRL     A,#0x20
   \   0000A6   80DC         SJMP    ??SAPI_ProcessEvent_11
    824            }
    825          
    826            if ( events & ZB_ENTRY_EVENT )
   \                     ??SAPI_ProcessEvent_14:
   \   0000A8   EF           MOV     A,R7
   \   0000A9   5410         ANL     A,#0x10
   \   0000AB   6018         JZ      ??SAPI_ProcessEvent_15
    827            {
    828          //    uint8 startOptions;
    829          
    830              // Give indication to application of device startup
    831          #if ( SAPI_CB_FUNC )
    832              zb_HandleOsalEvent( ZB_ENTRY_EVENT );
   \   0000AD                ; Setup parameters for call to function zb_HandleOsalEvent
   \   0000AD   7A00         MOV     R2,#0x0
   \   0000AF   7B10         MOV     R3,#0x10
   \   0000B1   12....       LCALL   ??zb_HandleOsalEvent?relay
    833          #endif
    834          
    835              // LED off cancels HOLD_AUTO_START blink set in the stack
    836              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   0000B4                ; Setup parameters for call to function HalLedSet
   \   0000B4   7A00         MOV     R2,#0x0
   \   0000B6   7908         MOV     R1,#0x8
   \   0000B8   12....       LCALL   ??HalLedSet?relay
    837          
    838          //    zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
    839          //    if ( startOptions & ZCD_STARTOPT_AUTO_START )
    840          //    {
    841                zb_StartRequest();
   \   0000BB                ; Setup parameters for call to function zb_StartRequest
   \   0000BB   12....       LCALL   ??zb_StartRequest?relay
    842          //    }
    843          //    else
    844          //    {
    845                // blink leds and wait for external input to config and restart
    846          //      HalLedBlink(HAL_LED_2, 0, 50, 500);
    847          //    }
    848          
    849              return (events ^ ZB_ENTRY_EVENT );
   \   0000BE   EE           MOV     A,R6
   \   0000BF   FA           MOV     R2,A
   \   0000C0   EF           MOV     A,R7
   \   0000C1   6410         XRL     A,#0x10
   \   0000C3   80BF         SJMP    ??SAPI_ProcessEvent_11
    850            }
    851          
    852            // This must be the last event to be processed
    853            if ( events & ( ZB_USER_EVENTS ) )
   \                     ??SAPI_ProcessEvent_15:
   \   0000C5   EE           MOV     A,R6
   \   0000C6   6003         JZ      ??SAPI_ProcessEvent_16
    854            {
    855              // User events are passed to the application
    856          #if ( SAPI_CB_FUNC )
    857              zb_HandleOsalEvent( events );
   \   0000C8                ; Setup parameters for call to function zb_HandleOsalEvent
   \   0000C8   12....       LCALL   ??zb_HandleOsalEvent?relay
    858          #endif
    859          
    860              // Do not return here, return 0 later
    861            }
    862          
    863            // Discard unknown events
    864            return 0;
   \                     ??SAPI_ProcessEvent_16:
   \   0000CB   7A00         MOV     R2,#0x0
   \   0000CD   7B00         MOV     R3,#0x0
   \                     ??SAPI_ProcessEvent_12:
   \   0000CF   7F06         MOV     R7,#0x6
   \   0000D1   02....       LJMP    ?BANKED_LEAVE_XDATA
    865          }
    866          
    867          /*********************************************************************
    868           * @fn      SAPI_ProcessZDOMsgs()
    869           *
    870           * @brief   Process response messages
    871           *
    872           * @param   none
    873           *
    874           * @return  none
    875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    876          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     SAPI_ProcessZDOMsgs:
    877          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    878            switch ( inMsg->clusterID )
   \   00000A   EA           MOV     A,R2
   \   00000B   240C         ADD     A,#0xc
   \   00000D   F582         MOV     DPL,A
   \   00000F   EB           MOV     A,R3
   \   000010   3400         ADDC    A,#0x0
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 1,A
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for SAPI_ProcessZDOMsgs>_0`:
   \   000020   0000         DW        0
   \   000022   0200         DW        2
   \   000024   0080         DW        32768
   \   000026   ....         DW        ??SAPI_ProcessZDOMsgs_0
   \   000028   0680         DW        32774
   \   00002A   ....         DW        ??SAPI_ProcessZDOMsgs_1
   \   00002C   ....         DW        ??SAPI_ProcessZDOMsgs_2
    879            {
    880              case NWK_addr_rsp:
    881                {
    882                  // Send find device callback to application
    883                  ZDO_NwkIEEEAddrResp_t *pNwkAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_0:
   \   00002E                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002E   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   000031   8A82         MOV     DPL,R2
   \   000033   8B83         MOV     DPH,R3
    884                  SAPI_FindDeviceConfirm( ZB_IEEE_SEARCH, (uint8*)&pNwkAddrRsp->nwkAddr, pNwkAddrRsp->extAddr );
   \   000035                ; Setup parameters for call to function zb_FindDeviceConfirm
   \   000035   E582         MOV     A,DPL
   \   000037   2403         ADD     A,#0x3
   \   000039   FC           MOV     R4,A
   \   00003A   E583         MOV     A,DPH
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   FD           MOV     R5,A
   \   00003F   A3           INC     DPTR
   \   000040   AA82         MOV     R2,DPL
   \   000042   AB83         MOV     R3,DPH
   \   000044   7901         MOV     R1,#0x1
   \   000046   12....       LCALL   ??zb_FindDeviceConfirm?relay
    885                }
    886                break;
   \   000049   02....       LJMP    ??SAPI_ProcessZDOMsgs_2 & 0xFFFF
    887          
    888              case Match_Desc_rsp:
    889                {
    890                  zAddrType_t dstAddr;
    891                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_1:
   \   00004C                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00004C   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00004F   8A..         MOV     ?V0 + 0,R2
   \   000051   8B..         MOV     ?V0 + 1,R3
   \   000053   AE..         MOV     R6,?V0 + 0
   \   000055   AF..         MOV     R7,?V0 + 1
    892          
    893                  if ( sapi_bindInProgress != 0xffff )
   \   000057   90....       MOV     DPTR,#sapi_bindInProgress
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F4           CPL     A
   \   00005C   7003         JNZ     ??SAPI_ProcessZDOMsgs_3
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F4           CPL     A
   \                     ??SAPI_ProcessZDOMsgs_3:
   \   000061   6071         JZ      ??SAPI_ProcessZDOMsgs_2
    894                  {
    895                    // Create a binding table entry
    896                    dstAddr.addrMode = Addr16Bit;
   \   000063   7408         MOV     A,#0x8
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   7402         MOV     A,#0x2
   \   00006A   F0           MOVX    @DPTR,A
    897                    dstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   85..82       MOV     DPL,?XSP + 0
   \   000078   85..83       MOV     DPH,?XSP + 1
   \   00007B   E8           MOV     A,R0
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   A3           INC     DPTR
   \   00007E   E9           MOV     A,R1
   \   00007F   F0           MOVX    @DPTR,A
    898          
    899                    if ( APSME_BindRequest( sapi_epDesc.simpleDesc->EndPoint,
    900                               sapi_bindInProgress, &dstAddr, pRsp->epList[0] ) == ZSuccess )
   \   000080                ; Setup parameters for call to function APSME_BindRequest
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F5..         MOV     ?V0 + 0,A
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   7401         MOV     A,#0x1
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   AC82         MOV     R4,DPL
   \   000097   AD83         MOV     R5,DPH
   \   000099   90....       MOV     DPTR,#sapi_bindInProgress
   \   00009C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00009F   12....       LCALL   ??APSME_BindRequest?relay
   \   0000A2   7401         MOV     A,#0x1
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   E9           MOV     A,R1
   \   0000A8   702A         JNZ     ??SAPI_ProcessZDOMsgs_2
    901                    {
    902                      osal_stop_timerEx(sapi_TaskID,  ZB_BIND_TIMER);
   \   0000AA                ; Setup parameters for call to function osal_stop_timerEx
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   7B20         MOV     R3,#0x20
   \   0000AE   90....       MOV     DPTR,#sapi_TaskID
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   12....       LCALL   ??osal_stop_timerEx?relay
    903                      osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   0000B6                ; Setup parameters for call to function osal_start_timerEx
   \   0000B6   12....       LCALL   ?Subroutine6 & 0xFFFF
    904          
    905                      // Find IEEE addr
    906                      ZDP_IEEEAddrReq( pRsp->nwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \                     ??CrossCallReturnLabel_8:
   \   0000B9                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000B9   7D00         MOV     R5,#0x0
   \   0000BB   7C00         MOV     R4,#0x0
   \   0000BD   7900         MOV     R1,#0x0
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FA           MOV     R2,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   FB           MOV     R3,A
   \   0000C9   12....       LCALL   ??ZDP_IEEEAddrReq?relay
    907          #if defined ( MT_SAPI_CB_FUNC )
    908                      zb_MTCallbackBindConfirm( sapi_bindInProgress, ZB_SUCCESS );
    909          #endif              
    910                      // Send bind confirm callback to application
    911          #if ( SAPI_CB_FUNC )
    912          //            zb_BindConfirm( sapi_bindInProgress, ZB_SUCCESS );
    913          #endif
    914                      sapi_bindInProgress = 0xffff;
   \   0000CC   90....       MOV     DPTR,#sapi_bindInProgress
   \   0000CF   74FF         MOV     A,#-0x1
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   F0           MOVX    @DPTR,A
    915                    }
    916                  }
    917                }
    918                break;
    919            }
    920          }
   \                     ??SAPI_ProcessZDOMsgs_2:
   \   0000D4   7409         MOV     A,#0x9
   \   0000D6   02....       LJMP    ?Subroutine2 & 0xFFFF
    921          
    922          /*********************************************************************
    923           * @fn      SAPI_Init
    924           *
    925           * @brief   Initialization function for the Simple API Task.
    926           *          This is called during initialization and should contain
    927           *          any application specific initialization (ie. hardware
    928           *          initialization/setup, table initialization, power up
    929           *          notification ... ).
    930           *
    931           * @param   task_id - the ID assigned by OSAL.  This ID should be
    932           *                    used to send messages and set timers.
    933           *
    934           * @return  none
    935           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    936          void SAPI_Init( byte task_id )
   \                     SAPI_Init:
    937          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    938            sapi_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#sapi_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    939            sapi_bindInProgress = 0xffff;
   \   00000B   90....       MOV     DPTR,#sapi_bindInProgress
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   F0           MOVX    @DPTR,A
    940          
    941            sapi_epDesc.task_id = &sapi_TaskID;
   \   000013   90....       MOV     DPTR,#sapi_epDesc + 1
   \   000016   74..         MOV     A,#sapi_TaskID & 0xff
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   74..         MOV     A,#(sapi_TaskID >> 8) & 0xff
   \   00001C   F0           MOVX    @DPTR,A
    942            sapi_epDesc.endPoint = 0;
   \   00001D   90....       MOV     DPTR,#sapi_epDesc
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
    943            
    944          #if ( SAPI_CB_FUNC )
    945            sapi_epDesc.endPoint = zb_SimpleDesc.EndPoint;
   \   000022   90....       MOV     DPTR,#zb_SimpleDesc
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#sapi_epDesc
   \   000029   F0           MOVX    @DPTR,A
    946            sapi_epDesc.task_id = &sapi_TaskID;
    947            sapi_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&zb_SimpleDesc;
   \   00002A   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00002D   74..         MOV     A,#zb_SimpleDesc & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(zb_SimpleDesc >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
    948            sapi_epDesc.latencyReq = noLatencyReqs;
   \   000034   A3           INC     DPTR
   \   000035   E4           CLR     A
   \   000036   F0           MOVX    @DPTR,A
    949          
    950            // Register the endpoint/interface description with the AF
    951            afRegister( &sapi_epDesc );
   \   000037                ; Setup parameters for call to function afRegister
   \   000037   7A..         MOV     R2,#sapi_epDesc & 0xff
   \   000039   7B..         MOV     R3,#(sapi_epDesc >> 8) & 0xff
   \   00003B   12....       LCALL   ??afRegister?relay
    952          #endif
    953          
    954            // Turn off match descriptor response by default
    955            afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   00003E                ; Setup parameters for call to function afSetMatch
   \   00003E   12....       LCALL   ?Subroutine3 & 0xFFFF
    956          
    957            // Register callback evetns from the ZDApp
    958            ZDO_RegisterForZDOMsg( sapi_TaskID, NWK_addr_rsp );
   \                     ??CrossCallReturnLabel_13:
   \   000041                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000041   7A00         MOV     R2,#0x0
   \   000043   7B80         MOV     R3,#-0x80
   \   000045   90....       MOV     DPTR,#sapi_TaskID
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    959            ZDO_RegisterForZDOMsg( sapi_TaskID, Match_Desc_rsp );
   \   00004D                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00004D   7A06         MOV     R2,#0x6
   \   00004F   7B80         MOV     R3,#-0x80
   \   000051   90....       MOV     DPTR,#sapi_TaskID
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F9           MOV     R1,A
   \   000056   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    960            // Set an event to start the application
    961            osal_set_event(task_id, ZB_ENTRY_EVENT);
   \   000059                ; Setup parameters for call to function osal_set_event
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   7B10         MOV     R3,#0x10
   \   00005D   EE           MOV     A,R6
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   ??osal_set_event?relay
    962          }
   \   000062   02....       LJMP    ?Subroutine1 & 0xFFFF
    963          /*********************************************************************
    964           * @fn      SAPI_SendCback
    965           *
    966           * @brief   Sends a message to the sapi task ( itself ) so that a
    967           *           callback can be generated later.
    968           *
    969           * @return  none
    970           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    971          void SAPI_SendCback( uint8 event, uint8 status, uint16 data )
   \                     SAPI_SendCback:
    972          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   8A..         MOV     ?V0 + 1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    973            sapi_CbackEvent_t *pMsg;
    974          
    975            pMsg = (sapi_CbackEvent_t *)osal_msg_allocate( sizeof(sapi_CbackEvent_t) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A04         MOV     R2,#0x4
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_msg_allocate?relay
    976            if( pMsg )
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   601E         JZ      ??SAPI_SendCback_0
    977            {
    978              pMsg->hdr.event = event;
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   E5..         MOV     A,?V0 + 0
   \   00001E   F0           MOVX    @DPTR,A
    979              pMsg->hdr.status = status;
   \   00001F   A3           INC     DPTR
   \   000020   E5..         MOV     A,?V0 + 1
   \   000022   F0           MOVX    @DPTR,A
    980              pMsg->data = data;
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   EE           MOV     A,R6
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   EF           MOV     A,R7
   \   00002D   F0           MOVX    @DPTR,A
    981          
    982              osal_msg_send( sapi_TaskID, (uint8 *)pMsg );
   \   00002E                ; Setup parameters for call to function osal_msg_send
   \   00002E   90....       MOV     DPTR,#sapi_TaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_msg_send?relay
    983            }
    984          
    985          }
   \                     ??SAPI_SendCback_0:
   \   000036   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_SystemReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SystemReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_StartRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_BindDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_PermitJoiningRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_PermitJoiningRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_AllowBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_ReadConfiguration?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReadConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_WriteConfiguration?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_WriteConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_GetDeviceInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_GetDeviceInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zb_FindDeviceRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SAPI_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SAPI_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SAPI_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SAPI_SendCback?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_SendCback
    986          
    987          #if OSAL_SAPI
    988          /*********************************************************************
    989           * @fn      osalInitTasks
    990           *
    991           * @brief   This function invokes the initialization function for each task.
    992           *
    993           * @param   void
    994           *
    995           * @return  none
    996           */
    997          void osalInitTasks( void )
    998          {
    999            uint8 taskID = 0;
   1000          
   1001            tasksEvents = (uint16 *)osal_mem_alloc( sizeof( uint16 ) * tasksCnt);
   1002            osal_memset( tasksEvents, 0, (sizeof( uint16 ) * tasksCnt));
   1003          
   1004            macTaskInit( taskID++ );
   1005            nwk_init( taskID++ );
   1006            Hal_Init( taskID++ );
   1007          #if defined( MT_TASK )
   1008            MT_TaskInit( taskID++ );
   1009          #endif
   1010            APS_Init( taskID++ );
   1011            ZDApp_Init( taskID++ );
   1012            SAPI_Init( taskID );
   1013          }
   1014          #endif
   1015          
   1016          /*********************************************************************
   1017          *********************************************************************/
   1018          

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     SAPI_Init                      0      0      9
       -> afRegister                0      0     18
       -> afSetMatch                0      0     18
       -> ZDO_RegisterForZDOMsg     0      0     18
       -> ZDO_RegisterForZDOMsg     0      0     18
       -> osal_set_event            0      0     18
     SAPI_ProcessEvent              0      0     14
       -> osal_msg_receive          0      0     28
       -> zb_StartConfirm           0      0     28
       -> osal_msg_deallocate       0      0     28
       -> osal_msg_receive          0      0     28
       -> SAPI_ProcessZDOMsgs       0      0     28
       -> zb_StartConfirm           0      0     28
       -> zb_StartConfirm           0      0     28
       -> afSetMatch                0      0     28
       -> zb_HandleOsalEvent        0      0     28
       -> HalLedSet                 0      0     28
       -> zb_StartRequest           0      0     28
       -> zb_HandleOsalEvent        0      0     28
     SAPI_ProcessZDOMsgs            0      0     34
       -> ZDO_ParseAddrRsp          0      0     38
       -> zb_FindDeviceConfirm      0      0     38
       -> ZDO_ParseEPListRsp        0      0     38
       -> APSME_BindRequest         0      0     40
       -> osal_stop_timerEx         0      0     38
       -> osal_start_timerEx        0      0     38
       -> ZDP_IEEEAddrReq           0      0     38
     SAPI_SendCback                 1      0     35
       -> osal_msg_allocate         0      0     24
       -> osal_msg_send             0      0     24
     zb_AllowBind                   0      0      9
       -> HalLedSet                 0      0     18
       -> osal_stop_timerEx         0      0     18
       -> afSetMatch                0      0     18
       -> afSetMatch                0      0     18
       -> osal_start_timerEx        0      0     18
     zb_BindDevice                  0      0     31
       -> sAddrExtCpy               0      0     46
       -> APSME_BindRequest         0      0     48
       -> ZDP_NwkAddrReq            0      0     46
       -> osal_start_timerEx        0      0     46
       -> SAPI_SendCback            0      0     46
       -> ZDO_AnyClusterMatches     0      0     50
       -> ZDP_MatchDescReq          0      0     62
       -> ZDO_AnyClusterMatches     0      0     50
       -> ZDP_MatchDescReq          0      0     62
       -> osal_start_timerEx        0      0     46
       -> bindRemoveEntry           0      0     46
       -> bindFind                  0      0     46
       -> osal_start_timerEx        0      0     46
     zb_FindDeviceRequest           0      0      9
       -> ZDP_NwkAddrReq            0      0     18
     zb_GetDeviceInfo               0      0     14
       -> osal_memcpy               0      0     28
       -> osal_memcpy               0      0     28
       -> osal_memcpy               0      0     28
       -> osal_memcpy               0      0     28
       -> osal_memcpy               0      0     28
       -> osal_memcpy               0      0     28
       -> osal_memcpy               0      0     28
       -> osal_memcpy               0      0     28
     zb_PermitJoiningRequest        0      0      0
     zb_ReadConfiguration           0      0     17
       -> osal_nv_item_len          0      0     24
       -> osal_nv_read              0      0     32
     zb_StartRequest                2      0     15
       -> zb_ReadConfiguration      4      0      2
       -> SAPI_SendCback            4      0      2
       -> ZDOInitDevice             4      0      2
     zb_SystemReset                 0      0      0
       -> Onboard_soft_reset        0      0      0
     zb_WriteConfiguration          0      0     14
       -> osal_nv_write             0      0     28


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     sapi_epDesc                        6
     sapi_TaskID                        1
     sapi_bindInProgress                2
     zb_SystemReset                     6
     zb_StartRequest                   77
     zb_BindDevice                    461
     ?Subroutine0                       5
     ?Subroutine7                       5
     ?Subroutine5                      20
     ?Subroutine6                      11
     ??Subroutine10_0                   6
     ?Subroutine4                       9
     ?Subroutine8                       6
     ?Subroutine9                      12
     zb_PermitJoiningRequest            5
     zb_AllowBind                      77
     ?Subroutine1                       5
     ?Subroutine3                       2
     ??Subroutine11_0                   7
     zb_ReadConfiguration              69
     zb_WriteConfiguration             43
     ?Subroutine2                       8
     zb_GetDeviceInfo                 138
     zb_FindDeviceRequest              24
     SAPI_ProcessEvent                212
     SAPI_ProcessZDOMsgs              217
     SAPI_Init                        101
     SAPI_SendCback                    57
     ??zb_SystemReset?relay             6
     ??zb_StartRequest?relay            6
     ??zb_BindDevice?relay              6
     ??zb_PermitJoiningRequest?relay    6
     ??zb_AllowBind?relay               6
     ??zb_ReadConfiguration?relay       6
     ??zb_WriteConfiguration?relay      6
     ??zb_GetDeviceInfo?relay           6
     ??zb_FindDeviceRequest?relay       6
     ??SAPI_ProcessEvent?relay          6
     ??SAPI_ProcessZDOMsgs?relay        6
     ??SAPI_Init?relay                  6
     ??SAPI_SendCback?relay             6

 
 1 583 bytes in segment BANKED_CODE
    78 bytes in segment BANK_RELAYS
     9 bytes in segment XDATA_Z
 
 1 661 bytes of CODE  memory
     9 bytes of XDATA memory

Errors: none
Warnings: none
