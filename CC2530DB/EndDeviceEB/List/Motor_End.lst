###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         30/Mar/2018  15:32:36 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\Source\Motor_End.c                  #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\Source\Motor #
#                          _End.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D      #
#                          REFLECTOR -D POWER_SAVING -D NV_INIT -D            #
#                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D            #
#                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC  #
#                          -lC D:\ProgramData\Hardware\zigbee\Projects\zstack #
#                          \Samples\SensorSys\CC2530DB\EndDeviceEB\List\ -lA  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\          #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e        #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 16 -I     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\Motor_End #
#                          .lst                                               #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\Motor_End. #
#                          r51                                                #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Motor_End.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include "sapi.h"
      7          
      8          #include "SensorSys_End.h"
      9          #include "device.h"
     10          #include "Motor_End.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     11          
     12          #include "DebugTrace.h"
     13          
     14          #if !defined( WIN32 )
     15          	#include "OnBoard.h"
     16          #endif
     17          
     18          /* HAL */
     19          #include "hal_led.h"
     20          #include "hal_timer.h"
     21          #include "hal_key.h"
     22          #include "hal_uart.h"
     23          
     24          /*********************************************************************
     25           * MACROS
     26           */
     27          
     28          /*********************************************************************
     29           * CONSTANTS
     30           */
     31          
     32          /*********************************************************************
     33           * TYPEDEFS
     34           */
     35          
     36          /*********************************************************************
     37           * GLOBAL VARIABLES
     38           */
     39          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          byte Motor_TaskID;
   \                     Motor_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          uint8 motorCnt;
   \                     motorCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     42          
     43          
     44          // Motor 端点的簇ID
     45          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     46          cId_t Motor_ClusterList[MOTOR_MAX_CLUSTERS] =
   \                     Motor_ClusterList:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for Motor_ClusterList>`
   \   000006                REQUIRE __INIT_XDATA_I
     47          {
     48              MOTOR_FORWARD,
     49              MOTOR_BACKWARD,
     50              MOTOR_STOP
     51          };
     52          
     53          // Motor 端点简单描述符

   \                                 In  segment XDATA_I, align 1, keep-with-next
     54          SimpleDescriptionFormat_t Motor_SimpleDesc[MOTOR_NUM_MAX] =
   \                     Motor_SimpleDesc:
   \   000000                DS 24
   \   000018                REQUIRE `?<Initializer for Motor_SimpleDesc>`
   \   000018                REQUIRE __INIT_XDATA_I
     55          {
     56          	MOTOR_ENDPOINT,           //  int Endpoint;
     57          	SYS_PROFID,                //  uint16 AppProfId[2];
     58          	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
     59          	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
     60          	SYS_FLAGS,                 //  int   AppFlags:4;
     61          	MOTOR_MAX_CLUSTERS,        //  byte  AppNumInClusters;
     62          	(cId_t *)Motor_ClusterList,  //  byte *pAppInClusterList;
     63          	0,                          //  byte  AppNumInClusters;
     64          	NULL                         //  byte *pAppInClusterList;
     65          };
     66          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     67          endPointDesc_t Motor_epDesc[MOTOR_NUM_MAX];
   \                     Motor_epDesc:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     68          
     69          typedef struct {
     70            uint16 velocity[MOTOR_MAX_OPERATION];
     71            uint16 delay[MOTOR_MAX_OPERATION];
     72            uint8 total;      /* how much commands */
     73            uint8 direct;     /* rotate direction */
     74            uint8 status;     /* what is doing now */
     75          } MotorControl_t;
     76          
     77          
     78          /*********************************************************************
     79           * EXTERNAL VARIABLES
     80           */
     81          extern uint8 myAppState;
     82          extern uint8 keys_shift;
     83          extern uint8 type_join;
     84          /*********************************************************************
     85           * EXTERNAL FUNCTIONS
     86           */
     87          
     88          /*********************************************************************
     89           * LOCAL VARIABLES
     90           */
     91          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          afAddrType_t Motor_DstAddr;
   \                     Motor_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     93          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     94          MotorControl_t MotorControl[MOTOR_NUM_MAX]; 
   \                     MotorControl:
   \   000000                DS 46
   \   00002E                REQUIRE __INIT_XDATA_Z
     95          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          static uint16 motorTimeout[MOTOR_NUM_MAX] = {0, 0};
   \                     motorTimeout:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          void Motor_Init( byte task_id );
    101          UINT16 Motor_ProcessEvent( byte task_id, UINT16 events );
    102          
    103          static void Motor_ReceiveDataIndication( uint16 source, uint8 endPoint, 
    104                                        uint16 command, uint16 len, uint8 *pData  );
    105          static void Motor_AllowBindConfirm( uint16 source );
    106          static void MotorAction( uint8 motor, uint16 command, uint16 len, uint8 *pData );
    107          static void MotorUpdate(uint8 motor);
    108          static uint8 MotorDone(void);
    109          /*********************************************************************
    110           * @fn      Motor_Init
    111           *
    112           * @brief   Initialization function for the Generic App Task.
    113           *          This is called during initialization and should contain
    114           *          any application specific initialization (ie. hardware
    115           *          initialization/setup, table initialization, power up
    116           *          notificaiton ... ).
    117           *
    118           * @param   task_id - the ID assigned by OSAL.  This ID should be
    119           *                    used to send messages and set timers.
    120           *
    121           * @return  none
    122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    123          void Motor_Init( byte task_id )
   \                     Motor_Init:
    124          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    125                  char i;
    126          	Motor_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Motor_TaskID
   \   000009   F0           MOVX    @DPTR,A
    127          
    128                  // Initalize P0 IO direction
    129                  P0SEL &= ~0xf0;
   \   00000A   53F30F       ANL     0xf3,#0xf
    130                  P0DIR |= 0xf0;
   \   00000D   43FDF0       ORL     0xfd,#0xf0
    131                  
    132          	// Device hardware initialization can be added here or in main() (Zmain.c).
    133          	// If the hardware is application specific - add it here.
    134          	// If the hardware is other parts of the device add it in main().
    135          
    136          	Motor_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000010   90....       MOV     DPTR,#Motor_DstAddr + 8
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    137          	Motor_DstAddr.endPoint = 0;
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    138          	Motor_DstAddr.addr.shortAddr = 0;
   \   000017   90....       MOV     DPTR,#Motor_DstAddr
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
    139                  
    140                  for( i=0; i<MOTOR_NUM_MAX; i++)
   \   00001D   FF           MOV     R7,A
    141                  {
    142                      // Fill out the endpoint description.
    143                      Motor_epDesc[i].endPoint = MOTOR_ENDPOINT+i;
   \                     ??Motor_Init_0:
   \   00001E   8F82         MOV     DPL,R7
   \   000020   A882         MOV     R0,DPL
   \   000022   E8           MOV     A,R0
   \   000023   75F006       MOV     B,#0x6
   \   000026   A4           MUL     AB
   \   000027   FA           MOV     R2,A
   \   000028   ABF0         MOV     R3,B
   \   00002A   74..         MOV     A,#Motor_epDesc & 0xff
   \   00002C   2A           ADD     A,R2
   \   00002D   FA           MOV     R2,A
   \   00002E   74..         MOV     A,#(Motor_epDesc >> 8) & 0xff
   \   000030   3B           ADDC    A,R3
   \   000031   FB           MOV     R3,A
   \   000032   746E         MOV     A,#0x6e
   \   000034   2F           ADD     A,R7
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   F0           MOVX    @DPTR,A
    144                      Motor_epDesc[i].task_id = &Motor_TaskID;
   \   00003A   A3           INC     DPTR
   \   00003B   74..         MOV     A,#Motor_TaskID & 0xff
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   74..         MOV     A,#(Motor_TaskID >> 8) & 0xff
   \   000041   F0           MOVX    @DPTR,A
    145                      Motor_SimpleDesc[i] = Motor_SimpleDesc[0];
   \   000042   E8           MOV     A,R0
   \   000043   75F00C       MOV     B,#0xc
   \   000046   A4           MUL     AB
   \   000047   F8           MOV     R0,A
   \   000048   A9F0         MOV     R1,B
   \   00004A   74..         MOV     A,#Motor_SimpleDesc & 0xff
   \   00004C   28           ADD     A,R0
   \   00004D   F8           MOV     R0,A
   \   00004E   74..         MOV     A,#(Motor_SimpleDesc >> 8) & 0xff
   \   000050   39           ADDC    A,R1
   \   000051   F9           MOV     R1,A
   \   000052   90....       MOV     DPTR,#Motor_SimpleDesc
   \   000055   E8           MOV     A,R0
   \   000056   FC           MOV     R4,A
   \   000057   E9           MOV     A,R1
   \   000058   FD           MOV     R5,A
   \   000059   740C         MOV     A,#0xc
   \   00005B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    146                      Motor_epDesc[i].simpleDesc
    147          						= (SimpleDescriptionFormat_t *)&(Motor_SimpleDesc[i]);
   \   00005E   8A82         MOV     DPL,R2
   \   000060   8B83         MOV     DPH,R3
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E8           MOV     A,R0
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   E9           MOV     A,R1
   \   000069   F0           MOVX    @DPTR,A
    148                      Motor_SimpleDesc[i].EndPoint += i;
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   2F           ADD     A,R7
   \   000070   F0           MOVX    @DPTR,A
    149          	    Motor_epDesc[i].latencyReq = noLatencyReqs;
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   E4           CLR     A
   \   00007B   F0           MOVX    @DPTR,A
    150                      
    151                      // Register the endpoint description with the AF
    152          	    afRegister( &(Motor_epDesc[i]) );
   \   00007C                ; Setup parameters for call to function afRegister
   \   00007C   12....       LCALL   ??afRegister?relay
    153                  }
   \   00007F   0F           INC     R7
   \   000080   EF           MOV     A,R7
   \   000081   C3           CLR     C
   \   000082   9402         SUBB    A,#0x2
   \   000084   4098         JC      ??Motor_Init_0
    154           
    155          	//	ZDO_RegisterForZDOMsg( Motor_TaskID, End_Device_Bind_rsp );
    156          	ZDO_RegisterForZDOMsg( Motor_TaskID, Match_Desc_rsp );
   \   000086                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000086   7A06         MOV     R2,#0x6
   \   000088   7B80         MOV     R3,#-0x80
   \   00008A   90....       MOV     DPTR,#Motor_TaskID
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    157                  
    158          // Init timer3 for Motor
    159                  HalTimerInit(5);
   \   000092                ; Setup parameters for call to function HalTimerInit
   \   000092   7905         MOV     R1,#0x5
   \   000094   12....       LCALL   ??HalTimerInit?relay
    160                  halTimerIntConnect(Timer3_uSec);
   \   000097                ; Setup parameters for call to function halTimerIntConnect
   \   000097   7A..         MOV     R2,#??Timer3_uSec?relay & 0xff
   \   000099   7B..         MOV     R3,#(??Timer3_uSec?relay >> 8) & 0xff
   \   00009B   12....       LCALL   ??halTimerIntConnect?relay
    161          }
   \   00009E                REQUIRE ?Subroutine0
   \   00009E                REQUIRE P0SEL
   \   00009E                REQUIRE P0DIR
   \   00009E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    162          
    163          /*********************************************************************
    164           * @fn      Motor_ProcessEvent
    165           *
    166           * @brief   Generic Application Task event processor.  This function
    167           *          is called to process all events for the task.  Events
    168           *          include timers, messages and any other user defined events.
    169           *
    170           * @param   task_id  - The OSAL assigned task ID.
    171           * @param   events - events to process.  This is a bit map and can
    172           *                   contain more than one event.
    173           *
    174           * @return  none
    175           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    176          UINT16 Motor_ProcessEvent( byte task_id, UINT16 events )
   \                     Motor_ProcessEvent:
    177          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    178              afIncomingMSGPacket_t *MSGpkt = NULL;
    179              (void)task_id;  // Intentionally unreferenced parameter
    180          
    181              if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??Motor_ProcessEvent_0 & 0xFFFF
    182              {
    183                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   8016         SJMP    ??Motor_ProcessEvent_1
    184                  while ( MSGpkt )
    185                  {
    186                    switch ( MSGpkt->hdr.event )
    187                    {
    188                      case AF_INCOMING_MSG_CMD:
    189                          Motor_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
    190                                                  MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
    191                          break;
    192                        
    193                      case ZDO_MATCH_DESC_RSP_SENT:
    194                          Motor_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
   \                     ??Motor_ProcessEvent_2:
   \   000012                ; Setup parameters for call to function Sys_AllowBindConfirm
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FA           MOV     R2,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   ??Sys_AllowBindConfirm?relay
    195                          break;
    196                    }
    197                    // Release the memory
    198                    osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Motor_ProcessEvent_3:
   \   00001C                ; Setup parameters for call to function osal_msg_deallocate
   \   00001C   AA..         MOV     R2,?V0 + 0
   \   00001E   AB..         MOV     R3,?V0 + 1
   \   000020   12....       LCALL   ??osal_msg_deallocate?relay
    199              
    200                    // Next
    201                    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Motor_TaskID );
   \   000023                ; Setup parameters for call to function osal_msg_receive
   \   000023   90....       MOV     DPTR,#Motor_TaskID
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \                     ??Motor_ProcessEvent_1:
   \   000028   12....       LCALL   ??osal_msg_receive?relay
   \   00002B   8A..         MOV     ?V0 + 0,R2
   \   00002D   8B..         MOV     ?V0 + 1,R3
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   45..         ORL     A,?V0 + 1
   \   000033   6055         JZ      ??Motor_ProcessEvent_4
   \   000035   85..82       MOV     DPL,?V0 + 0
   \   000038   85..83       MOV     DPH,?V0 + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   24E6         ADD     A,#-0x1a
   \   00003E   6006         JZ      ??Motor_ProcessEvent_5
   \   000040   2448         ADD     A,#0x48
   \   000042   60CE         JZ      ??Motor_ProcessEvent_2
   \   000044   80D6         SJMP    ??Motor_ProcessEvent_3
   \                     ??Motor_ProcessEvent_5:
   \   000046                ; Setup parameters for call to function MotorAction
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   2422         ADD     A,#0x22
   \   00004A   F582         MOV     DPL,A
   \   00004C   E5..         MOV     A,?V0 + 1
   \   00004E   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000051   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000054   E5..         MOV     A,?V0 + 0
   \   000056   2420         ADD     A,#0x20
   \   000058   F582         MOV     DPL,A
   \   00005A   E5..         MOV     A,?V0 + 1
   \   00005C   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00005F   FC           MOV     R4,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FD           MOV     R5,A
   \   000063   85..82       MOV     DPL,?V0 + 0
   \   000066   85..83       MOV     DPH,?V0 + 1
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FA           MOV     R2,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FB           MOV     R3,A
   \   000072   E5..         MOV     A,?V0 + 0
   \   000074   2414         ADD     A,#0x14
   \   000076   F582         MOV     DPL,A
   \   000078   E5..         MOV     A,?V0 + 1
   \   00007A   12....       LCALL   ??Subroutine11_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00007D   2492         ADD     A,#-0x6e
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   ??MotorAction?relay
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   8092         SJMP    ??Motor_ProcessEvent_3
    202                  }
    203                  return (events ^ SYS_EVENT_MSG);
   \                     ??Motor_ProcessEvent_4:
   \   00008A   EE           MOV     A,R6
   \   00008B   FA           MOV     R2,A
   \   00008C   EF           MOV     A,R7
   \   00008D   6480         XRL     A,#0x80
   \                     ??Motor_ProcessEvent_6:
   \   00008F   FB           MOV     R3,A
   \   000090   8024         SJMP    ??Motor_ProcessEvent_7
    204              }
    205              if ( events & MOTOR1_UPDATE_EVT )
   \                     ??Motor_ProcessEvent_0:
   \   000092   EE           MOV     A,R6
   \   000093   5420         ANL     A,#0x20
   \   000095   600C         JZ      ??Motor_ProcessEvent_8
    206              {
    207                  MotorUpdate(0);
   \   000097                ; Setup parameters for call to function MotorUpdate
   \   000097   7900         MOV     R1,#0x0
   \   000099   12....       LCALL   ??MotorUpdate?relay
    208                  return (events ^ MOTOR1_UPDATE_EVT);
   \   00009C   EE           MOV     A,R6
   \   00009D   6420         XRL     A,#0x20
   \                     ??Motor_ProcessEvent_9:
   \   00009F   FA           MOV     R2,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   80EC         SJMP    ??Motor_ProcessEvent_6
    209              }
    210              if ( events & MOTOR2_UPDATE_EVT )
   \                     ??Motor_ProcessEvent_8:
   \   0000A3   EE           MOV     A,R6
   \   0000A4   5421         ANL     A,#0x21
   \   0000A6   600A         JZ      ??Motor_ProcessEvent_10
    211              {
    212                  MotorUpdate(1);
   \   0000A8                ; Setup parameters for call to function MotorUpdate
   \   0000A8   7901         MOV     R1,#0x1
   \   0000AA   12....       LCALL   ??MotorUpdate?relay
    213                  return (events ^ MOTOR2_UPDATE_EVT);
   \   0000AD   EE           MOV     A,R6
   \   0000AE   6421         XRL     A,#0x21
   \   0000B0   80ED         SJMP    ??Motor_ProcessEvent_9
    214              }
    215              return 0;
   \                     ??Motor_ProcessEvent_10:
   \   0000B2   7A00         MOV     R2,#0x0
   \   0000B4   7B00         MOV     R3,#0x0
   \                     ??Motor_ProcessEvent_7:
   \   0000B6   7F06         MOV     R7,#0x6
   \   0000B8   02....       LJMP    ?BANKED_LEAVE_XDATA
    216          }
    217          
    218          /******************************************************************************
    219           * @fn          Motor_ReceiveDataIndication
    220           *
    221           * @brief       The SAPI_ReceiveDataIndication callback function is called
    222           *              asynchronously by the ZigBee stack to notify the application
    223           *              when data is received from a peer device.
    224           *
    225           * @param       source - The short address of the peer device that sent the data
    226           *              command - The commandId associated with the data
    227           *              len - The number of bytes in the pData parameter
    228           *              pData - The data sent by the peer device
    229           *
    230           * @return      none
    231           */
    232          void Motor_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
    233          {
    234            MotorAction(endPoint-MOTOR_ENDPOINT, command, len, pData);
    235          }
    236          
    237          /******************************************************************************
    238           * @fn          Motor_AllowBindConfirm
    239           *
    240           * @brief       Indicates when another device attempted to bind to this device
    241           *
    242           * @param
    243           *
    244           * @return      none
    245           */
    246          void Motor_AllowBindConfirm( uint16 source )
    247          {
    248               Sys_AllowBindConfirm(source);
    249          }
    250          
    251          /******************************************************************************
    252           * @fn          MotorAction
    253           *
    254           * @brief       Motor Action Decide
    255           *
    256           * @param
    257           *
    258           * @return      none
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          void MotorAction( uint8 motor, uint16 command, uint16 len, uint8 *pData )
   \                     MotorAction:
    261          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   EC           MOV     A,R4
   \   00000F   FA           MOV     R2,A
   \   000010   ED           MOV     A,R5
   \   000011   FB           MOV     R3,A
   \   000012   741E         MOV     A,#0x1e
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 10,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 11,A
    262            // pData contains : " velocity(r/min), delay(0xffff: never)(sec), velocity, delay, ... "
    263            
    264            // devide word between No.3 and No.4 ','
    265            if(motor>=MOTOR_NUM_MAX)return;   // data error
   \   00001E   E9           MOV     A,R1
   \   00001F   C3           CLR     C
   \   000020   9402         SUBB    A,#0x2
   \   000022   4003         JC      $+5
   \   000024   02....       LJMP    ??MotorAction_0 & 0xFFFF
    266            
    267            uint8 i;
    268            uint8 posx1, posx2;
    269            uint8 num = Num_Pos(len, pData);
   \   000027                ; Setup parameters for call to function Num_Pos
   \   000027   AC..         MOV     R4,?V0 + 10
   \   000029   AD..         MOV     R5,?V0 + 11
   \   00002B   12....       LCALL   ??Num_Pos?relay
   \   00002E   E9           MOV     A,R1
   \   00002F   F5..         MOV     ?V0 + 4,A
    270            uint8 motorVelocity_arr[5], motorDelay_arr[5];
    271            if(num%2)return;  // data error
   \   000031   A2E0         MOV     C,0xE0 /* A   */.0
   \   000033   5003         JNC     $+5
   \   000035   02....       LJMP    ??MotorAction_0 & 0xFFFF
    272            if(num/2 > MOTOR_MAX_OPERATION)num = MOTOR_MAX_OPERATION*2;   // data too long
   \   000038   C3           CLR     C
   \   000039   13           RRC     A
   \   00003A   C3           CLR     C
   \   00003B   9406         SUBB    A,#0x6
   \   00003D   4003         JC      ??MotorAction_1
   \   00003F   75..0A       MOV     ?V0 + 4,#0xa
    273            
    274            posx1 = 0;
   \                     ??MotorAction_1:
   \   000042   7E00         MOV     R6,#0x0
    275            for(i=0; i<num; i++)
   \   000044   8E..         MOV     ?V0 + 3,R6
   \   000046   804E         SJMP    ??MotorAction_2
    276            {
    277                posx2 = Locate_Pos(pData, i+1);
    278                if(posx2 - posx1 == 0)
    279                  return; //data error
    280                if(i%2)
    281                {
    282                  mid(motorDelay_arr, pData, posx2-posx1-1,posx1);
    283                  MotorControl[motor].delay[i/2] = atoi(motorDelay_arr);
                                                               ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
    284                }
    285                else
    286                {
    287                  mid(motorVelocity_arr, pData, posx2-posx1-1,posx1);
   \                     ??MotorAction_3:
   \   000048                ; Setup parameters for call to function mid
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   AC..         MOV     R4,?V0 + 10
   \   000053   AD..         MOV     R5,?V0 + 11
   \   000055   7409         MOV     A,#0x9
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   \   00005E   12....       LCALL   ??mid?relay
   \   000061   7404         MOV     A,#0x4
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
    288                  MotorControl[motor].velocity[i/2] = 150000/TIMER3_INT_DELAY/atoi(motorVelocity_arr);
                                                                                          ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \   000066                ; Setup parameters for call to function atoi
   \   000066   7405         MOV     A,#0x5
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
   \   00006F   12....       LCALL   ??atoi?relay
   \   000072   78DA         MOV     R0,#-0x26
   \   000074   7929         MOV     R1,#0x29
   \   000076   12....       LCALL   ?S_DIV_MOD
   \   000079   85....       MOV     ?V0 + 6,?V0 + 3
   \   00007C   E5..         MOV     A,?V0 + 6
   \   00007E   54FE         ANL     A,#0xfe
   \   000080   FC           MOV     R4,A
   \   000081   E5..         MOV     A,?V0 + 2
   \   000083   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    289                }
   \                     ??CrossCallReturnLabel_19:
   \   000086   2C           ADD     A,R4
   \   000087   F582         MOV     DPL,A
   \   000089   EB           MOV     A,R3
   \   00008A   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00008D   E8           MOV     A,R0
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   E9           MOV     A,R1
   \                     ??MotorAction_4:
   \   000091   F0           MOVX    @DPTR,A
    290                posx1 = posx2;
   \   000092   AE..         MOV     R6,?V0 + 5
   \   000094   05..         INC     ?V0 + 3
   \                     ??MotorAction_2:
   \   000096   E5..         MOV     A,?V0 + 3
   \   000098   C3           CLR     C
   \   000099   95..         SUBB    A,?V0 + 4
   \   00009B   4003         JC      $+5
   \   00009D   02....       LJMP    ??MotorAction_5 & 0xFFFF
   \   0000A0                ; Setup parameters for call to function Locate_Pos
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   25..         ADD     A,?V0 + 3
   \   0000A4   F9           MOV     R1,A
   \   0000A5   AA..         MOV     R2,?V0 + 10
   \   0000A7   AB..         MOV     R3,?V0 + 11
   \   0000A9   12....       LCALL   ??Locate_Pos?relay
   \   0000AC   E9           MOV     A,R1
   \   0000AD   F5..         MOV     ?V0 + 5,A
   \   0000AF   8E..         MOV     ?V0 + 6,R6
   \   0000B1   C3           CLR     C
   \   0000B2   95..         SUBB    A,?V0 + 6
   \   0000B4   F8           MOV     R0,A
   \   0000B5   95E0         SUBB    A,0xE0 /* A   */
   \   0000B7   F9           MOV     R1,A
   \   0000B8   E8           MOV     A,R0
   \   0000B9   49           ORL     A,R1
   \   0000BA   7003         JNZ     $+5
   \   0000BC   02....       LJMP    ??MotorAction_0 & 0xFFFF
   \   0000BF   E5..         MOV     A,?V0 + 3
   \   0000C1   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   AA82         MOV     R2,DPL
   \   0000C7   75..00       MOV     ?V0 + 7,#0x0
   \   0000CA   78..         MOV     R0,#?V0 + 6
   \   0000CC   4003         JC      $+5
   \   0000CE   02....       LJMP    ??MotorAction_3 & 0xFFFF
   \   0000D1                ; Setup parameters for call to function mid
   \   0000D1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D4   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   AC..         MOV     R4,?V0 + 10
   \   0000DC   AD..         MOV     R5,?V0 + 11
   \   0000DE   7404         MOV     A,#0x4
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   AA82         MOV     R2,DPL
   \   0000E5   AB83         MOV     R3,DPH
   \   0000E7   12....       LCALL   ??mid?relay
   \   0000EA   7404         MOV     A,#0x4
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EF                ; Setup parameters for call to function atoi
   \   0000EF   85..82       MOV     DPL,?XSP + 0
   \   0000F2   85..83       MOV     DPH,?XSP + 1
   \   0000F5   AA82         MOV     R2,DPL
   \   0000F7   AB83         MOV     R3,DPH
   \   0000F9   12....       LCALL   ??atoi?relay
   \   0000FC   E5..         MOV     A,?V0 + 2
   \   0000FE   75F017       MOV     B,#0x17
   \   000101   A4           MUL     AB
   \   000102   F8           MOV     R0,A
   \   000103   A9F0         MOV     R1,B
   \   000105   85....       MOV     ?V0 + 6,?V0 + 3
   \   000108   E5..         MOV     A,?V0 + 6
   \   00010A   54FE         ANL     A,#0xfe
   \   00010C   FC           MOV     R4,A
   \   00010D   74..         MOV     A,#(MotorControl + 10) & 0xff
   \   00010F   2C           ADD     A,R4
   \   000110   FC           MOV     R4,A
   \   000111   74..         MOV     A,#((MotorControl + 10) >> 8) & 0xff
   \   000113   3400         ADDC    A,#0x0
   \   000115   FD           MOV     R5,A
   \   000116   EC           MOV     A,R4
   \   000117   28           ADD     A,R0
   \   000118   F582         MOV     DPL,A
   \   00011A   ED           MOV     A,R5
   \   00011B   39           ADDC    A,R1
   \   00011C   F583         MOV     DPH,A
   \   00011E   EA           MOV     A,R2
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   EB           MOV     A,R3
   \   000122   02....       LJMP    ??MotorAction_4 & 0xFFFF
    291            }
    292            MotorControl[motor].total = num/2;
   \                     ??MotorAction_5:
   \   000125   E5..         MOV     A,?V0 + 2
   \   000127   75F017       MOV     B,#0x17
   \   00012A   A4           MUL     AB
   \   00012B   F8           MOV     R0,A
   \   00012C   A9F0         MOV     R1,B
   \   00012E   74..         MOV     A,#MotorControl & 0xff
   \   000130   28           ADD     A,R0
   \   000131   F8           MOV     R0,A
   \   000132   74..         MOV     A,#(MotorControl >> 8) & 0xff
   \   000134   39           ADDC    A,R1
   \   000135   F9           MOV     R1,A
   \   000136   E5..         MOV     A,?V0 + 4
   \   000138   C3           CLR     C
   \   000139   13           RRC     A
   \   00013A   C0E0         PUSH    A
   \   00013C   E8           MOV     A,R0
   \   00013D   2414         ADD     A,#0x14
   \   00013F   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000142   D0E0         POP     A
   \   000144   F0           MOVX    @DPTR,A
    293            MotorControl[motor].direct = command;
   \   000145   E8           MOV     A,R0
   \   000146   2415         ADD     A,#0x15
   \   000148   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00014B   E5..         MOV     A,?V0 + 0
   \   00014D   F0           MOVX    @DPTR,A
    294            MotorControl[motor].status = 0;
   \   00014E   E8           MOV     A,R0
   \   00014F   2416         ADD     A,#0x16
   \   000151   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000154   E4           CLR     A
   \   000155   F0           MOVX    @DPTR,A
    295            
    296            switch(motor)
   \   000156   E5..         MOV     A,?V0 + 2
   \   000158   6005         JZ      ??MotorAction_6
   \   00015A   14           DEC     A
   \   00015B   6012         JZ      ??MotorAction_7
   \   00015D   8028         SJMP    ??MotorAction_0
    297            {
    298            case 0:
    299              osal_stop_timerEx(Motor_TaskID, MOTOR1_UPDATE_EVT);
   \                     ??MotorAction_6:
   \   00015F                ; Setup parameters for call to function osal_stop_timerEx
   \   00015F   7A20         MOV     R2,#0x20
   \   000161   7B00         MOV     R3,#0x0
   \   000163   90....       MOV     DPTR,#Motor_TaskID
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F9           MOV     R1,A
   \   000168   12....       LCALL   ??osal_stop_timerEx?relay
    300              osal_set_event(Motor_TaskID, MOTOR1_UPDATE_EVT);
   \   00016B                ; Setup parameters for call to function osal_set_event
   \   00016B   7A20         MOV     R2,#0x20
   \   00016D   800E         SJMP    ??MotorAction_8
    301              break;
    302            case 1:
    303              osal_stop_timerEx(Motor_TaskID, MOTOR2_UPDATE_EVT);
   \                     ??MotorAction_7:
   \   00016F                ; Setup parameters for call to function osal_stop_timerEx
   \   00016F   7A21         MOV     R2,#0x21
   \   000171   7B00         MOV     R3,#0x0
   \   000173   90....       MOV     DPTR,#Motor_TaskID
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F9           MOV     R1,A
   \   000178   12....       LCALL   ??osal_stop_timerEx?relay
    304              osal_set_event(Motor_TaskID, MOTOR2_UPDATE_EVT);
   \   00017B                ; Setup parameters for call to function osal_set_event
   \   00017B   7A21         MOV     R2,#0x21
   \                     ??MotorAction_8:
   \   00017D   7B00         MOV     R3,#0x0
   \   00017F   90....       MOV     DPTR,#Motor_TaskID
   \   000182   E0           MOVX    A,@DPTR
   \   000183   F9           MOV     R1,A
   \   000184   12....       LCALL   ??osal_set_event?relay
    305              break;
   \                     ??MotorAction_0:
   \   000187   740A         MOV     A,#0xa
   \   000189   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018C   7F0C         MOV     R7,#0xc
   \   00018E   02....       LJMP    ?BANKED_LEAVE_XDATA
    306            }
    307          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   85....       MOV     ?V0 + 6,?V0 + 5
   \   000003   E5..         MOV     A,?V0 + 6
   \   000005   C3           CLR     C
   \   000006   9A           SUBB    A,R2
   \   000007   24FF         ADD     A,#-0x1
   \   000009   F5..         MOV     ?V0 + 6,A
   \   00000B   E9           MOV     A,R1
   \   00000C   34FF         ADDC    A,#-0x1
   \   00000E   F5..         MOV     ?V0 + 7,A
   \   000010   78..         MOV     R0,#?V0 + 6
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F582         MOV     DPL,A
   \   000002   E9           MOV     A,R1
   \   000003                REQUIRE ??Subroutine12_0
   \   000003                ; // Fall through to label ??Subroutine12_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   75F017       MOV     B,#0x17
   \   000003   A4           MUL     AB
   \   000004   FA           MOV     R2,A
   \   000005   ABF0         MOV     R3,B
   \   000007   74..         MOV     A,#MotorControl & 0xff
   \   000009   2A           ADD     A,R2
   \   00000A   FA           MOV     R2,A
   \   00000B   74..         MOV     A,#(MotorControl >> 8) & 0xff
   \   00000D   3B           ADDC    A,R3
   \   00000E   FB           MOV     R3,A
   \   00000F   EA           MOV     A,R2
   \   000010   22           RET
    308          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          void MotorUpdate(uint8 motor)
   \                     MotorUpdate:
    310          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    311              if(MotorControl[motor].status == (MotorControl[motor].total)-1)
   \   000007   75F017       MOV     B,#0x17
   \   00000A   A4           MUL     AB
   \   00000B   F8           MOV     R0,A
   \   00000C   A9F0         MOV     R1,B
   \   00000E   74..         MOV     A,#MotorControl & 0xff
   \   000010   28           ADD     A,R0
   \   000011   FA           MOV     R2,A
   \   000012   74..         MOV     A,#(MotorControl >> 8) & 0xff
   \   000014   39           ADDC    A,R1
   \   000015   FB           MOV     R3,A
   \   000016   EA           MOV     A,R2
   \   000017   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00001A   FC           MOV     R4,A
   \   00001B   EA           MOV     A,R2
   \   00001C   2414         ADD     A,#0x14
   \   00001E   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000021   24FF         ADD     A,#-0x1
   \   000023   F8           MOV     R0,A
   \   000024   E4           CLR     A
   \   000025   34FF         ADDC    A,#-0x1
   \   000027   F9           MOV     R1,A
   \   000028   E8           MOV     A,R0
   \   000029   6C           XRL     A,R4
   \   00002A   7001         JNZ     ??MotorUpdate_0
   \   00002C   E9           MOV     A,R1
   \                     ??MotorUpdate_0:
   \   00002D   702B         JNZ     ??MotorUpdate_1
    312              {
    313                  // STOP
    314                  // Sleep Pin -> low
    315                  (MotorControl[motor].status)++;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   A882         MOV     R0,DPL
   \   000033   E8           MOV     A,R0
   \   000034   75F017       MOV     B,#0x17
   \   000037   A4           MUL     AB
   \   000038   FA           MOV     R2,A
   \   000039   ABF0         MOV     R3,B
   \   00003B   74..         MOV     A,#(MotorControl + 22) & 0xff
   \   00003D   2A           ADD     A,R2
   \   00003E   F582         MOV     DPL,A
   \   000040   74..         MOV     A,#((MotorControl + 22) >> 8) & 0xff
   \   000042   3B           ADDC    A,R3
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   04           INC     A
   \   000047   F0           MOVX    @DPTR,A
    316                  motorTimeout[motor] = 0;
   \   000048   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   F0           MOVX    @DPTR,A
    317                  if(MotorDone())
   \   00004F                ; Setup parameters for call to function MotorDone
   \   00004F   12....       LCALL   ??MotorDone?relay
   \   000052   E9           MOV     A,R1
   \   000053   606E         JZ      ??MotorUpdate_2
    318                  {
    319                      HalTimerStop();
   \   000055                ; Setup parameters for call to function HalTimerStop
   \   000055   12....       LCALL   ??HalTimerStop?relay
   \   000058   8069         SJMP    ??MotorUpdate_2
    320                  }
    321                  return;
    322              }
    323          
    324              if(MotorDone())   // first boot
   \                     ??MotorUpdate_1:
   \   00005A                ; Setup parameters for call to function MotorDone
   \   00005A   12....       LCALL   ??MotorDone?relay
   \   00005D   E9           MOV     A,R1
   \   00005E   8E82         MOV     DPL,R6
   \   000060   A882         MOV     R0,DPL
   \   000062   6014         JZ      ??MotorUpdate_3
    325              {
    326                  MOTOR_DIR_1 = MotorControl[motor].direct;
   \   000064   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000067   2415         ADD     A,#0x15
   \   000069   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00006C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006E   9284         MOV     0x80.4,C
    327                  motorTimeout[motor] = MotorControl[motor].velocity[MotorControl[motor].status];
   \   000070   12....       LCALL   ?Subroutine2 & 0xFFFF
    328                  HalTimerStart();
   \                     ??CrossCallReturnLabel_23:
   \   000073                ; Setup parameters for call to function HalTimerStart
   \   000073   12....       LCALL   ??HalTimerStart?relay
   \   000076   800B         SJMP    ??CrossCallReturnLabel_22
    329              }
    330              else
    331              {
    332                  (MotorControl[motor].status)++;
   \                     ??MotorUpdate_3:
   \   000078   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00007B   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00007E   04           INC     A
   \   00007F   F0           MOVX    @DPTR,A
    333                  motorTimeout[motor] = MotorControl[motor].velocity[MotorControl[motor].status];
   \   000080   12....       LCALL   ??Subroutine14_0 & 0xFFFF
    334              }
    335              
    336              switch(motor)
   \                     ??CrossCallReturnLabel_22:
   \   000083   EE           MOV     A,R6
   \   000084   6005         JZ      ??MotorUpdate_4
   \   000086   14           DEC     A
   \   000087   601A         JZ      ??MotorUpdate_5
   \   000089   8038         SJMP    ??MotorUpdate_2
    337              {
    338              case 0:
    339                  osal_start_timerEx(Motor_TaskID, MOTOR1_UPDATE_EVT, (MotorControl[motor].delay[MotorControl[motor].status])*1000);
   \                     ??MotorUpdate_4:
   \   00008B                ; Setup parameters for call to function osal_start_timerEx
   \   00008B   90....       MOV     DPTR,#MotorControl + 22
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C3           CLR     C
   \   000090   33           RLC     A
   \   000091   F8           MOV     R0,A
   \   000092   E4           CLR     A
   \   000093   33           RLC     A
   \   000094   F9           MOV     R1,A
   \   000095   74..         MOV     A,#(MotorControl + 10) & 0xff
   \   000097   28           ADD     A,R0
   \   000098   F582         MOV     DPL,A
   \   00009A   74..         MOV     A,#((MotorControl + 10) >> 8) & 0xff
   \   00009C   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00009F   7A20         MOV     R2,#0x20
   \   0000A1   8016         SJMP    ??MotorUpdate_6
    340                  break;
    341              case 1:
    342                  osal_start_timerEx(Motor_TaskID, MOTOR2_UPDATE_EVT, (MotorControl[motor].delay[MotorControl[motor].status])*1000);
   \                     ??MotorUpdate_5:
   \   0000A3                ; Setup parameters for call to function osal_start_timerEx
   \   0000A3   90....       MOV     DPTR,#MotorControl + 45
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   C3           CLR     C
   \   0000A8   33           RLC     A
   \   0000A9   F8           MOV     R0,A
   \   0000AA   E4           CLR     A
   \   0000AB   33           RLC     A
   \   0000AC   F9           MOV     R1,A
   \   0000AD   74..         MOV     A,#(MotorControl + 33) & 0xff
   \   0000AF   28           ADD     A,R0
   \   0000B0   F582         MOV     DPL,A
   \   0000B2   74..         MOV     A,#((MotorControl + 33) >> 8) & 0xff
   \   0000B4   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000B7   7A21         MOV     R2,#0x21
   \                     ??MotorUpdate_6:
   \   0000B9   7B00         MOV     R3,#0x0
   \   0000BB   90....       MOV     DPTR,#Motor_TaskID
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F9           MOV     R1,A
   \   0000C0   12....       LCALL   ??osal_start_timerEx?relay
    343                  break;
    344              }
   \                     ??MotorUpdate_2:
   \   0000C3   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000C6                REQUIRE _A_P0
    345          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine9_0
   \   000001                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#motorTimeout & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(motorTimeout >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   2416         ADD     A,#0x16
   \   000002                REQUIRE ??Subroutine10_0
   \   000002                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003                REQUIRE ??Subroutine11_0
   \   000003                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine13_0
   \   000001                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   EC           MOV     A,R4
   \   000009   75F0E8       MOV     B,#-0x18
   \   00000C   A4           MUL     AB
   \   00000D   CC           XCH     A,R4
   \   00000E   A8F0         MOV     R0,B
   \   000010   75F003       MOV     B,#0x3
   \   000013   A4           MUL     AB
   \   000014   28           ADD     A,R0
   \   000015   F8           MOV     R0,A
   \   000016   75F0E8       MOV     B,#-0x18
   \   000019   ED           MOV     A,R5
   \   00001A   A4           MUL     AB
   \   00001B   28           ADD     A,R0
   \   00001C   FD           MOV     R5,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EA           MOV     A,R2
   \   000001   2416         ADD     A,#0x16
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   12....       LCALL   ??Subroutine12_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000009   E0           MOVX    A,@DPTR
   \   00000A                REQUIRE ??Subroutine14_0
   \   00000A                ; // Fall through to label ??Subroutine14_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine14_0:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   FC           MOV     R4,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FD           MOV     R5,A
   \   000006   EA           MOV     A,R2
   \   000007   2C           ADD     A,R4
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   3D           ADDC    A,R5
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000016   EA           MOV     A,R2
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EB           MOV     A,R3
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   22           RET
    346          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    347          void Timer3_uSec()
   \                     Timer3_uSec:
    348          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    349              for(char i = 0; i<MOTOR_NUM_MAX; i++)
   \   000005   7E00         MOV     R6,#0x0
    350              {
    351                  if(motorTimeout[i] == 0)
   \                     ??Timer3_uSec_0:
   \   000007   EE           MOV     A,R6
   \   000008   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00000B   6053         JZ      ??CrossCallReturnLabel_24
    352                  {
    353                    continue;
    354                  }
    355                  motorTimeout[i]--;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   E582         MOV     A,DPL
   \   000011   C3           CLR     C
   \   000012   33           RLC     A
   \   000013   F8           MOV     R0,A
   \   000014   E4           CLR     A
   \   000015   33           RLC     A
   \   000016   F9           MOV     R1,A
   \   000017   74..         MOV     A,#motorTimeout & 0xff
   \   000019   28           ADD     A,R0
   \   00001A   F8           MOV     R0,A
   \   00001B   74..         MOV     A,#(motorTimeout >> 8) & 0xff
   \   00001D   39           ADDC    A,R1
   \   00001E   F9           MOV     R1,A
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   24FF         ADD     A,#-0x1
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   34FF         ADDC    A,#-0x1
   \   00002B   F0           MOVX    @DPTR,A
    356                  if(motorTimeout[i] == 0)
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \   000035   E8           MOV     A,R0
   \   000036   49           ORL     A,R1
   \   000037   7027         JNZ     ??CrossCallReturnLabel_24
    357                  {
    358                      // reverse
    359                      switch(i)
   \   000039   EE           MOV     A,R6
   \   00003A   6005         JZ      ??Timer3_uSec_1
   \   00003C   14           DEC     A
   \   00003D   6007         JZ      ??Timer3_uSec_2
   \   00003F   8008         SJMP    ??Timer3_uSec_3
    360                      {
    361                      case 0:
    362                        MOTOR_STEP_1 ^= 1;
   \                     ??Timer3_uSec_1:
   \   000041   638020       XRL     0x80,#0x20
    363                        break;
   \   000044   8003         SJMP    ??Timer3_uSec_3
    364                      case 1:
    365                        MOTOR_STEP_2 ^= 1;
   \                     ??Timer3_uSec_2:
   \   000046   638080       XRL     0x80,#0x80
    366                        break;
    367                      }
    368                      motorTimeout[i] = MotorControl[i].velocity[MotorControl[i].status];
   \                     ??Timer3_uSec_3:
   \   000049   8E82         MOV     DPL,R6
   \   00004B   A882         MOV     R0,DPL
   \   00004D   E8           MOV     A,R0
   \   00004E   75F017       MOV     B,#0x17
   \   000051   A4           MUL     AB
   \   000052   FA           MOV     R2,A
   \   000053   ABF0         MOV     R3,B
   \   000055   74..         MOV     A,#MotorControl & 0xff
   \   000057   2A           ADD     A,R2
   \   000058   FA           MOV     R2,A
   \   000059   74..         MOV     A,#(MotorControl >> 8) & 0xff
   \   00005B   3B           ADDC    A,R3
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   ?Subroutine2 & 0xFFFF
    369                  }
    370              }
   \                     ??CrossCallReturnLabel_24:
   \   000060   0E           INC     R6
   \   000061   EE           MOV     A,R6
   \   000062   C3           CLR     C
   \   000063   9402         SUBB    A,#0x2
   \   000065   40A0         JC      ??Timer3_uSec_0
    371          }
   \   000067   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   00006A                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F9           MOV     R1,A
   \   000008   E8           MOV     A,R0
   \   000009   49           ORL     A,R1
   \   00000A   22           RET
    372          
    373          
    374          // Whether all of motor is stop: 1 -> yes

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    375          uint8 MotorDone(void)
   \                     MotorDone:
    376          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    377              char i=0;
   \   000004   7A00         MOV     R2,#0x0
    378              for(i; i<MOTOR_NUM_MAX; i++)
                         ^
Warning[Pe174]: expression has no effect
    379              {
    380                  if(motorTimeout[i]!=0)    
   \                     ??MotorDone_0:
   \   000006   EA           MOV     A,R2
   \   000007   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00000A   6004         JZ      ??MotorDone_1
    381                  {
    382                    // if not 0 : running
    383                      return 0;   // not first
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   8009         SJMP    ??MotorDone_2
    384                  }
    385              }
   \                     ??MotorDone_1:
   \   000010   0A           INC     R2
   \   000011   EA           MOV     A,R2
   \   000012   C3           CLR     C
   \   000013   9402         SUBB    A,#0x2
   \   000015   40EF         JC      ??MotorDone_0
    386              // all is 0 : all is Stop
    387              return 1;
   \   000017   7901         MOV     R1,#0x1
   \                     ??MotorDone_2:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    388          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Motor_ClusterList>`:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Motor_SimpleDesc>`:
   \   000000   6E           DB 110
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW Motor_ClusterList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
   \   00000C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000014   00000000     DB 0, 0, 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Motor_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Motor_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Motor_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Motor_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MotorAction?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MotorAction

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MotorUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MotorUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Timer3_uSec?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Timer3_uSec

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MotorDone?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MotorDone

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     MotorAction                    1      0     50
       -> Num_Pos                   0      0     60
       -> mid                       0      0     68
       -> atoi                      0      0     60
       -> Locate_Pos                0      0     60
       -> mid                       0      0     68
       -> atoi                      0      0     60
       -> osal_stop_timerEx         0      0     60
       -> osal_set_event            0      0     60
       -> osal_stop_timerEx         0      0     60
       -> osal_set_event            0      0     60
     MotorDone                      2      0      9
     MotorUpdate                    0      0     23
       -> MotorDone                 0      0     18
       -> HalTimerStop              0      0     18
       -> MotorDone                 0      0     18
       -> HalTimerStart             0      0     18
       -> osal_start_timerEx        0      0     18
       -> osal_start_timerEx        0      0     18
     Motor_Init                     1      0      9
       -> afRegister                0      0     18
       -> ZDO_RegisterForZDOMsg     0      0     18
       -> HalTimerInit              0      0     18
       -> halTimerIntConnect        0      0     18
     Motor_ProcessEvent             0      0     16
       -> osal_msg_receive          0      0     28
       -> Sys_AllowBindConfirm      0      0     28
       -> osal_msg_deallocate       0      0     28
       -> osal_msg_receive          0      0     28
       -> MotorAction               0      0     32
       -> MotorUpdate               0      0     28
       -> MotorUpdate               0      0     28
     Timer3_uSec                    0      0      9


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     _A_P0                                   1
     P0SEL                                   1
     P0DIR                                   1
     Motor_TaskID                            1
     motorCnt                                1
     Motor_ClusterList                       6
     Motor_SimpleDesc                       24
     Motor_epDesc                           12
     Motor_DstAddr                          12
     MotorControl                           46
     motorTimeout                            4
     Motor_Init                            158
     ?Subroutine0                            5
     Motor_ProcessEvent                    187
     MotorAction                           401
     ?Subroutine6                           19
     ?Subroutine8                            3
     ??Subroutine12_0                        5
     ??Subroutine13_0                       17
     MotorUpdate                           198
     ?Subroutine7                            1
     ??Subroutine9_0                        17
     ?Subroutine5                            2
     ??Subroutine10_0                        3
     ??Subroutine11_0                        5
     ?Subroutine4                            1
     ?Subroutine1                           30
     ?Subroutine2                           10
     ??Subroutine14_0                       28
     Timer3_uSec                           106
     ?Subroutine3                           11
     MotorDone                              32
     ?<Initializer for Motor_ClusterList>    6
     ?<Initializer for Motor_SimpleDesc>    24
     ??Motor_Init?relay                      6
     ??Motor_ProcessEvent?relay              6
     ??MotorAction?relay                     6
     ??MotorUpdate?relay                     6
     ??Timer3_uSec?relay                     6
     ??MotorDone?relay                       6

 
 1 239 bytes in segment BANKED_CODE
    36 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
    30 bytes in segment XDATA_I
    30 bytes in segment XDATA_ID
    76 bytes in segment XDATA_Z
 
 1 305 bytes of CODE  memory
     0 bytes of DATA  memory (+ 3 bytes shared)
   106 bytes of XDATA memory

Errors: none
Warnings: 3
