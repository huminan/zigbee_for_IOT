###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         19/Apr/2018  22:11:29 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\Source\Switch_End.c                 #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\Source\Switc #
#                          h_End.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D     #
#                          REFLECTOR -D POWER_SAVING -D NV_INIT -D            #
#                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D            #
#                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC  #
#                          -lC D:\ProgramData\Hardware\zigbee\Projects\zstack #
#                          \Samples\SensorSys\CC2530DB\EndDeviceEB\List\ -lA  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\          #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e        #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 16 -I     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\Switch_En #
#                          d.lst                                              #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\Switch_End #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Switch_End.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include "sapi.h"
      7          
      8          #include "SensorSys_End.h"
      9          #include "device.h"
     10          #include "DebugTrace.h"
     11          
     12          #if !defined( WIN32 )
     13          	#include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     14          #endif
     15          
     16          /* HAL */
     17          #include "hal_led.h"
     18          #include "hal_key.h"
     19          #include "hal_uart.h"
     20          
     21          /*********************************************************************
     22           * MACROS
     23           */
     24          #define SW_UPDATE_EVT   0x5000
     25          
     26          // PORT NUMBERS
     27          #define P2_SWITCH_NUM       4
     28          /*********************************************************************
     29           * CONSTANTS
     30           */
     31          
     32          /*********************************************************************
     33           * TYPEDEFS
     34           */
     35          
     36          /*********************************************************************
     37           * GLOBAL VARIABLES
     38           */
     39          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          byte Switch_TaskID;
   \                     Switch_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          uint8 swCnt;
   \                     swCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     42          
     43          
     44          // Switch 端点的簇ID
     45          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     46          cId_t Switch_ClusterList[SWITCH_MAX_CLUSTERS] =
   \                     Switch_ClusterList:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for Switch_ClusterList>`
   \   000008                REQUIRE __INIT_XDATA_I
     47          {
     48              PORT_INIT_CLUSTER,
     49              OPERATE_CLUSTER,
     50              LOOP_OPERATE_CLUSTER,
     51              DELETE_CLUSTER
     52          };
     53          
     54          // Switch 端点简单描述符

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     55          SimpleDescriptionFormat_t *Switch_SimpleDesc[SWITCH_NUM_MAX];
   \                     Switch_SimpleDesc:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     56          endPointDesc_t *Switch_epDesc[SWITCH_NUM_MAX];
   \                     Switch_epDesc:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
     57          
     58          /*********************************************************************
     59           * EXTERNAL VARIABLES
     60           */
     61          extern uint8 myAppState;
     62          extern uint8 keys_shift;
     63          extern uint8 type_join;
     64          /*********************************************************************
     65           * EXTERNAL FUNCTIONS
     66           */
     67          
     68          /*********************************************************************
     69           * LOCAL VARIABLES
     70           */
     71          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          afAddrType_t Switch_DstAddr;
   \                     Switch_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          SensorControl_t SwitchControl[SWITCH_NUM_MAX]; 
   \                     SwitchControl:
   \   000000                DS 35
   \   000023                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8 swTimenow;
   \                     swTimenow:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     75          
     76          /*********************************************************************
     77           * LOCAL FUNCTIONS
     78           */
     79          void Switch_Init( byte task_id );
     80          UINT16 Switch_ProcessEvent( byte task_id, UINT16 events );
     81          
     82          static void Switch_ReceiveDataIndication( uint16 source, uint8 endPoint, 
     83                                        uint16 command, uint16 len, uint8 *pData  );
     84          static void Switch_AllowBindConfirm( uint16 source );
     85          static void SwitchAction( uint8 sw, uint16 command, uint16 len, uint8 *pData );
     86          static void SwitchUpdate(uint8 sw, uint8 first_boot);
     87          static void Send2Coor(uint8 dev_num, uint16 commandId, uint8 *pData);
     88          /*********************************************************************
     89           * @fn      Switch_Init
     90           *
     91           * @brief   Initialization function for the Generic App Task.
     92           *          This is called during initialization and should contain
     93           *          any application specific initialization (ie. hardware
     94           *          initialization/setup, table initialization, power up
     95           *          notificaiton ... ).
     96           *
     97           * @param   task_id - the ID assigned by OSAL.  This ID should be
     98           *                    used to send messages and set timers.
     99           *
    100           * @return  none
    101           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    102          void Switch_Init( byte task_id )
   \                     Switch_Init:
    103          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    104          	Switch_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Switch_TaskID
   \   000009   F0           MOVX    @DPTR,A
    105          //        SwitchControl = NULL;
    106          	// Device hardware initialization can be added here or in main() (Zmain.c).
    107          	// If the hardware is application specific - add it here.
    108          	// If the hardware is other parts of the device add it in main().
    109          
    110          	Switch_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#Switch_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    111          	Switch_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    112          	Switch_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#Switch_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    113           
    114          	//	ZDO_RegisterForZDOMsg( Switch_TaskID, End_Device_Bind_rsp );
    115          	ZDO_RegisterForZDOMsg( Switch_TaskID, Match_Desc_rsp );
   \   000017                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000017   7A06         MOV     R2,#0x6
   \   000019   7B80         MOV     R3,#-0x80
   \   00001B   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    116          }
   \   00001E   7F01         MOV     R7,#0x1
   \   000020   02....       LJMP    ?BANKED_LEAVE_XDATA
    117          
    118          /*********************************************************************
    119           * @fn      Switch_ProcessEvent
    120           *
    121           * @brief   Generic Application Task event processor.  This function
    122           *          is called to process all events for the task.  Events
    123           *          include timers, messages and any other user defined events.
    124           *
    125           * @param   task_id  - The OSAL assigned task ID.
    126           * @param   events - events to process.  This is a bit map and can
    127           *                   contain more than one event.
    128           *
    129           * @return  none
    130           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    131          UINT16 Switch_ProcessEvent( byte task_id, UINT16 events )
   \                     Switch_ProcessEvent:
    132          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    133              afIncomingMSGPacket_t *MSGpkt = NULL;
    134              (void)task_id;  // Intentionally unreferenced parameter
    135          
    136              if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??Switch_ProcessEvent_0 & 0xFFFF
    137              {
    138                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   801C         SJMP    ??Switch_ProcessEvent_1
    139                  while ( MSGpkt )
    140                  {
    141                    switch ( MSGpkt->hdr.event )
    142                    {
    143                      case AF_INCOMING_MSG_CMD:
    144                          Switch_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
    145                                                  MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
    146                          break;
    147                        
    148                      case ZDO_MATCH_DESC_RSP_SENT:
    149                          Switch_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
   \                     ??Switch_ProcessEvent_2:
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FA           MOV     R2,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FB           MOV     R3,A
   \   000019   90....       MOV     DPTR,#swCnt
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   04           INC     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F                ; Setup parameters for call to function Sys_AllowBindConfirm
   \   00001F   12....       LCALL   ??Sys_AllowBindConfirm?relay
    150                          break;
    151                    }
    152                    // Release the memory
    153                    osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Switch_ProcessEvent_3:
   \   000022                ; Setup parameters for call to function osal_msg_deallocate
   \   000022   AA..         MOV     R2,?V0 + 0
   \   000024   AB..         MOV     R3,?V0 + 1
   \   000026   12....       LCALL   ??osal_msg_deallocate?relay
    154              
    155                    // Next
    156                    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Switch_TaskID );
   \   000029                ; Setup parameters for call to function osal_msg_receive
   \   000029   90....       MOV     DPTR,#Switch_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \                     ??Switch_ProcessEvent_1:
   \   00002E   12....       LCALL   ??osal_msg_receive?relay
   \   000031   8A..         MOV     ?V0 + 0,R2
   \   000033   8B..         MOV     ?V0 + 1,R3
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   45..         ORL     A,?V0 + 1
   \   000039   605A         JZ      ??Switch_ProcessEvent_4
   \   00003B   85..82       MOV     DPL,?V0 + 0
   \   00003E   85..83       MOV     DPH,?V0 + 1
   \   000041   E0           MOVX    A,@DPTR
   \   000042   24E6         ADD     A,#-0x1a
   \   000044   6006         JZ      ??Switch_ProcessEvent_5
   \   000046   2448         ADD     A,#0x48
   \   000048   60C8         JZ      ??Switch_ProcessEvent_2
   \   00004A   80D6         SJMP    ??Switch_ProcessEvent_3
   \                     ??Switch_ProcessEvent_5:
   \   00004C                ; Setup parameters for call to function SwitchAction
   \   00004C   E5..         MOV     A,?V0 + 0
   \   00004E   2422         ADD     A,#0x22
   \   000050   F582         MOV     DPL,A
   \   000052   E5..         MOV     A,?V0 + 1
   \   000054   3400         ADDC    A,#0x0
   \   000056   F583         MOV     DPH,A
   \   000058   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005B   E5..         MOV     A,?V0 + 0
   \   00005D   2420         ADD     A,#0x20
   \   00005F   F582         MOV     DPL,A
   \   000061   E5..         MOV     A,?V0 + 1
   \   000063   3400         ADDC    A,#0x0
   \   000065   F583         MOV     DPH,A
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FC           MOV     R4,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FD           MOV     R5,A
   \   00006C   85..82       MOV     DPL,?V0 + 0
   \   00006F   85..83       MOV     DPH,?V0 + 1
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FA           MOV     R2,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FB           MOV     R3,A
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   2414         ADD     A,#0x14
   \   00007F   F582         MOV     DPL,A
   \   000081   E5..         MOV     A,?V0 + 1
   \   000083   3400         ADDC    A,#0x0
   \   000085   F583         MOV     DPH,A
   \   000087   E0           MOVX    A,@DPTR
   \   000088   24C4         ADD     A,#-0x3c
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ??SwitchAction?relay
   \   00008E   7402         MOV     A,#0x2
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   808D         SJMP    ??Switch_ProcessEvent_3
    157                  }
    158                  return (events ^ SYS_EVENT_MSG);
   \                     ??Switch_ProcessEvent_4:
   \   000095   EE           MOV     A,R6
   \   000096   FA           MOV     R2,A
   \   000097   EF           MOV     A,R7
   \   000098   6480         XRL     A,#0x80
   \   00009A   FB           MOV     R3,A
   \   00009B   02....       LJMP    ??Switch_ProcessEvent_6 & 0xFFFF
    159              }
    160              if( (events & 0xFF00) & SW_UPDATE_EVT )
   \                     ??Switch_ProcessEvent_0:
   \   00009E   EF           MOV     A,R7
   \   00009F   5450         ANL     A,#0x50
   \   0000A1   7003         JNZ     $+5
   \   0000A3   02....       LJMP    ??Switch_ProcessEvent_7 & 0xFFFF
    161              {
    162                  uint8 sw;
    163                  sw = (uint8)(events);
   \   0000A6   EE           MOV     A,R6
   \   0000A7   FC           MOV     R4,A
    164                  uint8 status_m;
    165                  status_m = SwitchControl[sw].status;
   \   0000A8   75F007       MOV     B,#0x7
   \   0000AB   A4           MUL     AB
   \   0000AC   F8           MOV     R0,A
   \   0000AD   A9F0         MOV     R1,B
   \   0000AF   74..         MOV     A,#SwitchControl & 0xff
   \   0000B1   28           ADD     A,R0
   \   0000B2   F5..         MOV     ?V0 + 2,A
   \   0000B4   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   0000B6   39           ADDC    A,R1
   \   0000B7   F5..         MOV     ?V0 + 3,A
   \   0000B9   85..82       MOV     DPL,?V0 + 2
   \   0000BC   F583         MOV     DPH,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   FD           MOV     R5,A
    166                  if(SwitchControl[sw].msg[status_m].hour)
   \   0000C3   75F006       MOV     B,#0x6
   \   0000C6   A4           MUL     AB
   \   0000C7   F8           MOV     R0,A
   \   0000C8   A9F0         MOV     R1,B
   \   0000CA   85..82       MOV     DPL,?V0 + 2
   \   0000CD   85..83       MOV     DPH,?V0 + 3
   \   0000D0   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   6023         JZ      ??Switch_ProcessEvent_8
    167                  {
    168                      if(SwitchControl[sw].msg[status_m].min == 0)
   \   0000D6   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000D9   7019         JNZ     ??Switch_ProcessEvent_9
    169                      {
    170                          (SwitchControl[sw].msg[status_m].hour)--;
   \   0000DB   ED           MOV     A,R5
   \   0000DC   75F006       MOV     B,#0x6
   \   0000DF   A4           MUL     AB
   \   0000E0   F5..         MOV     ?V0 + 0,A
   \   0000E2   E5F0         MOV     A,B
   \   0000E4   F5..         MOV     ?V0 + 1,A
   \   0000E6   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   14           DEC     A
   \   0000EB   F0           MOVX    @DPTR,A
    171                          SwitchControl[sw].msg[status_m].min = 59;
   \   0000EC   12....       LCALL   ?Subroutine4 & 0xFFFF
    172                      }
   \                     ??CrossCallReturnLabel_9:
   \   0000EF   A3           INC     DPTR
   \   0000F0   743B         MOV     A,#0x3b
   \   0000F2   8057         SJMP    ??CrossCallReturnLabel_5
    173                      else
    174                        (SwitchControl[sw].msg[status_m].min)--;
   \                     ??Switch_ProcessEvent_9:
   \   0000F4   12....       LCALL   ?Subroutine2 & 0xFFFF
    175                      osal_start_timerEx(Switch_TaskID, events, 60000); // calc 1min
    176                  }
   \                     ??CrossCallReturnLabel_4:
   \   0000F7   8052         SJMP    ??CrossCallReturnLabel_5
   \   0000F9                ; Setup parameters for call to function osal_start_timerEx
    177                  else
    178                  {
    179                      if(SwitchControl[sw].msg[status_m].min == 0)
   \                     ??Switch_ProcessEvent_8:
   \   0000F9   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000FC   704A         JNZ     ??Switch_ProcessEvent_10
    180                      {
    181                          if(SwitchControl[sw].msg[status_m].sec == 0)
   \   0000FE   EC           MOV     A,R4
   \   0000FF   75F007       MOV     B,#0x7
   \   000102   A4           MUL     AB
   \   000103   FA           MOV     R2,A
   \   000104   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000107   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   7009         JNZ     ??Switch_ProcessEvent_11
    182                              SwitchUpdate(sw,0);
   \   00010F                ; Setup parameters for call to function SwitchUpdate
   \   00010F   7A00         MOV     R2,#0x0
   \   000111   EC           MOV     A,R4
   \   000112   F9           MOV     R1,A
   \   000113   12....       LCALL   ??SwitchUpdate?relay
   \   000116   8044         SJMP    ??Switch_ProcessEvent_7
    183                          else
    184                          {
    185                              osal_start_timerEx(Switch_TaskID, events, (SwitchControl[sw].msg[status_m].sec)*1000);
   \                     ??Switch_ProcessEvent_11:
   \   000118   ED           MOV     A,R5
   \   000119   75F006       MOV     B,#0x6
   \   00011C   A4           MUL     AB
   \   00011D   F5..         MOV     ?V0 + 0,A
   \   00011F   E5F0         MOV     A,B
   \   000121   F5..         MOV     ?V0 + 1,A
   \   000123                ; Setup parameters for call to function osal_start_timerEx
   \   000123   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000126   E0           MOVX    A,@DPTR
   \   000127   FC           MOV     R4,A
   \   000128   75F0E8       MOV     B,#-0x18
   \   00012B   A4           MUL     AB
   \   00012C   CC           XCH     A,R4
   \   00012D   A8F0         MOV     R0,B
   \   00012F   75F003       MOV     B,#0x3
   \   000132   A4           MUL     AB
   \   000133   28           ADD     A,R0
   \   000134   FD           MOV     R5,A
   \   000135   EE           MOV     A,R6
   \   000136   FA           MOV     R2,A
   \   000137   EF           MOV     A,R7
   \   000138   FB           MOV     R3,A
   \   000139   90....       MOV     DPTR,#Switch_TaskID
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   F9           MOV     R1,A
   \   00013E   12....       LCALL   ??osal_start_timerEx?relay
    186                              SwitchControl[sw].msg[status_m].sec = 0;
   \   000141   12....       LCALL   ?Subroutine1 & 0xFFFF
    187                          }
    188                      }
   \                     ??CrossCallReturnLabel_3:
   \   000144   E4           CLR     A
   \   000145   F0           MOVX    @DPTR,A
   \   000146   8014         SJMP    ??Switch_ProcessEvent_7
    189                      else
    190                      {
    191                        (SwitchControl[sw].msg[status_m].min)--;
   \                     ??Switch_ProcessEvent_10:
   \   000148   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00014B   F0           MOVX    @DPTR,A
    192                        osal_start_timerEx(Switch_TaskID, events, 60000); // calc 1min
   \   00014C                ; Setup parameters for call to function osal_start_timerEx
   \   00014C   7C60         MOV     R4,#0x60
   \   00014E   7DEA         MOV     R5,#-0x16
   \   000150   EE           MOV     A,R6
   \   000151   FA           MOV     R2,A
   \   000152   EF           MOV     A,R7
   \   000153   FB           MOV     R3,A
   \   000154   90....       MOV     DPTR,#Switch_TaskID
   \   000157   E0           MOVX    A,@DPTR
   \   000158   F9           MOV     R1,A
   \   000159   12....       LCALL   ??osal_start_timerEx?relay
    193                      }
    194                  }
    195                  return (events ^ events);
   \                     ??Switch_ProcessEvent_7:
   \   00015C   7A00         MOV     R2,#0x0
   \   00015E   7B00         MOV     R3,#0x0
   \                     ??Switch_ProcessEvent_6:
   \   000160   7F05         MOV     R7,#0x5
   \   000162   02....       LJMP    ?BANKED_LEAVE_XDATA
    196              }
    197              
    198              return 0;
    199          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   25..         ADD     A,?V0 + 0
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   35..         ADDC    A,?V0 + 1
   \   00000E   8882         MOV     DPL,R0
   \   000010   F583         MOV     DPH,A
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EC           MOV     A,R4
   \   000001   75F007       MOV     B,#0x7
   \   000004   A4           MUL     AB
   \   000005   FA           MOV     R2,A
   \   000006   85F0..       MOV     ?V0 + 0,B
   \   000009   AB..         MOV     R3,?V0 + 0
   \   00000B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000003   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   EC           MOV     A,R4
   \   000001   75F007       MOV     B,#0x7
   \   000004   A4           MUL     AB
   \   000005   FA           MOV     R2,A
   \   000006   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000009   14           DEC     A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   74..         MOV     A,#SwitchControl & 0xff
   \   000002   2A           ADD     A,R2
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   000007   3B           ADDC    A,R3
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   8A82         MOV     DPL,R2
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET
    200          
    201          /******************************************************************************
    202           * @fn          Switch_ReceiveDataIndication
    203           *
    204           * @brief       The SAPI_ReceiveDataIndication callback function is called
    205           *              asynchronously by the ZigBee stack to notify the application
    206           *              when data is received from a peer device.
    207           *
    208           * @param       source - The short address of the peer device that sent the data
    209           *              command - The commandId associated with the data
    210           *              len - The number of bytes in the pData parameter
    211           *              pData - The data sent by the peer device
    212           *
    213           * @return      none
    214           */
    215          void Switch_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
    216          {
    217               SwitchAction(endPoint-SWITCH_ENDPOINT, command, len, pData);
    218          }
    219          
    220          /******************************************************************************
    221           * @fn          SwitchAction
    222           *
    223           * @brief       Switch Action Decide
    224           *
    225           * @param
    226           *
    227           * @return      none
    228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    229          void SwitchAction( uint8 sw, uint16 command, uint16 len, uint8 *pData )
   \                     SwitchAction:
    230          {
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   7411         MOV     A,#0x11
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FF           MOV     R7,A
    231            if(command == PORT_INIT_CLUSTER)
   \   000015   7401         MOV     A,#0x1
   \   000017   65..         XRL     A,?V0 + 0
   \   000019   7001         JNZ     ??SwitchAction_0
   \   00001B   EB           MOV     A,R3
   \                     ??SwitchAction_0:
   \   00001C   7053         JNZ     ??SwitchAction_1
    232            {
    233              uint8 port;
    234              port = *pData;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
    235              
    236            //  P2: 1 2 3 4 ; P1: 2 3 4 5 6 7
    237            //-----------------------------------
    238            //port: 0 1 2 3       4 5 6 7 8 9
    239              if(port < SWITCH_NUM_MAX)
   \   000024   C3           CLR     C
   \   000025   9405         SUBB    A,#0x5
   \   000027   4003         JC      $+5
   \   000029   02....       LJMP    ??SwitchAction_2 & 0xFFFF
    240              {
    241                  if(port < P2_SWITCH_NUM)
   \   00002C   E9           MOV     A,R1
   \   00002D   C3           CLR     C
   \   00002E   9404         SUBB    A,#0x4
   \   000030   75..01       MOV     ?V0 + 0,#0x1
   \   000033   75..00       MOV     ?V0 + 1,#0x0
   \   000036   5013         JNC     ??SwitchAction_3
    242                  {
    243                      P2SEL &= ~(0x01 << (port + 1));
   \   000038   7401         MOV     A,#0x1
   \   00003A   29           ADD     A,R1
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?S_SHL
   \   000040   A8..         MOV     R0,?V0 + 0
   \   000042   E8           MOV     A,R0
   \   000043   F4           CPL     A
   \   000044   52F5         ANL     0xf5,A
    244                      P2DIR |= 0x01 << (port+1);
   \   000046   E8           MOV     A,R0
   \   000047   42FF         ORL     0xff,A
   \   000049   8011         SJMP    ??SwitchAction_4
    245                  }
    246                  else
    247                  {
    248                      P1SEL &= ~(0x01 << (port - 2));
   \                     ??SwitchAction_3:
   \   00004B   74FE         MOV     A,#-0x2
   \   00004D   29           ADD     A,R1
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?S_SHL
   \   000053   A8..         MOV     R0,?V0 + 0
   \   000055   E8           MOV     A,R0
   \   000056   F4           CPL     A
   \   000057   52F4         ANL     0xf4,A
    249                      P1DIR |= 0x01 << (port - 2);
   \   000059   E8           MOV     A,R0
   \   00005A   42FE         ORL     0xfe,A
    250                  }
    251                  SwitchControl[sw].port = port;
   \                     ??SwitchAction_4:
   \   00005C   E9           MOV     A,R1
   \   00005D   C0E0         PUSH    A
   \   00005F   E5..         MOV     A,?V0 + 2
   \   000061   75F007       MOV     B,#0x7
   \   000064   A4           MUL     AB
   \   000065   F8           MOV     R0,A
   \   000066   A9F0         MOV     R1,B
   \   000068   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
    252                  return;
   \   00006E   02....       LJMP    ??SwitchAction_2 & 0xFFFF
    253              }
    254              else
    255              {
    256                  // send error back
    257                  return;
    258              }
    259            }
    260            
    261            
    262            if(sw>=SWITCH_NUM_MAX)return;   // data error
   \                     ??SwitchAction_1:
   \   000071   E9           MOV     A,R1
   \   000072   C3           CLR     C
   \   000073   9405         SUBB    A,#0x5
   \   000075   4003         JC      $+5
   \   000077   02....       LJMP    ??SwitchAction_2 & 0xFFFF
    263            if( len % OPERATE_MSG_NUM )return;  // data error: Must be 6 data each group
   \   00007A   EC           MOV     A,R4
   \   00007B   F8           MOV     R0,A
   \   00007C   ED           MOV     A,R5
   \   00007D   F9           MOV     R1,A
   \   00007E   7A06         MOV     R2,#0x6
   \   000080   7B00         MOV     R3,#0x0
   \   000082   12....       LCALL   ?US_DIV_MOD
   \   000085   8B..         MOV     ?V0 + 5,R3
   \   000087   EA           MOV     A,R2
   \   000088   45..         ORL     A,?V0 + 5
   \   00008A   6003         JZ      $+5
   \   00008C   02....       LJMP    ??SwitchAction_2 & 0xFFFF
    264          
    265            uint16 len_t;
    266            sensor_msg_t *msg_t = NULL;
    267            len_t = len/OPERATE_MSG_NUM;
   \   00008F   EC           MOV     A,R4
   \   000090   F8           MOV     R0,A
   \   000091   ED           MOV     A,R5
   \   000092   F9           MOV     R1,A
   \   000093   7A06         MOV     R2,#0x6
   \   000095   7B00         MOV     R3,#0x0
   \   000097   12....       LCALL   ?US_DIV_MOD
   \   00009A   88..         MOV     ?V0 + 4,R0
   \   00009C   89..         MOV     ?V0 + 5,R1
    268            msg_t = (sensor_msg_t *)osal_mem_alloc(sizeof(sensor_msg_t) * len_t);
   \   00009E                ; Setup parameters for call to function osal_mem_alloc
   \   00009E   E8           MOV     A,R0
   \   00009F   75F006       MOV     B,#0x6
   \   0000A2   A4           MUL     AB
   \   0000A3   FA           MOV     R2,A
   \   0000A4   A8F0         MOV     R0,B
   \   0000A6   75F006       MOV     B,#0x6
   \   0000A9   E9           MOV     A,R1
   \   0000AA   A4           MUL     AB
   \   0000AB   28           ADD     A,R0
   \   0000AC   FB           MOV     R3,A
   \   0000AD   12....       LCALL   ??osal_mem_alloc?relay
    269            uint8 i;
    270            for(i=0; i<len_t; i++)
   \   0000B0   75..00       MOV     ?V0 + 3,#0x0
   \   0000B3   803A         SJMP    ??SwitchAction_5
    271            {    
    272                if(pData[i*OPERATE_MSG_NUM] > 1)      // ON/OFF
    273                  msg_t[i].value = 1;
    274                else
    275                  msg_t[i].value = 0;
   \                     ??SwitchAction_6:
   \   0000B5   28           ADD     A,R0
   \   0000B6   F582         MOV     DPL,A
   \   0000B8   EB           MOV     A,R3
   \   0000B9   39           ADDC    A,R1
   \   0000BA   F583         MOV     DPH,A
   \   0000BC   E4           CLR     A
   \                     ??SwitchAction_7:
   \   0000BD   F0           MOVX    @DPTR,A
    276                msg_t[i].level = pData[i*OPERATE_MSG_NUM+1];   // NO USE
   \   0000BE   EA           MOV     A,R2
   \   0000BF   28           ADD     A,R0
   \   0000C0   FC           MOV     R4,A
   \   0000C1   EB           MOV     A,R3
   \   0000C2   39           ADDC    A,R1
   \   0000C3   FD           MOV     R5,A
   \   0000C4   EE           MOV     A,R6
   \   0000C5   28           ADD     A,R0
   \   0000C6   F8           MOV     R0,A
   \   0000C7   EF           MOV     A,R7
   \   0000C8   39           ADDC    A,R1
   \   0000C9   F9           MOV     R1,A
   \   0000CA   8882         MOV     DPL,R0
   \   0000CC   8983         MOV     DPH,R1
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   8C82         MOV     DPL,R4
   \   0000D2   8D83         MOV     DPH,R5
   \   0000D4   A3           INC     DPTR
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E4           CLR     A
   \   0000D8   12....       LCALL   ?Subroutine7 & 0xFFFF
    277                msg_t[i].hour = pData[i*OPERATE_MSG_NUM+3];
   \                     ??CrossCallReturnLabel_14:
   \   0000DB   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000DE   12....       LCALL   ?Subroutine7 & 0xFFFF
    278                msg_t[i].min = pData[i*OPERATE_MSG_NUM+4];
   \                     ??CrossCallReturnLabel_15:
   \   0000E1   A3           INC     DPTR
   \   0000E2   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000E5   12....       LCALL   ?Subroutine6 & 0xFFFF
    279                msg_t[i].sec = pData[i*OPERATE_MSG_NUM+5];
   \                     ??CrossCallReturnLabel_12:
   \   0000E8   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000EB   A3           INC     DPTR
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   05..         INC     ?V0 + 3
   \                     ??SwitchAction_5:
   \   0000EF   85....       MOV     ?V0 + 6,?V0 + 3
   \   0000F2   C3           CLR     C
   \   0000F3   E5..         MOV     A,?V0 + 6
   \   0000F5   95..         SUBB    A,?V0 + 4
   \   0000F7   E4           CLR     A
   \   0000F8   95..         SUBB    A,?V0 + 5
   \   0000FA   5023         JNC     ??SwitchAction_8
   \   0000FC   E5..         MOV     A,?V0 + 3
   \   0000FE   75F006       MOV     B,#0x6
   \   000101   A4           MUL     AB
   \   000102   F8           MOV     R0,A
   \   000103   A9F0         MOV     R1,B
   \   000105   EE           MOV     A,R6
   \   000106   28           ADD     A,R0
   \   000107   F582         MOV     DPL,A
   \   000109   EF           MOV     A,R7
   \   00010A   39           ADDC    A,R1
   \   00010B   F583         MOV     DPH,A
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   C3           CLR     C
   \   00010F   9402         SUBB    A,#0x2
   \   000111   EA           MOV     A,R2
   \   000112   40A1         JC      ??SwitchAction_6
   \   000114   28           ADD     A,R0
   \   000115   F582         MOV     DPL,A
   \   000117   EB           MOV     A,R3
   \   000118   39           ADDC    A,R1
   \   000119   F583         MOV     DPH,A
   \   00011B   7401         MOV     A,#0x1
   \   00011D   809E         SJMP    ??SwitchAction_7
    280            }
    281            SwitchControl[sw].msg = msg_t;
   \                     ??SwitchAction_8:
   \   00011F   85..82       MOV     DPL,?V0 + 2
   \   000122   AE82         MOV     R6,DPL
   \   000124   EE           MOV     A,R6
   \   000125   75F007       MOV     B,#0x7
   \   000128   A4           MUL     AB
   \   000129   F8           MOV     R0,A
   \   00012A   A9F0         MOV     R1,B
   \   00012C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00012F   EA           MOV     A,R2
   \   000130   F0           MOVX    @DPTR,A
   \   000131   A3           INC     DPTR
   \   000132   EB           MOV     A,R3
   \   000133   F0           MOVX    @DPTR,A
    282            SwitchControl[sw].total = len_t;
   \   000134   8882         MOV     DPL,R0
   \   000136   8983         MOV     DPH,R1
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   E5..         MOV     A,?V0 + 4
   \   00013C   12....       LCALL   ?Subroutine7 & 0xFFFF
    283            SwitchControl[sw].status = 0;
   \                     ??CrossCallReturnLabel_16:
   \   00013F   E4           CLR     A
   \   000140   12....       LCALL   ?Subroutine6 & 0xFFFF
    284            SwitchControl[sw].command = command;
   \                     ??CrossCallReturnLabel_13:
   \   000143   E5..         MOV     A,?V0 + 0
   \   000145   F0           MOVX    @DPTR,A
   \   000146   A3           INC     DPTR
   \   000147   E5..         MOV     A,?V0 + 1
   \   000149   F0           MOVX    @DPTR,A
    285            osal_mem_free(msg_t);
   \   00014A                ; Setup parameters for call to function osal_mem_free
   \   00014A   12....       LCALL   ??osal_mem_free?relay
    286              uint16 event_t;
    287              event_t = SW_UPDATE_EVT | sw;       // 0x5000 | 0x00??
    288            
    289              osal_stop_timerEx(Switch_TaskID, event_t);
   \   00014D                ; Setup parameters for call to function osal_stop_timerEx
   \   00014D   EE           MOV     A,R6
   \   00014E   FA           MOV     R2,A
   \   00014F   7B50         MOV     R3,#0x50
   \   000151   90....       MOV     DPTR,#Switch_TaskID
   \   000154   E0           MOVX    A,@DPTR
   \   000155   F9           MOV     R1,A
   \   000156   12....       LCALL   ??osal_stop_timerEx?relay
    290              SwitchUpdate(sw,1);
   \   000159                ; Setup parameters for call to function SwitchUpdate
   \   000159   7A01         MOV     R2,#0x1
   \   00015B   A9..         MOV     R1,?V0 + 2
   \   00015D   12....       LCALL   ??SwitchUpdate?relay
    291          }
   \                     ??SwitchAction_2:
   \   000160   7F09         MOV     R7,#0x9
   \   000162   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000165                REQUIRE P2SEL
   \   000165                REQUIRE P2DIR
   \   000165                REQUIRE P1SEL
   \   000165                REQUIRE P1DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   74..         MOV     A,#(SwitchControl + 4) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((SwitchControl + 4) >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   74..         MOV     A,#SwitchControl & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F8           MOV     R0,A
   \   000004   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   000006   39           ADDC    A,R1
   \   000007   F9           MOV     R1,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET
    292          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    293          void SwitchUpdate(uint8 sw, uint8 first_boot)
   \                     SwitchUpdate:
    294          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EF           MOV     A,R7
   \   00000A   75F007       MOV     B,#0x7
   \   00000D   A4           MUL     AB
   \   00000E   F8           MOV     R0,A
   \   00000F   AAF0         MOV     R2,B
   \   000011   EA           MOV     A,R2
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FB           MOV     R3,A
    295              uint8 status_m;
    296              status_m = SwitchControl[sw].status;
    297              if(status_m == (SwitchControl[sw].total)-1)
   \   00001B   8B..         MOV     ?V0 + 0,R3
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   24FF         ADD     A,#-0x1
   \   000026   F8           MOV     R0,A
   \   000027   E4           CLR     A
   \   000028   34FF         ADDC    A,#-0x1
   \   00002A   F9           MOV     R1,A
   \   00002B   E8           MOV     A,R0
   \   00002C   65..         XRL     A,?V0 + 0
   \   00002E   7001         JNZ     ??SwitchUpdate_0
   \   000030   E9           MOV     A,R1
   \                     ??SwitchUpdate_0:
   \   000031   7038         JNZ     ??SwitchUpdate_1
    298              {
    299                  if(SwitchControl[sw].command == LOOP_OPERATE_CLUSTER)
   \   000033   EF           MOV     A,R7
   \   000034   75F007       MOV     B,#0x7
   \   000037   A4           MUL     AB
   \   000038   F8           MOV     R0,A
   \   000039   EA           MOV     A,R2
   \   00003A   F9           MOV     R1,A
   \   00003B   74..         MOV     A,#(SwitchControl + 5) & 0xff
   \   00003D   28           ADD     A,R0
   \   00003E   F582         MOV     DPL,A
   \   000040   74..         MOV     A,#((SwitchControl + 5) >> 8) & 0xff
   \   000042   39           ADDC    A,R1
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6403         XRL     A,#0x3
   \   000048   7002         JNZ     ??SwitchUpdate_2
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \                     ??SwitchUpdate_2:
   \   00004C   7009         JNZ     ??SwitchUpdate_3
    300                  {
    301                      SwitchControl[sw].status = 0x00;
   \   00004E   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000051   E4           CLR     A
   \   000052   F0           MOVX    @DPTR,A
    302                      status_m = 0xff;
   \   000053   7BFF         MOV     R3,#-0x1
   \   000055   802F         SJMP    ??SwitchUpdate_4
    303                  }
    304                  else
    305                  {
    306                      osal_mem_free(SwitchControl[sw].msg);
   \                     ??SwitchUpdate_3:
   \   000057                ; Setup parameters for call to function osal_mem_free
   \   000057   74..         MOV     A,#SwitchControl & 0xff
   \   000059   28           ADD     A,R0
   \   00005A   F582         MOV     DPL,A
   \   00005C   74..         MOV     A,#(SwitchControl >> 8) & 0xff
   \   00005E   39           ADDC    A,R1
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FA           MOV     R2,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   ??osal_mem_free?relay
    307                      return;
   \   000069   807F         SJMP    ??SwitchUpdate_5
    308                  }
    309              }
    310              else
    311              {
    312                if(!first_boot)
   \                     ??SwitchUpdate_1:
   \   00006B   EE           MOV     A,R6
   \   00006C   7018         JNZ     ??SwitchUpdate_4
    313                {
    314                    if(status_m == 0xff)
   \   00006E   74FF         MOV     A,#-0x1
   \   000070   6B           XRL     A,R3
   \   000071   7004         JNZ     ??SwitchUpdate_6
    315                    {
    316                      status_m = 0;
   \   000073   7B00         MOV     R3,#0x0
   \   000075   800F         SJMP    ??SwitchUpdate_4
    317                    }
    318                    else
    319                    {
    320                      (SwitchControl[sw].status)++;
   \                     ??SwitchUpdate_6:
   \   000077   EF           MOV     A,R7
   \   000078   75F007       MOV     B,#0x7
   \   00007B   A4           MUL     AB
   \   00007C   F8           MOV     R0,A
   \   00007D   EA           MOV     A,R2
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000082   E0           MOVX    A,@DPTR
   \   000083   04           INC     A
   \   000084   F0           MOVX    @DPTR,A
    321                      status_m++;
   \   000085   0B           INC     R3
    322                    }
    323                }
    324              }
    325              
    326              uint8 port;
    327              port = SwitchControl[sw].port;
   \                     ??SwitchUpdate_4:
   \   000086   EF           MOV     A,R7
   \   000087   75F007       MOV     B,#0x7
   \   00008A   A4           MUL     AB
   \   00008B   F8           MOV     R0,A
   \   00008C   EA           MOV     A,R2
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000091   E0           MOVX    A,@DPTR
   \   000092   FD           MOV     R5,A
    328              if( port < P2_SWITCH_NUM )
   \   000093   C3           CLR     C
   \   000094   9404         SUBB    A,#0x4
   \   000096   EB           MOV     A,R3
   \   000097   75F006       MOV     B,#0x6
   \   00009A   5022         JNC     ??SwitchUpdate_7
    329              {
    330                  if(SwitchControl[sw].msg[status_m].value)
   \   00009C   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00009F   600E         JZ      ??SwitchUpdate_8
    331                  {
    332                      P2 |= 0x01 << (port+1);
   \   0000A1   7401         MOV     A,#0x1
   \   0000A3   2D           ADD     A,R5
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?S_SHL
   \   0000A9   E5..         MOV     A,?V0 + 0
   \   0000AB   42A0         ORL     0xa0,A
   \   0000AD   802F         SJMP    ??SwitchUpdate_9
    333                  }
    334                  else
    335                  {
    336                      P2 &= ~(0x01 << (port+1));
   \                     ??SwitchUpdate_8:
   \   0000AF   7401         MOV     A,#0x1
   \   0000B1   2D           ADD     A,R5
   \   0000B2   78..         MOV     R0,#?V0 + 0
   \   0000B4   12....       LCALL   ?S_SHL
   \   0000B7   E5..         MOV     A,?V0 + 0
   \   0000B9   F4           CPL     A
   \   0000BA   52A0         ANL     0xa0,A
   \   0000BC   8020         SJMP    ??SwitchUpdate_9
    337                  }
    338              }
    339              else
    340              {
    341                  if(SwitchControl[sw].msg[status_m].value)
   \                     ??SwitchUpdate_7:
   \   0000BE   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000C1   600E         JZ      ??SwitchUpdate_10
    342                  {
    343                      P1 |= 0x01 << (port-2);
   \   0000C3   74FE         MOV     A,#-0x2
   \   0000C5   2D           ADD     A,R5
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?S_SHL
   \   0000CB   E5..         MOV     A,?V0 + 0
   \   0000CD   4290         ORL     0x90,A
   \   0000CF   800D         SJMP    ??SwitchUpdate_9
    344                  }
    345                  else
    346                  {
    347                      P1 &= ~(0x01 << (port-2));
   \                     ??SwitchUpdate_10:
   \   0000D1   74FE         MOV     A,#-0x2
   \   0000D3   2D           ADD     A,R5
   \   0000D4   78..         MOV     R0,#?V0 + 0
   \   0000D6   12....       LCALL   ?S_SHL
   \   0000D9   E5..         MOV     A,?V0 + 0
   \   0000DB   F4           CPL     A
   \   0000DC   5290         ANL     0x90,A
    348                  }
    349              }
    350              
    351              uint16 event_t;
    352              event_t = SW_UPDATE_EVT | sw;       // 0x5000 | 0x00??
    353              
    354              osal_set_event(Switch_TaskID, event_t);
   \                     ??SwitchUpdate_9:
   \   0000DE                ; Setup parameters for call to function osal_set_event
   \   0000DE   EF           MOV     A,R7
   \   0000DF   FA           MOV     R2,A
   \   0000E0   7B50         MOV     R3,#0x50
   \   0000E2   90....       MOV     DPTR,#Switch_TaskID
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   ??osal_set_event?relay
    355          }
   \                     ??SwitchUpdate_5:
   \   0000EA   7F02         MOV     R7,#0x2
   \   0000EC   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000EF                REQUIRE _A_P2
   \   0000EF                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   74..         MOV     A,#(SwitchControl + 3) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#((SwitchControl + 3) >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002   A9F0         MOV     R1,B
   \   000004   EF           MOV     A,R7
   \   000005   75F007       MOV     B,#0x7
   \   000008   A4           MUL     AB
   \   000009   FA           MOV     R2,A
   \   00000A   ABF0         MOV     R3,B
   \   00000C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00000F   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000012   E0           MOVX    A,@DPTR
   \   000013   75..01       MOV     ?V0 + 0,#0x1
   \   000016   75..00       MOV     ?V0 + 1,#0x0
   \   000019   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Switch_ClusterList>`:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Switch_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Switch_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Switch_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Switch_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SwitchAction?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SwitchAction

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SwitchUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SwitchUpdate
    356          
    357          
    358          /******************************************************************************
    359           * @fn          Switch_AllowBindConfirm
    360           *
    361           * @brief       Indicates when another device attempted to bind to this device
    362           *
    363           * @param
    364           *
    365           * @return      none
    366           */
    367          void Switch_AllowBindConfirm( uint16 source )
    368          {
    369               swCnt++;
    370               
    371               Sys_AllowBindConfirm(source);
    372          }
    373          
    374          void Send2Coor(uint8 dev_num, uint16 commandId, uint8 *pData)
    375          {
    376              Sys_SendDataRequest( 0xFFFE, Switch_epDesc[dev_num], commandId, (uint8)osal_strlen( pData ),
                                                                                                         ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

  void Send2Coor(uint8 dev_num, uint16 commandId, uint8 *pData)
       ^
"D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Switch_End.c",374  Warning[Pe177]: 
          function "Send2Coor" was declared but never referenced
    377                                     pData, sysSeqNumber, 0, 0 );
    378          }

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     SwitchAction                   1      0     32
       -> osal_mem_alloc            0      0     34
       -> osal_mem_free             0      0     34
       -> osal_stop_timerEx         0      0     34
       -> SwitchUpdate              0      0     34
     SwitchUpdate                   0      0     27
       -> osal_mem_free             0      0     20
       -> osal_set_event            0      0     20
     Switch_Init                    0      0      9
       -> ZDO_RegisterForZDOMsg     0      0     18
     Switch_ProcessEvent            0      0     15
       -> osal_msg_receive          0      0     26
       -> Sys_AllowBindConfirm      0      0     26
       -> osal_msg_deallocate       0      0     26
       -> osal_msg_receive          0      0     26
       -> SwitchAction              0      0     30
       -> osal_start_timerEx        0      0     26
       -> SwitchUpdate              0      0     26
       -> osal_start_timerEx        0      0     26
       -> osal_start_timerEx        0      0     26


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P1                                    1
     _A_P2                                    1
     P1SEL                                    1
     P2SEL                                    1
     P1DIR                                    1
     P2DIR                                    1
     Switch_TaskID                            1
     swCnt                                    1
     Switch_ClusterList                       8
     Switch_SimpleDesc                       10
     Switch_epDesc                           10
     Switch_DstAddr                          12
     SwitchControl                           35
     swTimenow                                1
     Switch_Init                             35
     Switch_ProcessEvent                    357
     ?Subroutine5                             7
     ?Subroutine4                             4
     ?Subroutine13                           22
     ?Subroutine3                            15
     ?Subroutine12                           12
     ?Subroutine2                            11
     ?Subroutine1                             6
     ?Subroutine17                            4
     ?Subroutine19                           11
     ?Subroutine14                            4
     ?Subroutine18                           11
     SwitchAction                           357
     ?Subroutine8                             5
     ?Subroutine16                            9
     ?Subroutine7                             4
     ?Subroutine15                            9
     ?Subroutine6                             6
     ?Subroutine10                           11
     ?Subroutine9                            13
     SwitchUpdate                           239
     ?Subroutine11                           11
     ?Subroutine0                            26
     ?<Initializer for Switch_ClusterList>    8
     ??Switch_Init?relay                      6
     ??Switch_ProcessEvent?relay              6
     ??SwitchAction?relay                     6
     ??SwitchUpdate?relay                     6

 
 1 189 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     6 bytes in segment SFR_AN
     8 bytes in segment XDATA_I
     8 bytes in segment XDATA_ID
    70 bytes in segment XDATA_Z
 
 1 221 bytes of CODE  memory
     0 bytes of DATA  memory (+ 6 bytes shared)
    78 bytes of XDATA memory

Errors: none
Warnings: 2
