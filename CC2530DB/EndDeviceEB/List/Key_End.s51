///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        19/Apr/2018  22:11:28 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\Source\Key_End.c                  /
//    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\Source\Key /
//                          _End.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D     /
//                          REFLECTOR -D POWER_SAVING -D NV_INIT -D           /
//                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D           /
//                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                  /
//                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\End /
//                          DeviceEB\List\ -lA D:\ProgramData\Hardware\zigbee /
//                          \Projects\zstack\Samples\SensorSys\CC2530DB\EndDe /
//                          viceEB\List\ --diag_suppress Pe001,Pa010 -o       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 -I D:\ProgramData\Hardware\zigbee\Projects\zst /
//                          ack\Samples\SensorSys\CC2530DB\ -I                /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\Source\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\ /
//                           -I D:\ProgramData\Hardware\zigbee\Projects\zstac /
//                          k\Samples\SensorSys\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\include\ -I D:\ProgramData\Hardware\zig /
//                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\ -I D:\ProgramData\Hardware\zigbee\ /
//                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\high_level\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\ -I                         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\ -I             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\ -I D:\ProgramData\Hardware\zigbee\Projects\ /
//                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\ /
//                          Components\osal\include\ -I                       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\ -I D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\ -I D:\ProgramData\Hardware\zigbee\Pro /
//                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\nwk\ -I                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\ -I D:\ProgramData\Hardware\zigbee\P /
//                          rojects\zstack\Samples\SensorSys\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\ -I D:\ProgramData\Hardware\zigbee\Pr /
//                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I D:\ProgramData\Hardware\zigbee\Project /
//                          s\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -Ohz --require_prototypes  /
//    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\Key_End /
//                          .s51                                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Key_End

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??KeyAction?relay,0203H
        PUBLIC ??KeySend2Coor?relay
        FUNCTION ??KeySend2Coor?relay,0203H
        PUBLIC ??Key_HandleKeys?relay
        FUNCTION ??Key_HandleKeys?relay,0203H
        PUBLIC ??Key_Init?relay
        FUNCTION ??Key_Init?relay,0203H
        PUBLIC ??Key_ProcessEvent?relay
        FUNCTION ??Key_ProcessEvent?relay,0203H
        FUNCTION KeyAction,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC KeyObserve
        PUBLIC KeySend2Coor
        FUNCTION KeySend2Coor,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC Key_ClusterList
        PUBLIC Key_DstAddr
        PUBLIC Key_HandleKeys
        FUNCTION Key_HandleKeys,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC Key_Init
        FUNCTION Key_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Key_ProcessEvent
        FUNCTION Key_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Key_SimpleDesc
        PUBLIC Key_TaskID
        PUBLIC Key_epDesc
        PUBWEAK P1DIR
        PUBWEAK P1IEN
        PUBWEAK P1IFG
        PUBWEAK P1SEL
        PUBWEAK P2DIR
        PUBWEAK P2IEN
        PUBWEAK P2IFG
        PUBWEAK P2SEL
        PUBWEAK PICTL
        PUBLIC keyCnt
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
RegisterForKeys     SYMBOL "RegisterForKeys"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
Sys_AllowBindConfirm SYMBOL "Sys_AllowBindConfirm"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
zb_SystemReset      SYMBOL "zb_SystemReset"
Sys_AllowBind       SYMBOL "Sys_AllowBind"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
osal_memcpy         SYMBOL "osal_memcpy"
afRegister          SYMBOL "afRegister"
ss_AddObserveList   SYMBOL "ss_AddObserveList"
osal_strlen         SYMBOL "osal_strlen"
Sys_SendDataRequest SYMBOL "Sys_SendDataRequest"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??Sys_AllowBind?relay SYMBOL "?relay", Sys_AllowBind
??Sys_AllowBindConfirm?relay SYMBOL "?relay", Sys_AllowBindConfirm
??Sys_SendDataRequest?relay SYMBOL "?relay", Sys_SendDataRequest
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_strlen?relay SYMBOL "?relay", osal_strlen
??ss_AddObserveList?relay SYMBOL "?relay", ss_AddObserveList
??zb_SystemReset?relay SYMBOL "?relay", zb_SystemReset
KeySend2Coor        SYMBOL "KeySend2Coor"
??KeySend2Coor?relay SYMBOL "?relay", KeySend2Coor
Key_HandleKeys      SYMBOL "Key_HandleKeys"
??Key_HandleKeys?relay SYMBOL "?relay", Key_HandleKeys
Key_Init            SYMBOL "Key_Init"
??Key_Init?relay    SYMBOL "?relay", Key_Init
Key_ProcessEvent    SYMBOL "Key_ProcessEvent"
??Key_ProcessEvent?relay SYMBOL "?relay", Key_ProcessEvent

        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_AllowBindConfirm
        FUNCTION Sys_AllowBindConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SystemReset
        FUNCTION zb_SystemReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_AllowBind
        FUNCTION Sys_AllowBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ss_AddObserveList
        FUNCTION ss_AddObserveList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_SendDataRequest
        FUNCTION Sys_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??Sys_AllowBind?relay
        FUNCTION ??Sys_AllowBind?relay,00H
        EXTERN ??Sys_AllowBindConfirm?relay
        FUNCTION ??Sys_AllowBindConfirm?relay,00H
        EXTERN ??Sys_SendDataRequest?relay
        FUNCTION ??Sys_SendDataRequest?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN ??ss_AddObserveList?relay
        FUNCTION ??ss_AddObserveList?relay,00H
        EXTERN ??zb_SystemReset?relay
        FUNCTION ??zb_SystemReset?relay,00H
        EXTERN Switch_ClusterList
        EXTERN Switch_SimpleDesc
        EXTERN Switch_TaskID
        EXTERN Switch_epDesc
        EXTERN keys_shift
        EXTERN swCnt
        EXTERN sysSeqNumber
        EXTERN type_join

// D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Key_End.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include "sapi.h"
//    7 
//    8 #include "SensorSys_End.h"
//    9 #include "device.h"
//   10 #include "SensorSys_Tools.h"
//   11 #include "DebugTrace.h"
//   12 
//   13 #if !defined( WIN32 )
//   14 	#include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,08aH
// unsigned char volatile __sfr P1IFG
P1IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr P2IFG
P2IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08dH
// unsigned char volatile __sfr P1IEN
P1IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0acH
// unsigned char volatile __sfr P2IEN
P2IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   15 #endif
//   16 
//   17 /* HAL */
//   18 #include "hal_led.h"
//   19 #include "hal_key.h"
//   20 #include "hal_uart.h"
//   21 
//   22 /*********************************************************************
//   23  * MACROS
//   24  */
//   25 #define KEY_TOGGLE_PORT_BIT    0
//   26 #define KEY_TOGGLE_EDGE_BIT    1
//   27 
//   28 // #define KEY_INIT_POS_PORT   0
//   29 // #define KEY_INIT_POS_TOGGLE 1
//   30 
//   31 /*********************************************************************
//   32  * CONSTANTS
//   33  */
//   34 
//   35 /*********************************************************************
//   36  * TYPEDEFS
//   37  */
//   38 
//   39 /*********************************************************************
//   40  * GLOBAL VARIABLES
//   41  */
//   42 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   43 uint8 keyCnt = 0;
keyCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant {10, 3844, 1, 0, 0, 4, (cId_t *)Key`:
        DS 12
        REQUIRE `?<Initializer for <Constant {10, 3844, 1, 0, 0`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
`?<Constant {60, 3844, 1, 0, 0, 4, Switch_Clust`:
        DS 12
        REQUIRE `?<Initializer for <Constant {60, 3844, 1, 0, 0`
        REQUIRE __INIT_XDATA_I
//   44 
//   45 
//   46 // Key 端点的簇ID
//   47 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
//   48 const cId_t Key_ClusterList[KEY_MAX_CLUSTERS] =
Key_ClusterList:
        DS 8
        REQUIRE `?<Initializer for Key_ClusterList>`
        REQUIRE __INIT_XDATA_I
//   49 {
//   50     PORT_INIT_CLUSTER,
//   51     TOGGLE_INIT_CLUSTER,
//   52     OPERATE_CLUSTER,
//   53     DELETE_CLUSTER
//   54 };
//   55 
//   56 // Key 端点简单描述符

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   57 SimpleDescriptionFormat_t *Key_SimpleDesc[KEY_NUM_MAX];
Key_SimpleDesc:
        DS 20
        REQUIRE __INIT_XDATA_Z
//   58 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   59 endPointDesc_t *Key_epDesc[KEY_NUM_MAX];
Key_epDesc:
        DS 20
        REQUIRE __INIT_XDATA_Z
//   60 
//   61 /*********************************************************************
//   62  * EXTERNAL VARIABLES
//   63  */
//   64 extern uint8 myAppState;
//   65 extern uint8 keys_shift;
//   66 extern uint8 type_join;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   67 SensorObserve_t *KeyObserve; 
KeyObserve:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   68 /*********************************************************************
//   69  * EXTERNAL FUNCTIONS
//   70  */
//   71 
//   72 /*********************************************************************
//   73  * LOCAL VARIABLES
//   74  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   75 byte Key_TaskID;
Key_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   76 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   77 afAddrType_t Key_DstAddr;
Key_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   78 
//   79 /*********************************************************************
//   80  * LOCAL FUNCTIONS
//   81  */
//   82 void Key_Init( byte task_id );
//   83 UINT16 Key_ProcessEvent( byte task_id, UINT16 events );
//   84 void Key_HandleKeys( byte shift, byte keys );
//   85 static void KeyAction( uint8 key, uint16 command, uint16 len, uint8 *pData );
//   86 
//   87 static void Key_ReceiveDataIndication( uint16 source, uint8 endPoint, 
//   88                               uint16 command, uint16 len, uint8 *pData  );
//   89 static void Key_AllowBindConfirm( uint16 source );
//   90 
//   91 /*********************************************************************
//   92  * EXTERNAL FUNCTIONS
//   93  */
//   94 void KeySend2Coor(uint8 dev_num, uint16 commandId, uint8 *pData);
//   95 
//   96 
//   97 /*********************************************************************
//   98  * @fn      Key_Init
//   99  *
//  100  * @brief   Initialization function for the Generic App Task.
//  101  *          This is called during initialization and should contain
//  102  *          any application specific initialization (ie. hardware
//  103  *          initialization/setup, table initialization, power up
//  104  *          notificaiton ... ).
//  105  *
//  106  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  107  *                    used to send messages and set timers.
//  108  *
//  109  * @return  none
//  110  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  111 void Key_Init( byte task_id )
Key_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Key_Init
        CODE
//  112 {
        FUNCALL Key_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  113 	Key_TaskID = task_id;
        MOV     DPTR,#Key_TaskID
        MOVX    @DPTR,A
//  114         KeyObserve = NULL;
        MOV     DPTR,#KeyObserve
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  115 	// Device hardware initialization can be added here or in main() (Zmain.c).
//  116 	// If the hardware is application specific - add it here.
//  117 	// If the hardware is other parts of the device add it in main().
//  118 
//  119 	Key_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#Key_DstAddr + 8
        MOVX    @DPTR,A
//  120 	Key_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  121 	Key_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#Key_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  122 
//  123         
//  124 	// Register for all key events - This app will handle all key events
//  125 	RegisterForKeys( Key_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        LCALL   ??RegisterForKeys?relay
//  126  
//  127 	//	ZDO_RegisterForZDOMsg( Key_TaskID, End_Device_Bind_rsp );
//  128 	ZDO_RegisterForZDOMsg( Key_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Key_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  129 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  130 
//  131 /*********************************************************************
//  132  * @fn      Key_ProcessEvent
//  133  *
//  134  * @brief   Generic Application Task event processor.  This function
//  135  *          is called to process all events for the task.  Events
//  136  *          include timers, messages and any other user defined events.
//  137  *
//  138  * @param   task_id  - The OSAL assigned task ID.
//  139  * @param   events - events to process.  This is a bit map and can
//  140  *                   contain more than one event.
//  141  *
//  142  * @return  none
//  143  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  144 UINT16 Key_ProcessEvent( byte task_id, UINT16 events )
Key_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Key_ProcessEvent
        CODE
//  145 {
        FUNCALL Key_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, Sys_AllowBindConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, Key_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, KeyAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  146     afIncomingMSGPacket_t *MSGpkt = NULL;
//  147     (void)task_id;  // Intentionally unreferenced parameter
//  148 
//  149     if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??Key_ProcessEvent_0 & 0xFFFF
//  150     {
//  151         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Key_ProcessEvent_1
//  152         while ( MSGpkt )
//  153         {
//  154           switch ( MSGpkt->hdr.event )
//  155           {
//  156             case KEY_CHANGE:
//  157                 Key_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  158                 break;
//  159         
//  160             case AF_INCOMING_MSG_CMD:
//  161                 Key_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
//  162                                         MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
//  163                 break;
//  164               
//  165             case ZDO_MATCH_DESC_RSP_SENT:
//  166                 Key_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
??Key_ProcessEvent_2:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_39:
        MOV     DPTR,#keyCnt
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function Sys_AllowBindConfirm
        LCALL   ??Sys_AllowBindConfirm?relay
//  167                 break;
//  168           }
//  169           // Release the memory
//  170           osal_msg_deallocate( (uint8 *)MSGpkt );
??Key_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  171     
//  172           // Next
//  173           MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Key_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Key_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
??Key_ProcessEvent_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        MOV     A,R6
        ORL     A,R7
        JZ      ??Key_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Key_ProcessEvent_5
        ADD     A,#0x5a
        JZ      ??Key_ProcessEvent_6
        ADD     A,#-0x12
        JZ      ??Key_ProcessEvent_2
        SJMP    ??Key_ProcessEvent_3
??Key_ProcessEvent_6:
        ; Setup parameters for call to function Key_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Key_HandleKeys?relay
        SJMP    ??Key_ProcessEvent_3
??Key_ProcessEvent_5:
        ; Setup parameters for call to function KeyAction
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0xa
        MOV     R1,A
        LCALL   ??KeyAction?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??Key_ProcessEvent_3
//  174         }
//  175         return (events ^ SYS_EVENT_MSG);
??Key_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??Key_ProcessEvent_7
//  176     }
//  177     return 0;
??Key_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock1
??Key_ProcessEvent_7:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  178 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  179 
//  180 /*********************************************************************
//  181  * @fn      Key_HandleKeys
//  182  *
//  183  * @brief   Handles all key events for this device.
//  184  *
//  185  * @param   shift - true if in shift/alt.
//  186  * @param   keys - bit field for key events. Valid entries:
//  187  *                 HAL_KEY_SW_4
//  188  *                 HAL_KEY_SW_3
//  189  *                 HAL_KEY_SW_2
//  190  *                 HAL_KEY_SW_1
//  191  *
//  192  * @return  none
//  193  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  194 void Key_HandleKeys( byte shift, byte keys )
Key_HandleKeys:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Key_HandleKeys
        CODE
//  195 {
        FUNCALL Key_HandleKeys, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, Sys_AllowBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  196   if(shift)
        MOV     A,R6
        JZ      ??Key_HandleKeys_0
//  197   {
//  198         if ( keys & HAL_KEY_SW_1 )
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??Key_HandleKeys_1
//  199         {
//  200           zb_SystemReset();
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
//  201         }
//  202         if ( keys & HAL_KEY_SW_2 )
??Key_HandleKeys_1:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??Key_HandleKeys_2
//  203         {
//  204           zb_SystemReset();
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
//  205         }
//  206         if ( keys & HAL_KEY_SW_3 )
??Key_HandleKeys_2:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JC      $+5
        LJMP    ??Key_HandleKeys_3 & 0xFFFF
//  207         {
//  208           zb_SystemReset();
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
        LJMP    ??Key_HandleKeys_3 & 0xFFFF
//  209         }
//  210         if ( keys & HAL_KEY_SW_4 )
//  211         {
//  212         }
//  213         if ( keys & HAL_KEY_SW_6 )  // Physical Key S1
//  214         {
//  215             // Send to Watch Endpoint ? Send to Key Endpoint ?
//  216         }
//  217   }
//  218   
//  219   else
//  220   {
//  221 //	uint8 startOptions;
//  222 //	uint8 logicalType;
//  223 	// Shift is used to make each key/switch dual purpose.
//  224 	if ( keys_shift )
??Key_HandleKeys_0:
        MOV     DPTR,#keys_shift
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??Key_HandleKeys_3 & 0xFFFF
//  225 	{
//  226 		// Allow Binding
//  227 		if ( keys & HAL_KEY_SW_1 )
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??Key_HandleKeys_3 & 0xFFFF
//  228 		{
//  229 			if(type_join)
        MOV     DPTR,#type_join
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??Key_HandleKeys_3 & 0xFFFF
//  230 			{
//  231 				Sys_AllowBind(10);
        ; Setup parameters for call to function Sys_AllowBind
        MOV     R1,#0xa
        LCALL   ??Sys_AllowBind?relay
//  232                                 if( type_join == KEY_TYPE_ID )
        MOV     DPTR,#type_join
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_8 & 0xFFFF
//  233                                 {
//  234                                     Key_epDesc[keyCnt] = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     DPTR,#keyCnt
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,#Key_epDesc & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(Key_epDesc >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
//  235                                     Key_SimpleDesc[keyCnt] = (SimpleDescriptionFormat_t *)osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
??CrossCallReturnLabel_4:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     DPL,A
        MOV     A,#(Key_SimpleDesc >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
//  236                                     SimpleDescriptionFormat_t simpleDesc_temp =
//  237                                     {
//  238                                             KEY_ENDPOINT,           //  int Endpoint;
//  239                                             SYS_PROFID,                //  uint16 AppProfId[2];
//  240                                             SYS_DEVICEID,              //  uint16 AppDeviceId[2];
//  241                                             SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
//  242                                             SYS_FLAGS,                 //  int   AppFlags:4;
//  243                                             KEY_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  244                                             (cId_t *)Key_ClusterList,  //  byte *pAppInClusterList;
//  245                                             KEY_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  246                                             (cId_t *)Key_ClusterList   //  byte *pAppInClusterList;
//  247                                     };
??CrossCallReturnLabel_2:
        MOV     DPH,#(`?<Constant {10, 3844, 1, 0, 0, 4, (cId_t *)Key` >> 8) & 0xff
        MOV     DPL,#`?<Constant {10, 3844, 1, 0, 0, 4, (cId_t *)Key` & 0xff
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  248                                     
//  249                                     // Fill out the endpoint description.
//  250                                     Key_epDesc[keyCnt]->endPoint = KEY_ENDPOINT+keyCnt;
        MOV     DPTR,#keyCnt
        MOVX    A,@DPTR
        ADD     A,#0xa
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#Key_epDesc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Key_epDesc >> 8) & 0xff
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_24:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  251                                     Key_epDesc[keyCnt]->task_id = &Key_TaskID;
        MOV     DPTR,#keyCnt
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,#Key_epDesc & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(Key_epDesc >> 8) & 0xff
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     A,#Key_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Key_TaskID >> 8) & 0xff
        LCALL   ?Subroutine1 & 0xFFFF
//  252                                 
//  253                                     osal_memcpy(Key_SimpleDesc[keyCnt], &simpleDesc_temp, sizeof(SimpleDescriptionFormat_t));
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     A,#Key_SimpleDesc & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(Key_SimpleDesc >> 8) & 0xff
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  254                                     
//  255                                     Key_epDesc[keyCnt]->simpleDesc
//  256                                                                         = (SimpleDescriptionFormat_t *)(Key_SimpleDesc[keyCnt]);
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     R2,A
        MOV     A,#(Key_SimpleDesc >> 8) & 0xff
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,#Key_epDesc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Key_epDesc >> 8) & 0xff
        LCALL   ?Subroutine7 & 0xFFFF
//  257                                     Key_SimpleDesc[keyCnt]->EndPoint += keyCnt;
??CrossCallReturnLabel_12:
        MOV     DPTR,#keyCnt
        LCALL   ?Subroutine6 & 0xFFFF
//  258                                     Key_epDesc[keyCnt]->latencyReq = noLatencyReqs;
??CrossCallReturnLabel_10:
        LCALL   ?Subroutine15 & 0xFFFF
//  259                                     
//  260                                     // Register the endpoint description with the AF
//  261                                     afRegister( Key_epDesc[keyCnt] );
//  262                                 }
??CrossCallReturnLabel_34:
        MOV     A,#Key_epDesc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Key_epDesc >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
//  263 			        if( type_join == SWITCH_TYPE_ID )
??CrossCallReturnLabel_8:
        MOV     DPTR,#type_join
        MOVX    A,@DPTR
        XRL     A,#0x4
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_9 & 0xFFFF
//  264                                 {
//  265                                      Switch_epDesc[swCnt] = (endPointDesc_t *)osal_mem_alloc(sizeof(endPointDesc_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     DPTR,#swCnt
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,#Switch_epDesc & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(Switch_epDesc >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
//  266                                      Switch_SimpleDesc[swCnt] = (SimpleDescriptionFormat_t *)osal_mem_alloc(sizeof(SimpleDescriptionFormat_t));
??CrossCallReturnLabel_5:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     DPL,A
        MOV     A,#(Switch_SimpleDesc >> 8) & 0xff
        LCALL   ?Subroutine2 & 0xFFFF
//  267                                      SimpleDescriptionFormat_t simpleDesc_temp =
//  268                                      {
//  269                                         SWITCH_ENDPOINT,           //  int Endpoint;
//  270                                         SYS_PROFID,                //  uint16 AppProfId[2];
//  271                                         SYS_DEVICEID,              //  uint16 AppDeviceId[2];
//  272                                         SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
//  273                                         SYS_FLAGS,                 //  int   AppFlags:4;
//  274                                         SWITCH_MAX_CLUSTERS,        //  byte  AppNumInClusters;
//  275                                         (cId_t *)Switch_ClusterList,  //  byte *pAppInClusterList;
//  276                                         0,                          //  byte  AppNumInClusters;
//  277                                         NULL                         //  byte *pAppInClusterList;
//  278                                      };
??CrossCallReturnLabel_3:
        MOV     DPH,#(`?<Constant {60, 3844, 1, 0, 0, 4, Switch_Clust` >> 8) & 0xff
        MOV     DPL,#`?<Constant {60, 3844, 1, 0, 0, 4, Switch_Clust` & 0xff
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  279                                      
//  280                                      // Fill out the endpoint description.
//  281                                      Switch_epDesc[swCnt]->endPoint = SWITCH_ENDPOINT+swCnt;
        MOV     DPTR,#swCnt
        MOVX    A,@DPTR
        ADD     A,#0x3c
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#Switch_epDesc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Switch_epDesc >> 8) & 0xff
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_25:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  282                                      Switch_epDesc[swCnt]->task_id = &Switch_TaskID;
        MOV     DPTR,#swCnt
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,#Switch_epDesc & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(Switch_epDesc >> 8) & 0xff
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     A,#Switch_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Switch_TaskID >> 8) & 0xff
        LCALL   ?Subroutine1 & 0xFFFF
//  283                                     
//  284                                      osal_memcpy(Switch_SimpleDesc[swCnt], &simpleDesc_temp, sizeof(SimpleDescriptionFormat_t));
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0xc
        MOV     R5,#0x0
        MOV     A,#Switch_SimpleDesc & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(Switch_SimpleDesc >> 8) & 0xff
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  285                                     
//  286                                      Switch_epDesc[swCnt]->simpleDesc
//  287                                                                         = (SimpleDescriptionFormat_t *)(Switch_SimpleDesc[swCnt]);
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     R2,A
        MOV     A,#(Switch_SimpleDesc >> 8) & 0xff
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     A,#Switch_epDesc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Switch_epDesc >> 8) & 0xff
        LCALL   ?Subroutine7 & 0xFFFF
//  288                                      Switch_SimpleDesc[swCnt]->EndPoint += swCnt;
??CrossCallReturnLabel_13:
        MOV     DPTR,#swCnt
        LCALL   ?Subroutine6 & 0xFFFF
//  289                                      Switch_epDesc[swCnt]->latencyReq = noLatencyReqs;
??CrossCallReturnLabel_11:
        MOV     DPTR,#swCnt
        LCALL   ??Subroutine20_0 & 0xFFFF
//  290                                     
//  291                                      // Register the endpoint description with the AF
//  292                                      afRegister( Switch_epDesc[swCnt] );
//  293                                 }
??CrossCallReturnLabel_32:
        MOV     A,#Switch_epDesc & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(Switch_epDesc >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
//  294 				keys_shift = 0;
??CrossCallReturnLabel_9:
        MOV     DPTR,#keys_shift
        CLR     A
        MOVX    @DPTR,A
//  295 			}
//  296 			else
//  297 			{
//  298 				// wrong endpoint the presend send to
//  299 			}
//  300 		}
//  301 		if ( keys & HAL_KEY_SW_2 )
//  302 		{
//  303 		}
//  304 		if ( keys & HAL_KEY_SW_3 )
//  305 		{
//  306 		}
//  307 		if ( keys & HAL_KEY_SW_4 )
//  308 		{
//  309 		}
//  310 	}
//  311 	else
//  312 	{
//  313 		if ( keys & HAL_KEY_SW_1 )
//  314 		{
//  315                   
//  316                   /*
//  317 		    if ( myAppState == APP_INIT )
//  318 		    {
//  319 		        // In the init state, keys are used to indicate the logical mode.
//  320 		        // The Switch device is always an end-device
//  321 		        logicalType = ZG_DEVICETYPE_ENDDEVICE;
//  322 		        zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
//  323 
//  324 		        // Do more configuration if necessary and then restart device with auto-start bit set
//  325 
//  326 		        zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
//  327 		        startOptions = ZCD_STARTOPT_AUTO_START;
//  328 		        zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
//  329 		        zb_SystemReset();
//  330 
//  331     		    }*/
//  332 		}
//  333 
//  334 		if ( keys & HAL_KEY_SW_2 )
//  335 		{
//  336 		}
//  337 
//  338 		if ( keys & HAL_KEY_SW_3 )
//  339 		{
//  340 		}
//  341 		
//  342 		if ( keys & HAL_KEY_SW_4 )
//  343 		{
//  344 		}
//  345 	}
//  346   }
//  347 }
??Key_HandleKeys_3:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+-1
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_29:
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        ADDC    A,?V0 + 1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_27:
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_23
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_12
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_13
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     DPH,A
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_30:
        INC     DPTR
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     ?V0 + 0,A
        CLR     A
        RLC     A
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond18 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        MOV     DPTR,#swCnt
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     A,#Switch_SimpleDesc & 0xff
        ADD     A,R0
        RET
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_16
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_17
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     DPTR,#keyCnt
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
        REQUIRE ??Subroutine20_0
        ; // Fall through to label ??Subroutine20_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine20_0:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_18
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_19
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_16
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_17
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     A,#Key_SimpleDesc & 0xff
        ADD     A,R0
        RET
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        ADDC    A,?V0 + 1
        MOV     DPH,A
        LCALL   ??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        ADDC    A,R1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_26:
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R1
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ??Subroutine21_0 & 0xFFFF
??CrossCallReturnLabel_37:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function afRegister
        ; Setup parameters for call to function afRegister
        LCALL   ??afRegister?relay
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        ADDC    A,R3
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xc
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 5,R2
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        RET
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55
//  348 
//  349 /******************************************************************************
//  350  * @fn          Key_ReceiveDataIndication
//  351  *
//  352  * @brief       The SAPI_ReceiveDataIndication callback function is called
//  353  *              asynchronously by the ZigBee stack to notify the application
//  354  *              when data is received from a peer device.
//  355  *
//  356  * @param       source - The short address of the peer device that sent the data
//  357  *              command - The commandId associated with the data
//  358  *              len - The number of bytes in the pData parameter
//  359  *              pData - The data sent by the peer device
//  360  *
//  361  * @return      none
//  362  */
//  363 void Key_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
//  364 {
//  365   KeyAction(endPoint-KEY_ENDPOINT, command, len, pData);
//  366 }
//  367 
//  368 /******************************************************************************
//  369  * @fn          SwitchAction
//  370  *
//  371  * @brief       Switch Action Decide
//  372  *
//  373  * @param
//  374  *
//  375  * @return      none
//  376  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  377 void KeyAction( uint8 key, uint16 command, uint16 len, uint8 *pData )
KeyAction:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function KeyAction
        CODE
//  378 {
        FUNCALL KeyAction, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KeyAction, ss_AddObserveList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KeyAction, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  379   if(command == PORT_INIT_CLUSTER)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??KeyAction_0
        MOV     A,R3
??KeyAction_0:
        JNZ     ??KeyAction_1
//  380   {
//  381 /*    uint8 i;
//  382     uint8 port[KEY_INIT_MSG_MAX];
//  383     for(i=0; i<KEY_INIT_MSG_MAX; i++, pData++)
//  384     {
//  385         port[i] = *pData;
//  386     }*/
//  387     uint8 port;
//  388     port = *pData;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R6,A
//  389   //  P2: 1 2 3 4 ; P1: 2 3 4 5 6 7
//  390   //-----------------------------------
//  391   //port: 0 1 2 3       4 5 6 7 8 9
//  392     if(port < KEY_NUM_MAX)
        CLR     C
        SUBB    A,#0xa
        JC      $+5
        LJMP    ??KeyAction_2 & 0xFFFF
//  393     {
//  394         if(port < P2_KEY_MAX)
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        JNC     ??KeyAction_3
//  395         {
//  396             P2SEL &= ~(0x01 << (port + 1));
        MOV     A,#0x1
        ADD     A,R6
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R0,?V0 + 0
        MOV     A,R0
        CPL     A
        ANL     0xf5,A
//  397             P2DIR &= ~(0x01 << (port + 1));
        ANL     0xff,A
//  398             P2IEN |= 0x01 << (port + 1);
        MOV     A,R0
        ORL     0xac,A
//  399             P2IFG = 0;
        MOV     0x8b,#0x0
        SJMP    ??KeyAction_4
//  400         }
//  401         else
//  402         {
//  403             P1SEL &= ~(0x01 << (port - 2));
??KeyAction_3:
        MOV     A,#-0x2
        ADD     A,R6
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R0,?V0 + 0
        MOV     A,R0
        CPL     A
        ANL     0xf4,A
//  404             P1DIR &= ~(0x01 << (port - 2));
        ANL     0xfe,A
//  405             P1IEN |= 0x01 << (port - 2);
        MOV     A,R0
        ORL     0x8d,A
//  406             P1IFG = 0;
        MOV     0x8a,#0x0
//  407         }
//  408         if(KeyObserve == NULL)
??KeyAction_4:
        MOV     DPTR,#KeyObserve
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??KeyAction_5
//  409         {
//  410           KeyObserve = (SensorObserve_t *)osal_mem_alloc(sizeof(SensorObserve_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#KeyObserve
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine4 & 0xFFFF
//  411           KeyObserve->port = port;
//  412           KeyObserve->next = NULL;
//  413         }
??CrossCallReturnLabel_6:
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        LJMP    ??KeyAction_2 & 0xFFFF
//  414         else
//  415             ss_AddObserveList(KeyObserve, port);
??KeyAction_5:
        ; Setup parameters for call to function ss_AddObserveList
        MOV     A,R6
        MOV     R1,A
        MOV     DPTR,#KeyObserve
        LCALL   ??Subroutine21_0 & 0xFFFF
//  416         return;
//  417     }
//  418     else
//  419     {
//  420         // send error back
//  421         return;
//  422     }
//  423   }
??CrossCallReturnLabel_36:
        LCALL   ??ss_AddObserveList?relay
        SJMP    ??KeyAction_2
//  424   if(command == TOGGLE_INIT_CLUSTER)
??KeyAction_1:
        MOV     A,#0x5
        XRL     A,R2
        JNZ     ??KeyAction_6
        MOV     A,R3
??KeyAction_6:
        JNZ     ??KeyAction_2
//  425   {
//  426     uint8 i;
//  427     byte *data_p = NULL;
//  428     data_p = (byte *)osal_mem_alloc(sizeof(byte) * len);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
//  429     for(i=0; i<len; i++, pData++)
        MOV     R2,#0x0
        SJMP    ??KeyAction_7
//  430     {
//  431         data_p[i] = *pData;
??KeyAction_8:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  432     }
        INC     R2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
??KeyAction_7:
        MOV     ?V0 + 2,R2
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 0
        CLR     A
        SUBB    A,?V0 + 1
        JC      ??KeyAction_8
//  433     if(data_p[KEY_TOGGLE_PORT_BIT] > 3) // not exist
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        JNC     ??KeyAction_2
//  434     {
//  435         //send error
//  436         return;
//  437     }
//  438     if(data_p[KEY_TOGGLE_EDGE_BIT] == KEY_RISE_EDGE)
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??KeyAction_9
//  439     {
//  440         PICTL &= ~(0x01<<data_p[KEY_TOGGLE_PORT_BIT]);
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        CPL     A
        ANL     0x8c,A
        SJMP    ??KeyAction_2
//  441     }
//  442     else
//  443     {
//  444         PICTL |= 0x01<<data_p[KEY_TOGGLE_PORT_BIT];
??KeyAction_9:
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ORL     0x8c,A
??KeyAction_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock56
        REQUIRE P2SEL
        REQUIRE P2DIR
        REQUIRE P2IEN
        REQUIRE P2IFG
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE P1IEN
        REQUIRE P1IFG
        REQUIRE PICTL
//  445     }
//  446   }
//  447 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        INC     DPTR
        INC     DPTR
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_15
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_8
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_9
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#KeyObserve
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_28:
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_25
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+-1
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_6
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_7
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_31:
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_23
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_12
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_13
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_24
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+-1
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_25
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+-1
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_6
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_28, ??CrossCallReturnLabel_7
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84
//  448 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  449 void KeySend2Coor(uint8 dev_num, uint16 commandId, uint8 *pData)
KeySend2Coor:
        CFI Block cfiBlock85 Using cfiCommon0
        CFI Function KeySend2Coor
        CODE
//  450 {
        FUNCALL KeySend2Coor, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KeySend2Coor, Sys_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  451     Sys_SendDataRequest( 0xFFFE, Key_epDesc[dev_num], commandId, (uint8)osal_strlen( pData ),
//  452                            pData, sysSeqNumber, 0, 0 );
        ; Setup parameters for call to function osal_strlen
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_strlen?relay
        ; Setup parameters for call to function Sys_SendDataRequest
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPTR,#sysSeqNumber
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R1,A
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,#Key_epDesc & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(Key_epDesc >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        LCALL   ??Subroutine22_0 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     R2,#-0x2
        MOV     R3,#-0x1
        LCALL   ??Sys_SendDataRequest?relay
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  453 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock85

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond86 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker88 Using cfiCommon1
        CFI (cfiPicker88) NoFunction
        CFI (cfiPicker88) Picker
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiPicker88
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
        CFI Block cfiCond89 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 27)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant {10, 3844, 1, 0, 0`:
        DATA8
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW Key_ClusterList
        DATA8
        DB 4
        DATA16
        DW Key_ClusterList

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for <Constant {60, 3844, 1, 0, 0`:
        DATA8
        DB 60
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW Switch_ClusterList
        DATA8
        DB 0
        DATA16
        DW 0H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Key_ClusterList>`:
        DATA16
        DW 1
        DW 5
        DW 2
        DW 4

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Key_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Key_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Key_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Key_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Key_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Key_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??KeyAction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    KeyAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??KeySend2Coor?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    KeySend2Coor

        END
//  454 
//  455 /******************************************************************************
//  456  * @fn          Key_AllowBindConfirm
//  457  *
//  458  * @brief       Indicates when another device attempted to bind to this device
//  459  *
//  460  * @param
//  461  *
//  462  * @return      none
//  463  */
//  464 void Key_AllowBindConfirm( uint16 source )
//  465 {
//  466     keyCnt++;
//  467     Sys_AllowBindConfirm(source);
//  468 }
//  469 
//  470 
// 
// 1 244 bytes in segment BANKED_CODE
//    30 bytes in segment BANK_RELAYS
//     9 bytes in segment SFR_AN
//    32 bytes in segment XDATA_I
//    32 bytes in segment XDATA_ID
//    56 bytes in segment XDATA_Z
// 
// 1 306 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 9 bytes shared)
//    88 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
