///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        11/Apr/2018  15:58:06 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\Source\Key_End.c                  /
//    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\Source\Key /
//                          _End.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D     /
//                          REFLECTOR -D POWER_SAVING -D NV_INIT -D           /
//                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D           /
//                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                  /
//                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\End /
//                          DeviceEB\List\ -lA D:\ProgramData\Hardware\zigbee /
//                          \Projects\zstack\Samples\SensorSys\CC2530DB\EndDe /
//                          viceEB\List\ --diag_suppress Pe001,Pa010 -o       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 -I D:\ProgramData\Hardware\zigbee\Projects\zst /
//                          ack\Samples\SensorSys\CC2530DB\ -I                /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\Source\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\ /
//                           -I D:\ProgramData\Hardware\zigbee\Projects\zstac /
//                          k\Samples\SensorSys\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\include\ -I D:\ProgramData\Hardware\zig /
//                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\ -I D:\ProgramData\Hardware\zigbee\ /
//                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\high_level\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\ -I                         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\ -I             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\ -I D:\ProgramData\Hardware\zigbee\Projects\ /
//                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\ /
//                          Components\osal\include\ -I                       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\ -I D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\ -I D:\ProgramData\Hardware\zigbee\Pro /
//                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\nwk\ -I                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\ -I D:\ProgramData\Hardware\zigbee\P /
//                          rojects\zstack\Samples\SensorSys\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\ -I D:\ProgramData\Hardware\zigbee\Pr /
//                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I D:\ProgramData\Hardware\zigbee\Project /
//                          s\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -Ohz --require_prototypes  /
//    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\Key_End /
//                          .s51                                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Key_End

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??KeyAction?relay,0203H
        PUBLIC ??KeySend2Coor?relay
        FUNCTION ??KeySend2Coor?relay,0203H
        PUBLIC ??Key_HandleKeys?relay
        FUNCTION ??Key_HandleKeys?relay,0203H
        PUBLIC ??Key_Init?relay
        FUNCTION ??Key_Init?relay,0203H
        PUBLIC ??Key_ProcessEvent?relay
        FUNCTION ??Key_ProcessEvent?relay,0203H
        FUNCTION KeyAction,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC KeyObserve
        PUBLIC KeySend2Coor
        FUNCTION KeySend2Coor,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC Key_ClusterList
        PUBLIC Key_DstAddr
        PUBLIC Key_HandleKeys
        FUNCTION Key_HandleKeys,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Key_Init
        FUNCTION Key_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Key_ProcessEvent
        FUNCTION Key_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Key_SimpleDesc
        PUBLIC Key_TaskID
        PUBLIC Key_epDesc
        PUBWEAK P1DIR
        PUBWEAK P1IEN
        PUBWEAK P1IFG
        PUBWEAK P1SEL
        PUBWEAK P2DIR
        PUBWEAK P2IEN
        PUBWEAK P2IFG
        PUBWEAK P2SEL
        PUBWEAK PICTL
        PUBLIC keyCnt
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
Sys_AllowBindConfirm SYMBOL "Sys_AllowBindConfirm"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
zb_SystemReset      SYMBOL "zb_SystemReset"
Sys_AllowBind       SYMBOL "Sys_AllowBind"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
ss_AddObserveList   SYMBOL "ss_AddObserveList"
osal_strlen         SYMBOL "osal_strlen"
Sys_SendDataRequest SYMBOL "Sys_SendDataRequest"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??Sys_AllowBind?relay SYMBOL "?relay", Sys_AllowBind
??Sys_AllowBindConfirm?relay SYMBOL "?relay", Sys_AllowBindConfirm
??Sys_SendDataRequest?relay SYMBOL "?relay", Sys_SendDataRequest
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_strlen?relay SYMBOL "?relay", osal_strlen
??ss_AddObserveList?relay SYMBOL "?relay", ss_AddObserveList
??zb_SystemReset?relay SYMBOL "?relay", zb_SystemReset
KeySend2Coor        SYMBOL "KeySend2Coor"
??KeySend2Coor?relay SYMBOL "?relay", KeySend2Coor
Key_HandleKeys      SYMBOL "Key_HandleKeys"
??Key_HandleKeys?relay SYMBOL "?relay", Key_HandleKeys
Key_Init            SYMBOL "Key_Init"
??Key_Init?relay    SYMBOL "?relay", Key_Init
Key_ProcessEvent    SYMBOL "Key_ProcessEvent"
??Key_ProcessEvent?relay SYMBOL "?relay", Key_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_AllowBindConfirm
        FUNCTION Sys_AllowBindConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SystemReset
        FUNCTION zb_SystemReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_AllowBind
        FUNCTION Sys_AllowBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ss_AddObserveList
        FUNCTION ss_AddObserveList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_SendDataRequest
        FUNCTION Sys_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??Sys_AllowBind?relay
        FUNCTION ??Sys_AllowBind?relay,00H
        EXTERN ??Sys_AllowBindConfirm?relay
        FUNCTION ??Sys_AllowBindConfirm?relay,00H
        EXTERN ??Sys_SendDataRequest?relay
        FUNCTION ??Sys_SendDataRequest?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN ??ss_AddObserveList?relay
        FUNCTION ??ss_AddObserveList?relay,00H
        EXTERN ??zb_SystemReset?relay
        FUNCTION ??zb_SystemReset?relay,00H
        EXTERN keys_shift
        EXTERN sysSeqNumber
        EXTERN type_join

// D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Key_End.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include "sapi.h"
//    7 
//    8 #include "SensorSys_End.h"
//    9 #include "device.h"
//   10 #include "SensorSys_Tools.h"
//   11 #include "DebugTrace.h"
//   12 
//   13 #if !defined( WIN32 )
//   14 	#include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,08aH
// unsigned char volatile __sfr P1IFG
P1IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr P2IFG
P2IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08dH
// unsigned char volatile __sfr P1IEN
P1IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0acH
// unsigned char volatile __sfr P2IEN
P2IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   15 #endif
//   16 
//   17 /* HAL */
//   18 #include "hal_led.h"
//   19 #include "hal_key.h"
//   20 #include "hal_uart.h"
//   21 
//   22 /*********************************************************************
//   23  * MACROS
//   24  */
//   25 #define KEY_TOGGLE_PORT_BIT    0
//   26 #define KEY_TOGGLE_EDGE_BIT    1
//   27 
//   28 // #define KEY_INIT_POS_PORT   0
//   29 // #define KEY_INIT_POS_TOGGLE 1
//   30 
//   31 /*********************************************************************
//   32  * CONSTANTS
//   33  */
//   34 
//   35 /*********************************************************************
//   36  * TYPEDEFS
//   37  */
//   38 
//   39 /*********************************************************************
//   40  * GLOBAL VARIABLES
//   41  */
//   42 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   43 uint8 keyCnt = 0;
keyCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   44 
//   45 
//   46 
//   47 
//   48 // Key 端点的簇ID
//   49 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA8
//   50 const cId_t Key_ClusterList[KEY_MAX_CLUSTERS] =
Key_ClusterList:
        DS 8
        REQUIRE `?<Initializer for Key_ClusterList>`
        REQUIRE __INIT_XDATA_I
//   51 {
//   52     PORT_INIT_CLUSTER,
//   53     TOGGLE_INIT_CLUSTER,
//   54     OPERATE_CLUSTER,
//   55     DELETE_CLUSTER
//   56 };
//   57 
//   58 // Key 端点简单描述符

        RSEG XDATA_I:XDATA:NOROOT(0)
//   59 SimpleDescriptionFormat_t Key_SimpleDesc[KEY_NUM_MAX] =
Key_SimpleDesc:
        DATA8
        DS 120
        REQUIRE `?<Initializer for Key_SimpleDesc>`
        REQUIRE __INIT_XDATA_I
//   60 {
//   61 	KEY_ENDPOINT,           //  int Endpoint;
//   62 	SYS_PROFID,                //  uint16 AppProfId[2];
//   63 	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
//   64 	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
//   65 	SYS_FLAGS,                 //  int   AppFlags:4;
//   66 	KEY_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   67 	(cId_t *)Key_ClusterList,  //  byte *pAppInClusterList;
//   68 	KEY_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   69 	(cId_t *)Key_ClusterList   //  byte *pAppInClusterList;
//   70 };
//   71 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   72 endPointDesc_t Key_epDesc[KEY_NUM_MAX];
Key_epDesc:
        DS 60
        REQUIRE __INIT_XDATA_Z
//   73 
//   74 /*********************************************************************
//   75  * EXTERNAL VARIABLES
//   76  */
//   77 extern uint8 myAppState;
//   78 extern uint8 keys_shift;
//   79 extern uint8 type_join;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   80 SensorObserve_t *KeyObserve; 
KeyObserve:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   81 /*********************************************************************
//   82  * EXTERNAL FUNCTIONS
//   83  */
//   84 
//   85 /*********************************************************************
//   86  * LOCAL VARIABLES
//   87  */
//   88 
//   89 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   90 byte Key_TaskID;
Key_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   91 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 afAddrType_t Key_DstAddr;
Key_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   93 
//   94 /*********************************************************************
//   95  * LOCAL FUNCTIONS
//   96  */
//   97 void Key_Init( byte task_id );
//   98 UINT16 Key_ProcessEvent( byte task_id, UINT16 events );
//   99 void Key_HandleKeys( byte shift, byte keys );
//  100 static void KeyAction( uint8 key, uint16 command, uint16 len, uint8 *pData );
//  101 
//  102 static void Key_ReceiveDataIndication( uint16 source, uint8 endPoint, 
//  103                               uint16 command, uint16 len, uint8 *pData  );
//  104 static void Key_AllowBindConfirm( uint16 source );
//  105 
//  106 /*********************************************************************
//  107  * EXTERNAL FUNCTIONS
//  108  */
//  109 void KeySend2Coor(uint8 dev_num, uint16 commandId, uint8 *pData);
//  110 
//  111 
//  112 /*********************************************************************
//  113  * @fn      Key_Init
//  114  *
//  115  * @brief   Initialization function for the Generic App Task.
//  116  *          This is called during initialization and should contain
//  117  *          any application specific initialization (ie. hardware
//  118  *          initialization/setup, table initialization, power up
//  119  *          notificaiton ... ).
//  120  *
//  121  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  122  *                    used to send messages and set timers.
//  123  *
//  124  * @return  none
//  125  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  126 void Key_Init( byte task_id )
Key_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Key_Init
        CODE
//  127 {
        FUNCALL Key_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  128         char i;
//  129 	Key_TaskID = task_id;
        MOV     DPTR,#Key_TaskID
        MOVX    @DPTR,A
//  130 
//  131 	// Device hardware initialization can be added here or in main() (Zmain.c).
//  132 	// If the hardware is application specific - add it here.
//  133 	// If the hardware is other parts of the device add it in main().
//  134 
//  135 	Key_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#Key_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  136 	Key_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  137 	Key_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#Key_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  138         
//  139         for( i=0; i<KEY_NUM_MAX; i++)
        MOV     R7,A
//  140         {
//  141             // Fill out the endpoint description.
//  142             Key_epDesc[i].endPoint = KEY_ENDPOINT+i;
??Key_Init_0:
        MOV     DPL,R7
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#Key_epDesc & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(Key_epDesc >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        MOV     A,#0xa
        ADD     A,R7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  143             Key_epDesc[i].task_id = &Key_TaskID;
        INC     DPTR
        MOV     A,#Key_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Key_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  144             Key_SimpleDesc[i] = Key_SimpleDesc[0];
        MOV     A,R0
        MOV     B,#0xc
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#Key_SimpleDesc & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(Key_SimpleDesc >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#Key_SimpleDesc
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  145             Key_epDesc[i].simpleDesc
//  146 						= (SimpleDescriptionFormat_t *)&(Key_SimpleDesc[i]);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  147             Key_SimpleDesc[i].EndPoint += i;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,R7
        MOVX    @DPTR,A
//  148 	    Key_epDesc[i].latencyReq = noLatencyReqs;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  149             
//  150             // Register the endpoint description with the AF
//  151 	    afRegister( &(Key_epDesc[i]) );
        ; Setup parameters for call to function afRegister
        LCALL   ??afRegister?relay
//  152         }
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0xa
        JC      ??Key_Init_0
//  153 
//  154         KeyObserve = NULL;
        MOV     DPTR,#KeyObserve
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  155 	// Register for all key events - This app will handle all key events
//  156 	RegisterForKeys( Key_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#Key_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  157  
//  158 	//	ZDO_RegisterForZDOMsg( Key_TaskID, End_Device_Bind_rsp );
//  159 	ZDO_RegisterForZDOMsg( Key_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Key_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
        CFI EndBlock cfiBlock0
//  160 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  161 
//  162 /*********************************************************************
//  163  * @fn      Key_ProcessEvent
//  164  *
//  165  * @brief   Generic Application Task event processor.  This function
//  166  *          is called to process all events for the task.  Events
//  167  *          include timers, messages and any other user defined events.
//  168  *
//  169  * @param   task_id  - The OSAL assigned task ID.
//  170  * @param   events - events to process.  This is a bit map and can
//  171  *                   contain more than one event.
//  172  *
//  173  * @return  none
//  174  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  175 UINT16 Key_ProcessEvent( byte task_id, UINT16 events )
Key_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Key_ProcessEvent
        CODE
//  176 {
        FUNCALL Key_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, Sys_AllowBindConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, Key_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_ProcessEvent, KeyAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  177     afIncomingMSGPacket_t *MSGpkt = NULL;
//  178     (void)task_id;  // Intentionally unreferenced parameter
//  179 
//  180     if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??Key_ProcessEvent_0 & 0xFFFF
//  181     {
//  182         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Key_ProcessEvent_1
//  183         while ( MSGpkt )
//  184         {
//  185           switch ( MSGpkt->hdr.event )
//  186           {
//  187             case KEY_CHANGE:
//  188                 Key_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  189                 break;
//  190         
//  191             case AF_INCOMING_MSG_CMD:
//  192                 Key_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
//  193                                         MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
//  194                 break;
//  195               
//  196             case ZDO_MATCH_DESC_RSP_SENT:
//  197                 Key_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
??Key_ProcessEvent_2:
        ; Setup parameters for call to function Sys_AllowBindConfirm
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??Sys_AllowBindConfirm?relay
//  198                 break;
//  199           }
//  200           // Release the memory
//  201           osal_msg_deallocate( (uint8 *)MSGpkt );
??Key_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  202     
//  203           // Next
//  204           MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Key_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Key_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
??Key_ProcessEvent_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        MOV     A,R6
        ORL     A,R7
        JZ      ??Key_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Key_ProcessEvent_5
        ADD     A,#0x5a
        JZ      ??Key_ProcessEvent_6
        ADD     A,#-0x12
        JZ      ??Key_ProcessEvent_2
        SJMP    ??Key_ProcessEvent_3
??Key_ProcessEvent_6:
        ; Setup parameters for call to function Key_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Key_HandleKeys?relay
        SJMP    ??Key_ProcessEvent_3
??Key_ProcessEvent_5:
        ; Setup parameters for call to function KeyAction
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0xa
        MOV     R1,A
        LCALL   ??KeyAction?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        LJMP    ??Key_ProcessEvent_3 & 0xFFFF
//  205         }
//  206         return (events ^ SYS_EVENT_MSG);
??Key_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??Key_ProcessEvent_7
//  207     }
//  208     return 0;
??Key_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock2
??Key_ProcessEvent_7:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  209 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  210 
//  211 /*********************************************************************
//  212  * @fn      Key_HandleKeys
//  213  *
//  214  * @brief   Handles all key events for this device.
//  215  *
//  216  * @param   shift - true if in shift/alt.
//  217  * @param   keys - bit field for key events. Valid entries:
//  218  *                 HAL_KEY_SW_4
//  219  *                 HAL_KEY_SW_3
//  220  *                 HAL_KEY_SW_2
//  221  *                 HAL_KEY_SW_1
//  222  *
//  223  * @return  none
//  224  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  225 void Key_HandleKeys( byte shift, byte keys )
Key_HandleKeys:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function Key_HandleKeys
        CODE
//  226 {
        FUNCALL Key_HandleKeys, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Key_HandleKeys, Sys_AllowBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  227   if(shift)
        MOV     A,R6
        JZ      ??Key_HandleKeys_0
//  228   {
//  229         if ( keys & HAL_KEY_SW_1 )
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??Key_HandleKeys_1
//  230         {
//  231           zb_SystemReset();
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
//  232         }
//  233         if ( keys & HAL_KEY_SW_2 )
??Key_HandleKeys_1:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??Key_HandleKeys_2
//  234         {
//  235           zb_SystemReset();
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
//  236         }
//  237         if ( keys & HAL_KEY_SW_3 )
??Key_HandleKeys_2:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.4
        JNC     ??Key_HandleKeys_3
//  238         {
//  239           zb_SystemReset();
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
        SJMP    ??Key_HandleKeys_3
//  240         }
//  241         if ( keys & HAL_KEY_SW_4 )
//  242         {
//  243         }
//  244         if ( keys & HAL_KEY_SW_6 )  // Physical Key S1
//  245         {
//  246             // Send to Watch Endpoint ? Send to Key Endpoint ?
//  247         }
//  248   }
//  249   
//  250   else
//  251   {
//  252 //	uint8 startOptions;
//  253 //	uint8 logicalType;
//  254 	// Shift is used to make each key/switch dual purpose.
//  255 	if ( keys_shift )
??Key_HandleKeys_0:
        MOV     DPTR,#keys_shift
        MOVX    A,@DPTR
        JZ      ??Key_HandleKeys_3
//  256 	{
//  257 		// Allow Binding
//  258 		if ( keys & HAL_KEY_SW_1 )
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??Key_HandleKeys_3
//  259 		{
//  260 			if(type_join)
        MOV     DPTR,#type_join
        MOVX    A,@DPTR
        JZ      ??Key_HandleKeys_3
//  261 			{
//  262 				Sys_AllowBind(10);
        ; Setup parameters for call to function Sys_AllowBind
        MOV     R1,#0xa
        LCALL   ??Sys_AllowBind?relay
//  263                                 
//  264 			// osal_start_timerEx(Sys_TaskID, CLOSE_BIND_EVT, 10000);
//  265 			
//  266 				keys_shift = 0;
        MOV     DPTR,#keys_shift
        CLR     A
        MOVX    @DPTR,A
//  267 			}
//  268 			else
//  269 			{
//  270 				// wrong endpoint the presend send to
//  271 			}
//  272 		}
//  273 		if ( keys & HAL_KEY_SW_2 )
//  274 		{
//  275 		}
//  276 		if ( keys & HAL_KEY_SW_3 )
//  277 		{
//  278 		}
//  279 		if ( keys & HAL_KEY_SW_4 )
//  280 		{
//  281 		}
//  282 	}
//  283 	else
//  284 	{
//  285 		if ( keys & HAL_KEY_SW_1 )
//  286 		{
//  287                   
//  288                   /*
//  289 		    if ( myAppState == APP_INIT )
//  290 		    {
//  291 		        // In the init state, keys are used to indicate the logical mode.
//  292 		        // The Switch device is always an end-device
//  293 		        logicalType = ZG_DEVICETYPE_ENDDEVICE;
//  294 		        zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
//  295 
//  296 		        // Do more configuration if necessary and then restart device with auto-start bit set
//  297 
//  298 		        zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
//  299 		        startOptions = ZCD_STARTOPT_AUTO_START;
//  300 		        zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
//  301 		        zb_SystemReset();
//  302 
//  303     		    }*/
//  304 		  //  else
//  305 		//    {
//  306 
//  307 	//	    }
//  308 		}
//  309 
//  310 		if ( keys & HAL_KEY_SW_2 )
//  311 		{
//  312 		}
//  313 
//  314 		if ( keys & HAL_KEY_SW_3 )
//  315 		{
//  316 		}
//  317 		
//  318 		if ( keys & HAL_KEY_SW_4 )
//  319 		{
//  320 		}
//  321 	}
//  322   }
//  323 }
??Key_HandleKeys_3:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock4
//  324 
//  325 /******************************************************************************
//  326  * @fn          Key_ReceiveDataIndication
//  327  *
//  328  * @brief       The SAPI_ReceiveDataIndication callback function is called
//  329  *              asynchronously by the ZigBee stack to notify the application
//  330  *              when data is received from a peer device.
//  331  *
//  332  * @param       source - The short address of the peer device that sent the data
//  333  *              command - The commandId associated with the data
//  334  *              len - The number of bytes in the pData parameter
//  335  *              pData - The data sent by the peer device
//  336  *
//  337  * @return      none
//  338  */
//  339 void Key_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
//  340 {
//  341   KeyAction(endPoint-KEY_ENDPOINT, command, len, pData);
//  342 }
//  343 
//  344 /******************************************************************************
//  345  * @fn          SwitchAction
//  346  *
//  347  * @brief       Switch Action Decide
//  348  *
//  349  * @param
//  350  *
//  351  * @return      none
//  352  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  353 void KeyAction( uint8 key, uint16 command, uint16 len, uint8 *pData )
KeyAction:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function KeyAction
        CODE
//  354 {
        FUNCALL KeyAction, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KeyAction, ss_AddObserveList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KeyAction, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  355   if(command == PORT_INIT_CLUSTER)
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??KeyAction_0
        MOV     A,R3
??KeyAction_0:
        JZ      $+5
        LJMP    ??KeyAction_1 & 0xFFFF
//  356   {
//  357 /*    uint8 i;
//  358     uint8 port[KEY_INIT_MSG_MAX];
//  359     for(i=0; i<KEY_INIT_MSG_MAX; i++, pData++)
//  360     {
//  361         port[i] = *pData;
//  362     }*/
//  363     uint8 port;
//  364     port = *pData;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R6,A
//  365   //  P2: 1 2 3 4 ; P1: 2 3 4 5 6 7
//  366   //-----------------------------------
//  367   //port: 0 1 2 3       4 5 6 7 8 9
//  368     if(port < KEY_NUM_MAX)
        CLR     C
        SUBB    A,#0xa
        JC      $+5
        LJMP    ??KeyAction_2 & 0xFFFF
//  369     {
//  370         if(port < P2_KEY_MAX)
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        JNC     ??KeyAction_3
//  371         {
//  372             P2SEL &= ~(0x01 << (port + 1));
        MOV     A,#0x1
        ADD     A,R6
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R0,?V0 + 0
        MOV     A,R0
        CPL     A
        ANL     0xf5,A
//  373             P2DIR &= ~(0x01 << (port + 1));
        ANL     0xff,A
//  374             P2IEN |= 0x01 << (port + 1);
        MOV     A,R0
        ORL     0xac,A
//  375             P2IFG = 0;
        MOV     0x8b,#0x0
        SJMP    ??KeyAction_4
//  376         }
//  377         else
//  378         {
//  379             P1SEL &= ~(0x01 << (port - 2));
??KeyAction_3:
        MOV     A,#-0x2
        ADD     A,R6
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     R0,?V0 + 0
        MOV     A,R0
        CPL     A
        ANL     0xf4,A
//  380             P1DIR &= ~(0x01 << (port - 2));
        ANL     0xfe,A
//  381             P1IEN |= 0x01 << (port - 2);
        MOV     A,R0
        ORL     0x8d,A
//  382             P1IFG = 0;
        MOV     0x8a,#0x0
//  383         }
//  384         if(KeyObserve == NULL)
??KeyAction_4:
        MOV     DPTR,#KeyObserve
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??KeyAction_5
//  385         {
//  386           KeyObserve = (SensorObserve_t *)osal_mem_alloc(sizeof(SensorObserve_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     DPTR,#KeyObserve
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine2 & 0xFFFF
//  387           KeyObserve->port = port;
//  388           KeyObserve->next = NULL;
//  389         }
??CrossCallReturnLabel_0:
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        LJMP    ??KeyAction_2 & 0xFFFF
//  390         else
//  391             ss_AddObserveList(KeyObserve, port);
??KeyAction_5:
        ; Setup parameters for call to function ss_AddObserveList
        MOV     A,R6
        MOV     R1,A
        MOV     DPTR,#KeyObserve
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ss_AddObserveList?relay
        SJMP    ??KeyAction_2
//  392         return;
//  393     }
//  394     else
//  395     {
//  396         // send error back
//  397         return;
//  398     }
//  399   }
//  400   if(command == TOGGLE_INIT_CLUSTER)
??KeyAction_1:
        MOV     A,#0x5
        XRL     A,R2
        JNZ     ??KeyAction_6
        MOV     A,R3
??KeyAction_6:
        JNZ     ??KeyAction_2
//  401   {
//  402     uint8 i;
//  403     byte *data_p = NULL;
//  404     data_p = (byte *)osal_mem_alloc(sizeof(byte) * len);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
//  405     for(i=0; i<len; i++, pData++)
        MOV     R2,#0x0
        SJMP    ??KeyAction_7
//  406     {
//  407         data_p[i] = *pData;
??KeyAction_8:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  408     }
        INC     R2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
??KeyAction_7:
        MOV     ?V0 + 2,R2
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 0
        CLR     A
        SUBB    A,?V0 + 1
        JC      ??KeyAction_8
//  409     if(data_p[KEY_TOGGLE_PORT_BIT] > 3) // not exist
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        JNC     ??KeyAction_2
//  410     {
//  411         //send error
//  412         return;
//  413     }
//  414     if(data_p[KEY_TOGGLE_EDGE_BIT] == KEY_RISE_EDGE)
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??KeyAction_9
//  415     {
//  416         PICTL &= ~(0x01<<data_p[KEY_TOGGLE_PORT_BIT]);
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        CPL     A
        ANL     0x8c,A
        SJMP    ??KeyAction_2
//  417     }
//  418     else
//  419     {
//  420         PICTL |= 0x01<<data_p[KEY_TOGGLE_PORT_BIT];
??KeyAction_9:
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ORL     0x8c,A
??KeyAction_2:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
        REQUIRE P2SEL
        REQUIRE P2DIR
        REQUIRE P2IEN
        REQUIRE P2IFG
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE P1IEN
        REQUIRE P1IFG
        REQUIRE PICTL
//  421     }
//  422   }
//  423 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOVX    @DPTR,A
        MOV     DPTR,#KeyObserve
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//  424 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  425 void KeySend2Coor(uint8 dev_num, uint16 commandId, uint8 *pData)
KeySend2Coor:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function KeySend2Coor
        CODE
//  426 {
        FUNCALL KeySend2Coor, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL KeySend2Coor, Sys_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  427     Sys_SendDataRequest( 0xFFFE, &Key_epDesc[dev_num], commandId, (uint8)osal_strlen( pData ),
//  428                            pData, sysSeqNumber, 0, 0 );
        ; Setup parameters for call to function osal_strlen
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_strlen?relay
        ; Setup parameters for call to function Sys_SendDataRequest
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPTR,#sysSeqNumber
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R1,A
        MOV     A,R6
        MOV     B,#0x6
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#Key_epDesc & 0xff
        ADD     A,R2
        MOV     R4,A
        MOV     A,#(Key_epDesc >> 8) & 0xff
        ADDC    A,R3
        MOV     R5,A
        MOV     R2,#-0x2
        MOV     R3,#-0x1
        LCALL   ??Sys_SendDataRequest?relay
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  429 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock9

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Key_ClusterList>`:
        DATA16
        DW 1
        DW 5
        DW 2
        DW 4

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Key_SimpleDesc>`:
        DATA8
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW Key_ClusterList
        DATA8
        DB 4
        DATA16
        DW Key_ClusterList
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Key_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Key_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Key_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Key_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Key_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Key_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??KeyAction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    KeyAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??KeySend2Coor?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    KeySend2Coor

        END
//  430 
//  431 /******************************************************************************
//  432  * @fn          Key_AllowBindConfirm
//  433  *
//  434  * @brief       Indicates when another device attempted to bind to this device
//  435  *
//  436  * @param
//  437  *
//  438  * @return      none
//  439  */
//  440 void Key_AllowBindConfirm( uint16 source )
//  441 {
//  442     Sys_AllowBindConfirm(source);
//  443 }
//  444 
//  445 
// 
// 787 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   9 bytes in segment SFR_AN
// 128 bytes in segment XDATA_I
// 128 bytes in segment XDATA_ID
//  76 bytes in segment XDATA_Z
// 
// 945 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 9 bytes shared)
// 204 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
