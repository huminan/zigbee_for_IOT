###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         30/Mar/2018  14:24:09 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\Source\Led_End.c                    #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\Source\Led_E #
#                          nd.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D        #
#                          REFLECTOR -D POWER_SAVING -D NV_INIT -D            #
#                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D            #
#                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC  #
#                          -lC D:\ProgramData\Hardware\zigbee\Projects\zstack #
#                          \Samples\SensorSys\CC2530DB\EndDeviceEB\List\ -lA  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\          #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e        #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 16 -I     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\Led_End.l #
#                          st                                                 #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\Led_End.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Led_End.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include "sapi.h"
      7          
      8          #include "SensorSys_End.h"
      9          #include "device.h"
     10          #include "DebugTrace.h"
     11          
     12          #if !defined( WIN32 )
     13          	#include "OnBoard.h"
     14          #endif
     15          
     16          /* HAL */
     17          #include "hal_led.h"
     18          #include "hal_key.h"
     19          #include "hal_uart.h"
     20          
     21          /*********************************************************************
     22           * MACROS
     23           */
     24          
     25          /*********************************************************************
     26           * CONSTANTS
     27           */
     28          
     29          /*********************************************************************
     30           * TYPEDEFS
     31           */
     32          
     33          /*********************************************************************
     34           * GLOBAL VARIABLES
     35           */
     36          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     37          byte Led_TaskID;
   \                     Led_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     38          uint8 ledCnt;
   \                     ledCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     39          
     40          
     41          // Led 端点的簇ID
     42          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     43          cId_t Led_ClusterList[LED_MAX_CLUSTERS] =
   \                     Led_ClusterList:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for Led_ClusterList>`
   \   000006                REQUIRE __INIT_XDATA_I
     44          {
     45              LED_LIGHT,
     46              LED_DIM,
     47              LED_FLASH
     48          };
     49          
     50          // Led 端点简单描述符

   \                                 In  segment XDATA_I, align 1, keep-with-next
     51          SimpleDescriptionFormat_t Led_SimpleDesc[LED_NUM_MAX] =
   \                     Led_SimpleDesc:
   \   000000                DS 36
   \   000024                REQUIRE `?<Initializer for Led_SimpleDesc>`
   \   000024                REQUIRE __INIT_XDATA_I
     52          {
     53          	LED_ENDPOINT,           //  int Endpoint;
     54          	SYS_PROFID,                //  uint16 AppProfId[2];
     55          	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
     56          	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
     57          	SYS_FLAGS,                 //  int   AppFlags:4;
     58          	LED_MAX_CLUSTERS,        //  byte  AppNumInClusters;
     59          	(cId_t *)Led_ClusterList,  //  byte *pAppInClusterList;
     60          	0,                          //  byte  AppNumInClusters;
     61          	NULL                         //  byte *pAppInClusterList;
     62          };
     63          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     64          endPointDesc_t Led_epDesc[LED_NUM_MAX];
   \                     Led_epDesc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
     65          
     66          /*********************************************************************
     67           * EXTERNAL VARIABLES
     68           */
     69          extern uint8 myAppState;
     70          extern uint8 keys_shift;
     71          extern uint8 type_join;
     72          /*********************************************************************
     73           * EXTERNAL FUNCTIONS
     74           */
     75          
     76          /*********************************************************************
     77           * LOCAL VARIABLES
     78           */
     79          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          afAddrType_t Led_DstAddr;
   \                     Led_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     81          
     82          /*********************************************************************
     83           * LOCAL FUNCTIONS
     84           */
     85          void Led_Init( byte task_id );
     86          UINT16 Led_ProcessEvent( byte task_id, UINT16 events );
     87          
     88          static void Led_ReceiveDataIndication( uint16 source, uint8 endPoint, 
     89                                        uint16 command, uint16 len, uint8 *pData  );
     90          static void Led_AllowBindConfirm( uint16 source );
     91          /*********************************************************************
     92           * @fn      Led_Init
     93           *
     94           * @brief   Initialization function for the Generic App Task.
     95           *          This is called during initialization and should contain
     96           *          any application specific initialization (ie. hardware
     97           *          initialization/setup, table initialization, power up
     98           *          notificaiton ... ).
     99           *
    100           * @param   task_id - the ID assigned by OSAL.  This ID should be
    101           *                    used to send messages and set timers.
    102           *
    103           * @return  none
    104           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    105          void Led_Init( byte task_id )
   \                     Led_Init:
    106          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    107                  char i;
    108          	Led_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Led_TaskID
   \   000009   F0           MOVX    @DPTR,A
    109          
    110          	// Device hardware initialization can be added here or in main() (Zmain.c).
    111          	// If the hardware is application specific - add it here.
    112          	// If the hardware is other parts of the device add it in main().
    113          
    114          	Led_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#Led_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    115          	Led_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    116          	Led_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#Led_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    117                  
    118                  for( i=0; i<LED_NUM_MAX; i++)
   \   000017   FF           MOV     R7,A
    119                  {
    120                      // Fill out the endpoint description.
    121                      Led_epDesc[i].endPoint = LED_ENDPOINT+i;
   \                     ??Led_Init_0:
   \   000018   8F82         MOV     DPL,R7
   \   00001A   A882         MOV     R0,DPL
   \   00001C   E8           MOV     A,R0
   \   00001D   75F006       MOV     B,#0x6
   \   000020   A4           MUL     AB
   \   000021   FA           MOV     R2,A
   \   000022   ABF0         MOV     R3,B
   \   000024   74..         MOV     A,#Led_epDesc & 0xff
   \   000026   2A           ADD     A,R2
   \   000027   FA           MOV     R2,A
   \   000028   74..         MOV     A,#(Led_epDesc >> 8) & 0xff
   \   00002A   3B           ADDC    A,R3
   \   00002B   FB           MOV     R3,A
   \   00002C   743C         MOV     A,#0x3c
   \   00002E   2F           ADD     A,R7
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   F0           MOVX    @DPTR,A
    122                      Led_epDesc[i].task_id = &Led_TaskID;
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#Led_TaskID & 0xff
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#(Led_TaskID >> 8) & 0xff
   \   00003B   F0           MOVX    @DPTR,A
    123                      Led_SimpleDesc[i] = Led_SimpleDesc[0];
   \   00003C   E8           MOV     A,R0
   \   00003D   75F00C       MOV     B,#0xc
   \   000040   A4           MUL     AB
   \   000041   F8           MOV     R0,A
   \   000042   A9F0         MOV     R1,B
   \   000044   74..         MOV     A,#Led_SimpleDesc & 0xff
   \   000046   28           ADD     A,R0
   \   000047   F8           MOV     R0,A
   \   000048   74..         MOV     A,#(Led_SimpleDesc >> 8) & 0xff
   \   00004A   39           ADDC    A,R1
   \   00004B   F9           MOV     R1,A
   \   00004C   90....       MOV     DPTR,#Led_SimpleDesc
   \   00004F   E8           MOV     A,R0
   \   000050   FC           MOV     R4,A
   \   000051   E9           MOV     A,R1
   \   000052   FD           MOV     R5,A
   \   000053   740C         MOV     A,#0xc
   \   000055   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    124                      Led_epDesc[i].simpleDesc
    125          						= (SimpleDescriptionFormat_t *)&(Led_SimpleDesc[i]);
   \   000058   8A82         MOV     DPL,R2
   \   00005A   8B83         MOV     DPH,R3
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    126                      Led_SimpleDesc[i].EndPoint += i;
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   2F           ADD     A,R7
   \   00006A   F0           MOVX    @DPTR,A
    127          	    Led_epDesc[i].latencyReq = noLatencyReqs;
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
    128                      
    129                      // Register the endpoint description with the AF
    130          	    afRegister( &(Led_epDesc[i]) );
   \   000076                ; Setup parameters for call to function afRegister
   \   000076   12....       LCALL   ??afRegister?relay
    131                  }
   \   000079   0F           INC     R7
   \   00007A   EF           MOV     A,R7
   \   00007B   C3           CLR     C
   \   00007C   9403         SUBB    A,#0x3
   \   00007E   4098         JC      ??Led_Init_0
    132           
    133          	//	ZDO_RegisterForZDOMsg( Led_TaskID, End_Device_Bind_rsp );
    134          	ZDO_RegisterForZDOMsg( Led_TaskID, Match_Desc_rsp );
   \   000080                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000080   7A06         MOV     R2,#0x6
   \   000082   7B80         MOV     R3,#-0x80
   \   000084   90....       MOV     DPTR,#Led_TaskID
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F9           MOV     R1,A
   \   000089   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    135          }
   \   00008C   7F01         MOV     R7,#0x1
   \   00008E   02....       LJMP    ?BANKED_LEAVE_XDATA
    136          
    137          /*********************************************************************
    138           * @fn      Led_ProcessEvent
    139           *
    140           * @brief   Generic Application Task event processor.  This function
    141           *          is called to process all events for the task.  Events
    142           *          include timers, messages and any other user defined events.
    143           *
    144           * @param   task_id  - The OSAL assigned task ID.
    145           * @param   events - events to process.  This is a bit map and can
    146           *                   contain more than one event.
    147           *
    148           * @return  none
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          UINT16 Led_ProcessEvent( byte task_id, UINT16 events )
   \                     Led_ProcessEvent:
    151          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    152              afIncomingMSGPacket_t *MSGpkt = NULL;
    153              (void)task_id;  // Intentionally unreferenced parameter
    154          
    155              if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??Led_ProcessEvent_0 & 0xFFFF
    156              {
    157                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   000011                ; Setup parameters for call to function osal_msg_receive
   \   000011   8016         SJMP    ??Led_ProcessEvent_1
    158                  while ( MSGpkt )
    159                  {
    160                    switch ( MSGpkt->hdr.event )
    161                    {
    162                      case AF_INCOMING_MSG_CMD:
    163                          Led_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
    164                                                  MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
    165                          break;
    166                        
    167                      case ZDO_MATCH_DESC_RSP_SENT:
    168                          Led_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
   \                     ??Led_ProcessEvent_2:
   \   000013                ; Setup parameters for call to function Sys_AllowBindConfirm
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??Sys_AllowBindConfirm?relay
    169                          break;
    170                    }
    171                    // Release the memory
    172                    osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Led_ProcessEvent_3:
   \   00001D                ; Setup parameters for call to function osal_msg_deallocate
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_msg_deallocate?relay
    173              
    174                    // Next
    175                    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Led_TaskID );
   \   000024                ; Setup parameters for call to function osal_msg_receive
   \   000024   90....       MOV     DPTR,#Led_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \                     ??Led_ProcessEvent_1:
   \   000029   12....       LCALL   ??osal_msg_receive?relay
   \   00002C   8A..         MOV     ?V0 + 4,R2
   \   00002E   8B..         MOV     ?V0 + 5,R3
   \   000030   AE..         MOV     R6,?V0 + 4
   \   000032   AF..         MOV     R7,?V0 + 5
   \   000034   EE           MOV     A,R6
   \   000035   4F           ORL     A,R7
   \   000036   6050         JZ      ??Led_ProcessEvent_4
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   24E6         ADD     A,#-0x1a
   \   00003F   6006         JZ      ??Led_ProcessEvent_5
   \   000041   2448         ADD     A,#0x48
   \   000043   60CE         JZ      ??Led_ProcessEvent_2
   \   000045   80D6         SJMP    ??Led_ProcessEvent_3
   \                     ??Led_ProcessEvent_5:
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   EE           MOV     A,R6
   \   000051   2414         ADD     A,#0x14
   \   000053   F582         MOV     DPL,A
   \   000055   EF           MOV     A,R7
   \   000056   3400         ADDC    A,#0x0
   \   000058   F583         MOV     DPH,A
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   24C4         ADD     A,#-0x3c
   \   00005D   6005         JZ      ??Led_ProcessEvent_6
   \   00005F   14           DEC     A
   \   000060   601C         JZ      ??Led_ProcessEvent_7
   \   000062   80B9         SJMP    ??Led_ProcessEvent_3
   \                     ??Led_ProcessEvent_6:
   \   000064   7401         MOV     A,#0x1
   \   000066   68           XRL     A,R0
   \   000067   7001         JNZ     ??Led_ProcessEvent_8
   \   000069   E9           MOV     A,R1
   \                     ??Led_ProcessEvent_8:
   \   00006A   7005         JNZ     ??Led_ProcessEvent_9
   \   00006C                ; Setup parameters for call to function zb_SystemReset
   \   00006C   12....       LCALL   ??zb_SystemReset?relay
   \   00006F   8008         SJMP    ??Led_ProcessEvent_10
   \                     ??Led_ProcessEvent_9:
   \   000071   7402         MOV     A,#0x2
   \   000073   68           XRL     A,R0
   \   000074   7001         JNZ     ??Led_ProcessEvent_11
   \   000076   E9           MOV     A,R1
   \                     ??Led_ProcessEvent_11:
   \   000077   70A4         JNZ     ??Led_ProcessEvent_3
   \                     ??Led_ProcessEvent_10:
   \   000079                ; Setup parameters for call to function zb_SystemReset
   \   000079   12....       LCALL   ??zb_SystemReset?relay
   \   00007C   809F         SJMP    ??Led_ProcessEvent_3
   \                     ??Led_ProcessEvent_7:
   \   00007E   7401         MOV     A,#0x1
   \   000080   68           XRL     A,R0
   \   000081   7001         JNZ     ??Led_ProcessEvent_12
   \   000083   E9           MOV     A,R1
   \                     ??Led_ProcessEvent_12:
   \   000084   7097         JNZ     ??Led_ProcessEvent_3
   \   000086   80F1         SJMP    ??Led_ProcessEvent_10
    176                  }
    177                  return (events ^ SYS_EVENT_MSG);
   \                     ??Led_ProcessEvent_4:
   \   000088   AA..         MOV     R2,?V0 + 0
   \   00008A   E5..         MOV     A,?V0 + 1
   \   00008C   6480         XRL     A,#0x80
   \   00008E   FB           MOV     R3,A
   \   00008F   8004         SJMP    ??Led_ProcessEvent_13
    178              }
    179              return 0;
   \                     ??Led_ProcessEvent_0:
   \   000091   7A00         MOV     R2,#0x0
   \   000093   7B00         MOV     R3,#0x0
   \                     ??Led_ProcessEvent_13:
   \   000095   7F06         MOV     R7,#0x6
   \   000097   02....       LJMP    ?BANKED_LEAVE_XDATA
    180          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Led_ClusterList>`:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Led_SimpleDesc>`:
   \   000000   3C           DB 60
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   03           DB 3
   \   000007   ....         DW Led_ClusterList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
   \   00000C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000014   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Led_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Led_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Led_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Led_ProcessEvent
    181          
    182          /******************************************************************************
    183           * @fn          Led_ReceiveDataIndication
    184           *
    185           * @brief       The SAPI_ReceiveDataIndication callback function is called
    186           *              asynchronously by the ZigBee stack to notify the application
    187           *              when data is received from a peer device.
    188           *
    189           * @param       source - The short address of the peer device that sent the data
    190           *              command - The commandId associated with the data
    191           *              len - The number of bytes in the pData parameter
    192           *              pData - The data sent by the peer device
    193           *
    194           * @return      none
    195           */
    196          void Led_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
    197          {
    198            // LedAction(endPoint-LED_ENDPOINT, command, pData);
    199            
    200            switch (endPoint)
    201            {
    202              case LED_ENDPOINT:
    203                {
    204                  if (command == LED_LIGHT)
    205                  {
    206                       zb_SystemReset();
    207                  }
    208                  if (command == LED_DIM)
    209                  {
    210                       zb_SystemReset();
    211                  }
    212                }
    213              case (LED_ENDPOINT+1):
    214                {
    215                  if (command == LED_LIGHT)
    216                  {
    217                      zb_SystemReset();
    218                  }
    219                }
    220              case (LED_ENDPOINT+2):
    221                {
    222                  if (command == LED_LIGHT)
    223                  {
    224                      
    225                  }
    226                }
    227            }
    228          }
    229          
    230          /******************************************************************************
    231           * @fn          Led_AllowBindConfirm
    232           *
    233           * @brief       Indicates when another device attempted to bind to this device
    234           *
    235           * @param
    236           *
    237           * @return      none
    238           */
    239          void Led_AllowBindConfirm( uint16 source )
    240          {
    241               Sys_AllowBindConfirm(source);
    242          }

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     Led_Init                       1      0      9
       -> afRegister                0      0     18
       -> ZDO_RegisterForZDOMsg     0      0     18
     Led_ProcessEvent               0      0     14
       -> osal_msg_receive          0      0     28
       -> Sys_AllowBindConfirm      0      0     28
       -> osal_msg_deallocate       0      0     28
       -> osal_msg_receive          0      0     28
       -> zb_SystemReset            0      0     28
       -> zb_SystemReset            0      0     28


   Segment part sizes:

     Function/Label                     Bytes
     --------------                     -----
     Led_TaskID                            1
     ledCnt                                1
     Led_ClusterList                       6
     Led_SimpleDesc                       36
     Led_epDesc                           18
     Led_DstAddr                          12
     Led_Init                            145
     Led_ProcessEvent                    154
     ?<Initializer for Led_ClusterList>    6
     ?<Initializer for Led_SimpleDesc>    36
     ??Led_Init?relay                      6
     ??Led_ProcessEvent?relay              6

 
 299 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
  42 bytes in segment XDATA_I
  42 bytes in segment XDATA_ID
  32 bytes in segment XDATA_Z
 
 353 bytes of CODE  memory
  74 bytes of XDATA memory

Errors: none
Warnings: none
