///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        08/Sep/2017  21:42:43 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\Source\Button_End.c               /
//    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\Source\But /
//                          ton_End.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D  /
//                          REFLECTOR -D POWER_SAVING -D NV_INIT -D           /
//                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D           /
//                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                  /
//                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\End /
//                          DeviceEB\List\ -lA D:\ProgramData\Hardware\zigbee /
//                          \Projects\zstack\Samples\SensorSys\CC2530DB\EndDe /
//                          viceEB\List\ --diag_suppress Pe001,Pa010 -o       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\ -I                      /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\Source\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\ /
//                           -I D:\ProgramData\Hardware\zigbee\Projects\zstac /
//                          k\Samples\SensorSys\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\include\ -I D:\ProgramData\Hardware\zig /
//                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\ -I D:\ProgramData\Hardware\zigbee\ /
//                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\high_level\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\ -I                         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\ -I             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\ -I D:\ProgramData\Hardware\zigbee\Projects\ /
//                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\ /
//                          Components\osal\include\ -I                       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\ -I D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\ -I D:\ProgramData\Hardware\zigbee\Pro /
//                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\nwk\ -I                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\ -I D:\ProgramData\Hardware\zigbee\P /
//                          rojects\zstack\Samples\SensorSys\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\ -I D:\ProgramData\Hardware\zigbee\Pr /
//                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I D:\ProgramData\Hardware\zigbee\Project /
//                          s\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -Ohz --require_prototypes  /
//    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\Button_ /
//                          End.s51                                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Button_End

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Button_HandleKeys?relay
        FUNCTION ??Button_HandleKeys?relay,0203H
        PUBLIC ??Button_Init?relay
        FUNCTION ??Button_Init?relay,0203H
        PUBLIC ??Button_ProcessEvent?relay
        FUNCTION ??Button_ProcessEvent?relay,0203H
        PUBLIC Button_ClusterList
        PUBLIC Button_DstAddr
        PUBLIC Button_HandleKeys
        FUNCTION Button_HandleKeys,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        PUBLIC Button_Init
        FUNCTION Button_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Button_ProcessEvent
        FUNCTION Button_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC Button_SimpleDesc
        PUBLIC Button_TaskID
        PUBLIC Button_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
HalLedSet           SYMBOL "HalLedSet"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
Sensor_AllowBind    SYMBOL "Sensor_AllowBind"
zb_WriteConfiguration SYMBOL "zb_WriteConfiguration"
zb_ReadConfiguration SYMBOL "zb_ReadConfiguration"
zb_SystemReset      SYMBOL "zb_SystemReset"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??Sensor_AllowBind?relay SYMBOL "?relay", Sensor_AllowBind
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??zb_ReadConfiguration?relay SYMBOL "?relay", zb_ReadConfiguration
??zb_SystemReset?relay SYMBOL "?relay", zb_SystemReset
??zb_WriteConfiguration?relay SYMBOL "?relay", zb_WriteConfiguration
Button_HandleKeys   SYMBOL "Button_HandleKeys"
??Button_HandleKeys?relay SYMBOL "?relay", Button_HandleKeys
Button_Init         SYMBOL "Button_Init"
??Button_Init?relay SYMBOL "?relay", Button_Init
Button_ProcessEvent SYMBOL "Button_ProcessEvent"
??Button_ProcessEvent?relay SYMBOL "?relay", Button_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sensor_AllowBind
        FUNCTION Sensor_AllowBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_WriteConfiguration
        FUNCTION zb_WriteConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_ReadConfiguration
        FUNCTION zb_ReadConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SystemReset
        FUNCTION zb_SystemReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??Sensor_AllowBind?relay
        FUNCTION ??Sensor_AllowBind?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??zb_ReadConfiguration?relay
        FUNCTION ??zb_ReadConfiguration?relay,00H
        EXTERN ??zb_SystemReset?relay
        FUNCTION ??zb_SystemReset?relay,00H
        EXTERN ??zb_WriteConfiguration?relay
        FUNCTION ??zb_WriteConfiguration?relay,00H
        EXTERN myAppState

// D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Button_End.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include "sapi.h"
//    7 
//    8 #include "SensorSys_End.h"
//    9 #include "DebugTrace.h"
//   10 
//   11 #if !defined( WIN32 )
//   12 	#include "OnBoard.h"
//   13 #endif
//   14 
//   15 /* HAL */
//   16 #include "hal_led.h"
//   17 #include "hal_key.h"
//   18 #include "hal_uart.h"
//   19 
//   20 /*********************************************************************
//   21  * MACROS
//   22  */
//   23 
//   24 /*********************************************************************
//   25  * CONSTANTS
//   26  */
//   27 
//   28 /*********************************************************************
//   29  * TYPEDEFS
//   30  */
//   31 
//   32 /*********************************************************************
//   33  * GLOBAL VARIABLES
//   34  */
//   35 
//   36 
//   37 
//   38 
//   39 
//   40 
//   41 // Button 端点的簇ID
//   42 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   43 const cId_t Button_ClusterList[BUTTON_MAX_CLUSTERS] =
Button_ClusterList:
        DATA16
        DW 3
        DW 0
//   44 {
//   45 	BUTTON_CLUSTERID
//   46 };
//   47 
//   48 // Button 端点简单描述符

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   49 const SimpleDescriptionFormat_t Button_SimpleDesc =
Button_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW Button_ClusterList
        DATA8
        DB 2
        DATA16
        DW Button_ClusterList
//   50 {
//   51 	BUTTON_ENDPOINT,           //  int Endpoint;
//   52 	SYS_PROFID,                //  uint16 AppProfId[2];
//   53 	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
//   54 	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
//   55 	SYS_FLAGS,                 //  int   AppFlags:4;
//   56 	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   57 	(cId_t *)Button_ClusterList,  //  byte *pAppInClusterList;
//   58 	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   59 	(cId_t *)Button_ClusterList   //  byte *pAppInClusterList;
//   60 };
//   61 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   62 endPointDesc_t Button_epDesc;
Button_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   63 
//   64 /*********************************************************************
//   65  * EXTERNAL VARIABLES
//   66  */
//   67 extern uint8 myAppState;
//   68 
//   69 /*********************************************************************
//   70  * EXTERNAL FUNCTIONS
//   71  */
//   72 
//   73 /*********************************************************************
//   74  * LOCAL VARIABLES
//   75  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   76 static uint8 keys_shift = 0;
keys_shift:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   77 static uint8 type_join;
type_join:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   78 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   79 byte Button_TaskID;
Button_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   80 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   81 afAddrType_t Button_DstAddr;
Button_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   82 
//   83 
//   84 /*********************************************************************
//   85  * LOCAL FUNCTIONS
//   86  */
//   87 void Button_Init( byte task_id );
//   88 UINT16 Button_ProcessEvent( byte task_id, UINT16 events );
//   89 void Button_HandleKeys( byte shift, byte keys );
//   90 
//   91 
//   92 /*********************************************************************
//   93  * @fn      Button_Init
//   94  *
//   95  * @brief   Initialization function for the Generic App Task.
//   96  *          This is called during initialization and should contain
//   97  *          any application specific initialization (ie. hardware
//   98  *          initialization/setup, table initialization, power up
//   99  *          notificaiton ... ).
//  100  *
//  101  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  102  *                    used to send messages and set timers.
//  103  *
//  104  * @return  none
//  105  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  106 void Button_Init( byte task_id )
Button_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Button_Init
        CODE
//  107 {
        FUNCALL Button_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  108 	Button_TaskID = task_id;
        MOV     DPTR,#Button_TaskID
        MOVX    @DPTR,A
//  109 
//  110 	// Device hardware initialization can be added here or in main() (Zmain.c).
//  111 	// If the hardware is application specific - add it here.
//  112 	// If the hardware is other parts of the device add it in main().
//  113 
//  114 	Button_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#Button_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  115 	Button_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  116 	Button_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#Button_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  117 
//  118 	// Fill out the endpoint description.
//  119 	Button_epDesc.endPoint = BUTTON_ENDPOINT;
        MOV     DPTR,#Button_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  120 	Button_epDesc.task_id = &Button_TaskID;
        INC     DPTR
        MOV     A,#Button_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Button_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  121 	Button_epDesc.simpleDesc
//  122 						= (SimpleDescriptionFormat_t *)&Button_SimpleDesc;
        INC     DPTR
        MOV     A,#Button_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Button_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  123 	Button_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  124 
//  125 	// Register the endpoint description with the AF
//  126 	afRegister( &Button_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Button_epDesc & 0xff
        MOV     R3,#(Button_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  127 
//  128 	// Register for all key events - This app will handle all key events
//  129 	RegisterForKeys( Button_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#Button_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  130  
//  131 	//	ZDO_RegisterForZDOMsg( Button_TaskID, End_Device_Bind_rsp );
//  132 	ZDO_RegisterForZDOMsg( Button_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Button_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  133 
//  134 	HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock0
//  135   HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  136   HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
//  137 
//  138 }
??CrossCallReturnLabel_0:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  139 
//  140 /*********************************************************************
//  141  * @fn      Button_ProcessEvent
//  142  *
//  143  * @brief   Generic Application Task event processor.  This function
//  144  *          is called to process all events for the task.  Events
//  145  *          include timers, messages and any other user defined events.
//  146  *
//  147  * @param   task_id  - The OSAL assigned task ID.
//  148  * @param   events - events to process.  This is a bit map and can
//  149  *                   contain more than one event.
//  150  *
//  151  * @return  none
//  152  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  153 UINT16 Button_ProcessEvent( byte task_id, UINT16 events )
Button_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Button_ProcessEvent
        CODE
//  154 {
        FUNCALL Button_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, Button_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  155 	afIncomingMSGPacket_t *MSGpkt = NULL;
//  156 	(void)task_id;  // Intentionally unreferenced parameter
//  157 
//  158 	if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??Button_ProcessEvent_0
//  159 	{
//  160     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Button_ProcessEvent_1
//  161     while ( MSGpkt )
//  162     {
//  163       switch ( MSGpkt->hdr.event )
??Button_ProcessEvent_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0xc0
        JNZ     ??Button_ProcessEvent_3
//  164       {
//  165       	case KEY_CHANGE:
//  166       		Button_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
        ; Setup parameters for call to function Button_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Button_HandleKeys?relay
//  167       	break;
//  168       }
//  169       // Release the memory
//  170       osal_msg_deallocate( (uint8 *)MSGpkt );
??Button_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  171 
//  172       // Next
//  173       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Button_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Button_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
??Button_ProcessEvent_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
//  174     }
        MOV     A,R6
        ORL     A,R7
        JNZ     ??Button_ProcessEvent_2
//  175     return (events ^ SYS_EVENT_MSG);
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??Button_ProcessEvent_4
//  176 	}
//  177   return 0;
??Button_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Button_ProcessEvent_4:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  178 }
//  179 
//  180 /*********************************************************************
//  181  * @fn      Button_HandleKeys
//  182  *
//  183  * @brief   Handles all key events for this device.
//  184  *
//  185  * @param   shift - true if in shift/alt.
//  186  * @param   keys - bit field for key events. Valid entries:
//  187  *                 HAL_KEY_SW_4
//  188  *                 HAL_KEY_SW_3
//  189  *                 HAL_KEY_SW_2
//  190  *                 HAL_KEY_SW_1
//  191  *
//  192  * @return  none
//  193  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  194 void Button_HandleKeys( byte shift, byte keys )
Button_HandleKeys:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function Button_HandleKeys
        CODE
//  195 {
        FUNCALL Button_HandleKeys, Sensor_AllowBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, zb_ReadConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R2
        MOV     R6,A
//  196 	uint8 startOptions;
//  197 	uint8 logicalType;
//  198 	// Shift is used to make each button/switch dual purpose.
//  199 	if ( keys_shift )
        MOV     DPTR,#keys_shift
        MOVX    A,@DPTR
        JZ      ??Button_HandleKeys_0
//  200 	{
//  201 		// Allow Binding
//  202 		if ( keys & HAL_KEY_SW_1 )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??Button_HandleKeys_1
//  203 		{
//  204 			if(type_join)
        MOV     DPTR,#type_join
        MOVX    A,@DPTR
        JZ      ??Button_HandleKeys_1
//  205 			{
//  206 				Sensor_AllowBind(10);
        ; Setup parameters for call to function Sensor_AllowBind
        MOV     R1,#0xa
        LCALL   ??Sensor_AllowBind?relay
//  207 				HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  208 			// osal_start_timerEx(Sys_TaskID, CLOSE_BIND_EVT, 10000);
//  209 			
//  210 				keys_shift = 0;
        MOV     DPTR,#keys_shift
        CLR     A
        MOVX    @DPTR,A
//  211 				type_join = 0;
        MOV     DPTR,#type_join
        MOVX    @DPTR,A
        SJMP    ??Button_HandleKeys_1
//  212 			}
//  213 			else
//  214 			{
//  215 				// wrong endpoint the presend send to
//  216 			}
//  217 		}
//  218 		if ( keys & HAL_KEY_SW_2 )
//  219 		{
//  220 		}
//  221 		if ( keys & HAL_KEY_SW_3 )
//  222 		{
//  223 		}
//  224 		if ( keys & HAL_KEY_SW_4 )
//  225 		{
//  226 		}
//  227 	}
//  228 	else
//  229 	{
//  230 		if ( keys & HAL_KEY_SW_1 )
??Button_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??Button_HandleKeys_1
//  231 		{
//  232 			if ( myAppState == APP_INIT )
        MOV     DPTR,#myAppState
        MOVX    A,@DPTR
        JNZ     ??Button_HandleKeys_2
//  233 		    {
//  234 		        // In the init state, keys are used to indicate the logical mode.
//  235 		        // The Switch device is always an end-device
//  236 		        logicalType = ZG_DEVICETYPE_ENDDEVICE;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  237 		        zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_WriteConfiguration?relay
//  238 
//  239 		        // Do more configuration if necessary and then restart device with auto-start bit set
//  240 
//  241 		        zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   ??zb_ReadConfiguration?relay
//  242 		        startOptions = ZCD_STARTOPT_AUTO_START;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  243 		        zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#0x3
        LCALL   ??zb_WriteConfiguration?relay
//  244 		        zb_SystemReset();
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
        SJMP    ??Button_HandleKeys_1
//  245 
//  246     		}
//  247 			else
//  248 			{
//  249 				HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
??Button_HandleKeys_2:
        ; Setup parameters for call to function HalLedSet
        LCALL   ?Subroutine1 & 0xFFFF
//  250 	 			HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
//  251 				HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
//  252 				HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  253 			}
//  254 		}
//  255 
//  256 		if ( keys & HAL_KEY_SW_2 )
//  257 		{
//  258 		/*
//  259 			HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  260 
//  261 			// 想绑定另一个端点
//  262 			dstAddr.addrMode = Addr16Bit;
//  263 			dstAddr.addr.shortAddr = 0x0000; 
//  264 			ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
//  265 														Button_epDesc.endPoint,
//  266 														SENSORSYS_PROFID,
//  267 														SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  268 														SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  269 														FALSE );*/
//  270 		}
//  271 
//  272 		if ( keys & HAL_KEY_SW_3 )
//  273 		{
//  274 		}
//  275 		
//  276 		if ( keys & HAL_KEY_SW_4 )
//  277 		{
//  278 		/*	HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  279 			dstAddr.addrMode = AddrBroadcast;
//  280 			dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  281 			ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
//  282 												SENSORSYS_PROFID,
//  283 												SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  284 												SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  285 												FALSE );
//  286 		*/
//  287 		}
//  288 	}
//  289 }
??Button_HandleKeys_1:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function HalLedSet
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ??HalLedSet?relay
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Button_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Button_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Button_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Button_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Button_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Button_HandleKeys

        END
// 
// 333 bytes in segment BANKED_CODE
//  18 bytes in segment BANK_RELAYS
//  16 bytes in segment XDATA_ROM_C
//  21 bytes in segment XDATA_Z
// 
// 351 bytes of CODE  memory
//  16 bytes of CONST memory
//  21 bytes of XDATA memory
//
//Errors: none
//Warnings: none
