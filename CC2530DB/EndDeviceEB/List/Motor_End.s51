///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        06/Apr/2018  17:28:11 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\Source\Motor_End.c                /
//    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\Source\Mot /
//                          or_End.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D   /
//                          REFLECTOR -D POWER_SAVING -D NV_INIT -D           /
//                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D           /
//                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                  /
//                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\End /
//                          DeviceEB\List\ -lA D:\ProgramData\Hardware\zigbee /
//                          \Projects\zstack\Samples\SensorSys\CC2530DB\EndDe /
//                          viceEB\List\ --diag_suppress Pe001,Pa010 -o       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 -I D:\ProgramData\Hardware\zigbee\Projects\zst /
//                          ack\Samples\SensorSys\CC2530DB\ -I                /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\Source\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\ /
//                           -I D:\ProgramData\Hardware\zigbee\Projects\zstac /
//                          k\Samples\SensorSys\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\include\ -I D:\ProgramData\Hardware\zig /
//                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\ -I D:\ProgramData\Hardware\zigbee\ /
//                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\high_level\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\ -I                         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\ -I             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\ -I D:\ProgramData\Hardware\zigbee\Projects\ /
//                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\ /
//                          Components\osal\include\ -I                       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\ -I D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\ -I D:\ProgramData\Hardware\zigbee\Pro /
//                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\nwk\ -I                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\ -I D:\ProgramData\Hardware\zigbee\P /
//                          rojects\zstack\Samples\SensorSys\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\ -I D:\ProgramData\Hardware\zigbee\Pr /
//                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I D:\ProgramData\Hardware\zigbee\Project /
//                          s\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -Ohz --require_prototypes  /
//    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\Motor_E /
//                          nd.s51                                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Motor_End

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?S_SHL
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??MotorAction?relay,0203H
        FUNCTION ??MotorDone?relay,0203H
        FUNCTION ??MotorUpdate?relay,0203H
        PUBLIC ??Motor_Init?relay
        FUNCTION ??Motor_Init?relay,0203H
        PUBLIC ??Motor_ProcessEvent?relay
        FUNCTION ??Motor_ProcessEvent?relay,0203H
        PUBLIC ??Timer3_uSec?relay
        FUNCTION ??Timer3_uSec?relay,0203H
        FUNCTION MotorAction,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MotorControl
        FUNCTION MotorDone,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION MotorUpdate,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC Motor_ClusterList
        PUBLIC Motor_DstAddr
        PUBLIC Motor_Init
        FUNCTION Motor_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC Motor_ProcessEvent
        FUNCTION Motor_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Motor_SimpleDesc
        PUBLIC Motor_TaskID
        PUBLIC Motor_epDesc
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBLIC Timer3_uSec
        FUNCTION Timer3_uSec,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P1
        PUBLIC motorCnt
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
HalTimerInit        SYMBOL "HalTimerInit"
halTimerIntConnect  SYMBOL "halTimerIntConnect"
osal_msg_receive    SYMBOL "osal_msg_receive"
Sys_AllowBindConfirm SYMBOL "Sys_AllowBindConfirm"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
__xdata_malloc      SYMBOL "__xdata_malloc"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
HalTimerStart       SYMBOL "HalTimerStart"
HalTimerStop        SYMBOL "HalTimerStop"
__xdata_free        SYMBOL "__xdata_free"
osal_set_event      SYMBOL "osal_set_event"
??HalTimerInit?relay SYMBOL "?relay", HalTimerInit
??HalTimerStart?relay SYMBOL "?relay", HalTimerStart
??HalTimerStop?relay SYMBOL "?relay", HalTimerStop
??Sys_AllowBindConfirm?relay SYMBOL "?relay", Sys_AllowBindConfirm
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??__xdata_free?relay SYMBOL "?relay", __xdata_free
??__xdata_malloc?relay SYMBOL "?relay", __xdata_malloc
??afRegister?relay  SYMBOL "?relay", afRegister
??halTimerIntConnect?relay SYMBOL "?relay", halTimerIntConnect
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
Motor_Init          SYMBOL "Motor_Init"
??Motor_Init?relay  SYMBOL "?relay", Motor_Init
Motor_ProcessEvent  SYMBOL "Motor_ProcessEvent"
??Motor_ProcessEvent?relay SYMBOL "?relay", Motor_ProcessEvent
Timer3_uSec         SYMBOL "Timer3_uSec"
??Timer3_uSec?relay SYMBOL "?relay", Timer3_uSec

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalTimerInit
        FUNCTION HalTimerInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halTimerIntConnect
        FUNCTION halTimerIntConnect,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_AllowBindConfirm
        FUNCTION Sys_AllowBindConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN __xdata_malloc
        FUNCTION __xdata_malloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalTimerStart
        FUNCTION HalTimerStart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalTimerStop
        FUNCTION HalTimerStop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN __xdata_free
        FUNCTION __xdata_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalTimerInit?relay
        FUNCTION ??HalTimerInit?relay,00H
        EXTERN ??HalTimerStart?relay
        FUNCTION ??HalTimerStart?relay,00H
        EXTERN ??HalTimerStop?relay
        FUNCTION ??HalTimerStop?relay,00H
        EXTERN ??Sys_AllowBindConfirm?relay
        FUNCTION ??Sys_AllowBindConfirm?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??__xdata_free?relay
        FUNCTION ??__xdata_free?relay,00H
        EXTERN ??__xdata_malloc?relay
        FUNCTION ??__xdata_malloc?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??halTimerIntConnect?relay
        FUNCTION ??halTimerIntConnect?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H

// D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Motor_End.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include "sapi.h"
//    7 
//    8 #include "SensorSys_End.h"
//    9 #include "device.h"
//   10 #include "Motor_End.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   11 
//   12 #include "DebugTrace.h"
//   13 
//   14 #if !defined( WIN32 )
//   15 	#include "OnBoard.h"
//   16 #endif
//   17 
//   18 /* HAL */
//   19 #include "hal_led.h"
//   20 #include "hal_timer.h"
//   21 #include "hal_key.h"
//   22 #include "hal_uart.h"
//   23 
//   24 /*********************************************************************
//   25  * MACROS
//   26  */
//   27 
//   28 /*********************************************************************
//   29  * CONSTANTS
//   30  */
//   31 
//   32 /*********************************************************************
//   33  * TYPEDEFS
//   34  */
//   35 
//   36 /*********************************************************************
//   37  * GLOBAL VARIABLES
//   38  */
//   39 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   40 byte Motor_TaskID;
Motor_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 uint8 motorCnt;
motorCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   42 
//   43 
//   44 // Motor 端点的簇ID
//   45 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_I:XDATA:NOROOT(0)
//   46 cId_t Motor_ClusterList[MOTOR_MAX_CLUSTERS] =
Motor_ClusterList:
        DATA8
        DS 8
        REQUIRE `?<Initializer for Motor_ClusterList>`
        REQUIRE __INIT_XDATA_I
//   47 {
//   48     PORT_INIT_CLUSTER,
//   49     OPERATE_CLUSTER,
//   50     LOOP_OPERATE_CLUSTER,
//   51     DELETE_CLUSTER
//   52 };
//   53 
//   54 // Motor 端点简单描述符

        RSEG XDATA_I:XDATA:NOROOT(0)
//   55 SimpleDescriptionFormat_t Motor_SimpleDesc[MOTOR_NUM_MAX] =
Motor_SimpleDesc:
        DATA8
        DS 24
        REQUIRE `?<Initializer for Motor_SimpleDesc>`
        REQUIRE __INIT_XDATA_I
//   56 {
//   57 	MOTOR_ENDPOINT,           //  int Endpoint;
//   58 	SYS_PROFID,                //  uint16 AppProfId[2];
//   59 	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
//   60 	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
//   61 	SYS_FLAGS,                 //  int   AppFlags:4;
//   62 	MOTOR_MAX_CLUSTERS,        //  byte  AppNumInClusters;
//   63 	(cId_t *)Motor_ClusterList,  //  byte *pAppInClusterList;
//   64 	0,                          //  byte  AppNumInClusters;
//   65 	NULL                         //  byte *pAppInClusterList;
//   66 };
//   67 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   68 endPointDesc_t Motor_epDesc[MOTOR_NUM_MAX];
Motor_epDesc:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   69 
//   70 /*********************************************************************
//   71  * EXTERNAL VARIABLES
//   72  */
//   73 extern uint8 myAppState;
//   74 extern uint8 keys_shift;
//   75 extern uint8 type_join;
//   76 /*********************************************************************
//   77  * EXTERNAL FUNCTIONS
//   78  */
//   79 
//   80 /*********************************************************************
//   81  * LOCAL VARIABLES
//   82  */
//   83 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   84 afAddrType_t Motor_DstAddr;
Motor_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   85 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   86 SensorControl_t MotorControl[MOTOR_NUM_MAX]; 
MotorControl:
        DS 14
        REQUIRE __INIT_XDATA_Z
//   87 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   88 static uint16 motorTimeout[MOTOR_NUM_MAX] = {0, 0};
motorTimeout:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   89 /*********************************************************************
//   90  * LOCAL FUNCTIONS
//   91  */
//   92 void Motor_Init( byte task_id );
//   93 UINT16 Motor_ProcessEvent( byte task_id, UINT16 events );
//   94 
//   95 static void Motor_ReceiveDataIndication( uint16 source, uint8 endPoint, 
//   96                               uint16 command, uint16 len, uint8 *pData  );
//   97 static void Motor_AllowBindConfirm( uint16 source );
//   98 static void MotorAction( uint8 motor, uint16 command, uint16 len, uint8 *pData );
//   99 static void MotorUpdate(uint8 motor, uint8 first_boot);
//  100 static uint8 MotorDone(void);
//  101 /*********************************************************************
//  102  * @fn      Motor_Init
//  103  *
//  104  * @brief   Initialization function for the Generic App Task.
//  105  *          This is called during initialization and should contain
//  106  *          any application specific initialization (ie. hardware
//  107  *          initialization/setup, table initialization, power up
//  108  *          notificaiton ... ).
//  109  *
//  110  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  111  *                    used to send messages and set timers.
//  112  *
//  113  * @return  none
//  114  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  115 void Motor_Init( byte task_id )
Motor_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Motor_Init
        CODE
//  116 {
        FUNCALL Motor_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_Init, HalTimerInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_Init, halTimerIntConnect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  117         char i;
//  118 	Motor_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#Motor_TaskID
        MOVX    @DPTR,A
//  119 
//  120         // Initalize P0 IO direction
//  121         P0SEL &= ~0xf0;
        ANL     0xf3,#0xf
//  122         P0DIR |= 0xf0;
        ORL     0xfd,#0xf0
//  123         
//  124 	// Device hardware initialization can be added here or in main() (Zmain.c).
//  125 	// If the hardware is application specific - add it here.
//  126 	// If the hardware is other parts of the device add it in main().
//  127 
//  128 	Motor_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#Motor_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  129 	Motor_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  130 	Motor_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#Motor_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  131         
//  132         for( i=0; i<MOTOR_NUM_MAX; i++)
        MOV     ?V0 + 1,A
//  133         {
//  134             // Fill out the endpoint description.
//  135             Motor_epDesc[i].endPoint = MOTOR_ENDPOINT+i;
??Motor_Init_0:
        MOV     DPL,?V0 + 1
        MOV     R6,DPL
        MOV     A,R6
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#Motor_epDesc & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(Motor_epDesc >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     A,#0x6e
        ADD     A,?V0 + 1
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  136             Motor_epDesc[i].task_id = &Motor_TaskID;
        INC     DPTR
        MOV     A,#Motor_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Motor_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  137             Motor_SimpleDesc[i] = Motor_SimpleDesc[0];
        MOV     A,R6
        MOV     B,#0xc
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#Motor_SimpleDesc & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(Motor_SimpleDesc >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#Motor_SimpleDesc
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  138             Motor_epDesc[i].simpleDesc
//  139 						= (SimpleDescriptionFormat_t *)&(Motor_SimpleDesc[i]);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  140             Motor_SimpleDesc[i].EndPoint += i;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,?V0 + 1
        LCALL   ?Subroutine7 & 0xFFFF
//  141 	    Motor_epDesc[i].latencyReq = noLatencyReqs;
??CrossCallReturnLabel_12:
        CLR     A
        MOVX    @DPTR,A
//  142             
//  143             // NULL -> pointer
//  144             MotorControl[i].msg = NULL;
        MOV     A,R6
        MOV     B,#0x7
        MUL     AB
        MOV     R6,A
        MOV     R7,B
        MOV     A,#MotorControl & 0xff
        ADD     A,R6
        MOV     DPL,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R7
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  145             
//  146             // Register the endpoint description with the AF
//  147 	    afRegister( &(Motor_epDesc[i]) );
        ; Setup parameters for call to function afRegister
        LCALL   ??afRegister?relay
//  148         }
        INC     ?V0 + 1
        MOV     A,?V0 + 1
        CLR     C
        SUBB    A,#0x2
        JC      ??Motor_Init_0
//  149  
//  150 	//	ZDO_RegisterForZDOMsg( Motor_TaskID, End_Device_Bind_rsp );
//  151 	ZDO_RegisterForZDOMsg( Motor_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  152         
//  153 // Init timer3 for Motor
//  154         HalTimerInit(5);
        ; Setup parameters for call to function HalTimerInit
        MOV     R1,#0x5
        LCALL   ??HalTimerInit?relay
//  155         halTimerIntConnect(Timer3_uSec);
        ; Setup parameters for call to function halTimerIntConnect
        MOV     R2,#??Timer3_uSec?relay & 0xff
        MOV     R3,#(??Timer3_uSec?relay >> 8) & 0xff
        LCALL   ??halTimerIntConnect?relay
//  156 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE P0DIR
//  157 
//  158 /*********************************************************************
//  159  * @fn      Motor_ProcessEvent
//  160  *
//  161  * @brief   Generic Application Task event processor.  This function
//  162  *          is called to process all events for the task.  Events
//  163  *          include timers, messages and any other user defined events.
//  164  *
//  165  * @param   task_id  - The OSAL assigned task ID.
//  166  * @param   events - events to process.  This is a bit map and can
//  167  *                   contain more than one event.
//  168  *
//  169  * @return  none
//  170  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 UINT16 Motor_ProcessEvent( byte task_id, UINT16 events )
Motor_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Motor_ProcessEvent
        CODE
//  172 {
        FUNCALL Motor_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, Sys_AllowBindConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, MotorAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, MotorUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  173     afIncomingMSGPacket_t *MSGpkt = NULL;
//  174     (void)task_id;  // Intentionally unreferenced parameter
//  175 
//  176     if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??Motor_ProcessEvent_0 & 0xFFFF
//  177     {
//  178         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Motor_ProcessEvent_1
//  179         while ( MSGpkt )
//  180         {
//  181           switch ( MSGpkt->hdr.event )
//  182           {
//  183             case AF_INCOMING_MSG_CMD:
//  184                 Motor_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
//  185                                         MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
//  186                 break;
//  187               
//  188             case ZDO_MATCH_DESC_RSP_SENT:
//  189                 Motor_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
??Motor_ProcessEvent_2:
        ; Setup parameters for call to function Sys_AllowBindConfirm
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ??Sys_AllowBindConfirm?relay
//  190                 break;
//  191           }
//  192           // Release the memory
//  193           osal_msg_deallocate( (uint8 *)MSGpkt );
??Motor_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  194     
//  195           // Next
//  196           MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Motor_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
??Motor_ProcessEvent_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??Motor_ProcessEvent_4
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Motor_ProcessEvent_5
        ADD     A,#0x48
        JZ      ??Motor_ProcessEvent_2
        SJMP    ??Motor_ProcessEvent_3
??Motor_ProcessEvent_5:
        ; Setup parameters for call to function MotorAction
        MOV     A,?V0 + 0
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,?V0 + 0
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_53:
        MOV     A,?V0 + 0
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0x6e
        MOV     R1,A
        LCALL   ??MotorAction?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??Motor_ProcessEvent_3
//  197         }
//  198         return (events ^ SYS_EVENT_MSG);
??Motor_ProcessEvent_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        MOV     R3,A
        LJMP    ??Motor_ProcessEvent_6 & 0xFFFF
//  199     }
//  200     if ( (events & 0xFF00) & MOTOR_UPDATE_EVT )
??Motor_ProcessEvent_0:
        MOV     A,R7
        ANL     A,#0x50
        JNZ     $+5
        LJMP    ??Motor_ProcessEvent_7 & 0xFFFF
//  201     {
//  202         uint8 motor;
//  203         motor = (uint8)(events);
        MOV     A,R6
        MOV     R4,A
//  204         uint8 status_m;
//  205         status_m = MotorControl[motor].status;
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#MotorControl & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
//  206         if(MotorControl[motor].msg[status_m].hour)
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        MOVX    A,@DPTR
        JZ      ??Motor_ProcessEvent_8
//  207         {
//  208             if(MotorControl[motor].msg[status_m].min == 0)
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        JNZ     ??Motor_ProcessEvent_9
//  209             {
//  210                 (MotorControl[motor].msg[status_m].hour)--;
        MOV     A,R5
        MOV     B,#0x6
        MUL     AB
        MOV     R6,A
        MOV     R7,B
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_20:
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  211                 MotorControl[motor].msg[status_m].min = 59;
        LCALL   ?Subroutine11 & 0xFFFF
//  212             }
??CrossCallReturnLabel_21:
        INC     DPTR
        MOV     A,#0x3b
        SJMP    ??CrossCallReturnLabel_1
//  213             else
//  214               (MotorControl[motor].msg[status_m].min)--;
??Motor_ProcessEvent_9:
        LCALL   ?Subroutine1 & 0xFFFF
//  215             osal_start_timerEx(Motor_TaskID, MOTOR_UPDATE_EVT, 60000); // calc 1min
//  216         }
??CrossCallReturnLabel_0:
        SJMP    ??CrossCallReturnLabel_1
        ; Setup parameters for call to function osal_start_timerEx
//  217         else
//  218         {
//  219             if(MotorControl[motor].msg[status_m].min == 0)
??Motor_ProcessEvent_8:
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        JNZ     ??Motor_ProcessEvent_10
//  220             {
//  221                 if(MotorControl[motor].msg[status_m].sec == 0)
        MOV     A,R4
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??Motor_ProcessEvent_11
//  222                 {
//  223                     MotorUpdate(motor,0);
        ; Setup parameters for call to function MotorUpdate
        MOV     R2,#0x0
        MOV     A,R4
        MOV     R1,A
        LCALL   ??MotorUpdate?relay
        SJMP    ??Motor_ProcessEvent_7
//  224                     return 0;
//  225                 }
//  226                 else
//  227                 {
//  228                     osal_start_timerEx(Motor_TaskID, MOTOR_UPDATE_EVT, (MotorControl[motor].msg[status_m].sec)*1000);
??Motor_ProcessEvent_11:
        MOV     A,R5
        MOV     B,#0x6
        MUL     AB
        MOV     R6,A
        MOV     R7,B
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_18:
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x50
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  229                     MotorControl[motor].msg[status_m].sec = 0;
        LCALL   ?Subroutine10 & 0xFFFF
//  230                 }
//  231             }
??CrossCallReturnLabel_19:
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??Motor_ProcessEvent_7
//  232             else
//  233             {
//  234               (MotorControl[motor].msg[status_m].min)--;
??Motor_ProcessEvent_10:
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        MOVX    @DPTR,A
//  235               osal_start_timerEx(Motor_TaskID, MOTOR_UPDATE_EVT, 60000); // calc 1min
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x60
        MOV     R5,#-0x16
        MOV     R2,#0x0
        MOV     R3,#0x50
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  236             }
//  237         }
//  238         return 0;
??Motor_ProcessEvent_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Motor_ProcessEvent_6:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  239     }
//  240     return 0;
//  241 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_37:
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_21
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_18
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_19
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,R6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R7
        MOV     DPL,R0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_36:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_30:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     A,R4
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_27:
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_5
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_0
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_1
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_41:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond24 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        MOV     A,R4
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_26:
        DEC     A
        RET
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26
//  242 
//  243 /******************************************************************************
//  244  * @fn          Motor_ReceiveDataIndication
//  245  *
//  246  * @brief       The SAPI_ReceiveDataIndication callback function is called
//  247  *              asynchronously by the ZigBee stack to notify the application
//  248  *              when data is received from a peer device.
//  249  *
//  250  * @param       source - The short address of the peer device that sent the data
//  251  *              command - The commandId associated with the data
//  252  *              len - The number of bytes in the pData parameter
//  253  *              pData - The data sent by the peer device
//  254  *
//  255  * @return      none
//  256  */
//  257 void Motor_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
//  258 {
//  259   MotorAction(endPoint-MOTOR_ENDPOINT, command, len, pData);
//  260 }
//  261 
//  262 /******************************************************************************
//  263  * @fn          Motor_AllowBindConfirm
//  264  *
//  265  * @brief       Indicates when another device attempted to bind to this device
//  266  *
//  267  * @param
//  268  *
//  269  * @return      none
//  270  */
//  271 void Motor_AllowBindConfirm( uint16 source )
//  272 {
//  273      Sys_AllowBindConfirm(source);
//  274 }
//  275 
//  276 /******************************************************************************
//  277  * @fn          MotorAction
//  278  *
//  279  * @brief       Motor Action Decide
//  280  *
//  281  * @param
//  282  *
//  283  * @return      none
//  284  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  285 void MotorAction( uint8 motor, uint16 command, uint16 len, uint8 *pData )
MotorAction:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function MotorAction
        CODE
//  286 {
        FUNCALL MotorAction, __xdata_malloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, MotorUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  287   // pData contains : " velocity(r/min), delay(0xffff: never)(sec), velocity, delay, ... "
//  288   if(command == PORT_INIT_CLUSTER)
        MOV     A,R2
        JNZ     ??MotorAction_0
        MOV     A,#0x10
        XRL     A,?V0 + 1
??MotorAction_0:
        JNZ     ??MotorAction_1
//  289   {
//  290     uint8 port;
//  291     port = *pData;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
//  292     if(port < MOTOR_NUM_MAX)    // Port: 0, 1
        CLR     C
        SUBB    A,#0x2
        JC      $+5
        LJMP    ??MotorAction_2 & 0xFFFF
//  293     {
//  294         P1DIR |= 0x03 << (port*2);
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     A,R1
        CLR     C
        RLC     A
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ORL     0xfe,A
//  295         MotorControl[motor].port = port;
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 2
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_34:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  296         return;
        LJMP    ??MotorAction_2 & 0xFFFF
//  297     }
//  298     else
//  299     {
//  300         // send error back
//  301         return;
//  302     }
//  303   }
//  304   
//  305   
//  306   if(motor>=MOTOR_NUM_MAX)return;   // data error
??MotorAction_1:
        MOV     A,R1
        CLR     C
        SUBB    A,#0x2
        JC      $+5
        LJMP    ??MotorAction_2 & 0xFFFF
//  307   if( len % OPERATE_MSG_NUM )return;  // data error: Must be 6 data each group
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 5,R3
        MOV     A,R2
        ORL     A,?V0 + 5
        JZ      $+5
        LJMP    ??MotorAction_2 & 0xFFFF
//  308 
//  309   uint16 len_t;
//  310   sensor_msg_t *msg_t = NULL;
//  311   len_t = len/OPERATE_MSG_NUM;
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,R1
//  312   msg_t = (sensor_msg_t *)malloc(sizeof(sensor_msg_t) * len_t);
        ; Setup parameters for call to function __xdata_malloc
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        MOV     R2,A
        MOV     R0,B
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   ??__xdata_malloc?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
//  313   uint16 v;
//  314   uint8 i;
//  315   for(i=0; i<len_t; i++)
        MOV     ?V0 + 3,#0x0
        SJMP    ??MotorAction_3
//  316   {
//  317       if(pData[i*OPERATE_MSG_NUM] >= 1)      // direction
//  318         msg_t[i].value = 1;
//  319       else
//  320         msg_t[i].value = 0;
??MotorAction_4:
        MOV     A,R4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
??MotorAction_5:
        MOVX    @DPTR,A
//  321       
//  322       v = (pData[i*OPERATE_MSG_NUM+1]<<8) | pData[i*OPERATE_MSG_NUM+2];
//  323       msg_t[i].level = 150000/TIMER3_INT_DELAY/v;  // velocity
        MOV     A,?V0 + 3
        MOV     B,#0x6
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,R4
        ADD     A,R2
        MOV     R0,A
        MOV     A,R5
        ADDC    A,R3
        MOV     R1,A
        MOV     ?V0 + 6,R0
        MOV     ?V0 + 7,R1
        MOV     A,R6
        ADD     A,R2
        MOV     R0,A
        MOV     A,R7
        ADDC    A,R3
        MOV     R1,A
        MOV     ?V0 + 8,R0
        MOV     ?V0 + 9,R1
        MOV     R0,#-0x18
        MOV     R1,#0x3
        MOV     DPL,?V0 + 8
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?US_DIV_MOD
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine16 & 0xFFFF
//  324       msg_t[i].hour = pData[i*OPERATE_MSG_NUM+3];
??CrossCallReturnLabel_28:
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        LCALL   ?Subroutine6 & 0xFFFF
//  325       msg_t[i].min = pData[i*OPERATE_MSG_NUM+4];
??CrossCallReturnLabel_10:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?Subroutine6 & 0xFFFF
//  326       msg_t[i].sec = pData[i*OPERATE_MSG_NUM+5];
??CrossCallReturnLabel_11:
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_23:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        INC     ?V0 + 3
??MotorAction_3:
        MOV     ?V0 + 6,?V0 + 3
        CLR     C
        MOV     A,?V0 + 6
        SUBB    A,?V0 + 4
        CLR     A
        SUBB    A,?V0 + 5
        JNC     ??MotorAction_6
        MOV     A,?V0 + 3
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??MotorAction_4 & 0xFFFF
        MOV     A,R4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,#0x1
        LJMP    ??MotorAction_5 & 0xFFFF
//  327   }
//  328   MotorControl[motor].msg = msg_t;
??MotorAction_6:
        MOV     DPL,?V0 + 2
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  329   MotorControl[motor].total = len_t;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        LCALL   ?Subroutine18 & 0xFFFF
//  330   MotorControl[motor].status = 0;
??CrossCallReturnLabel_32:
        CLR     A
        LCALL   ?Subroutine7 & 0xFFFF
//  331   MotorControl[motor].command = command;
??CrossCallReturnLabel_13:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  332   
//  333   /**************************** use ',' devide datas
//  334   // devide word between No.3 and No.4 ','
//  335   if(motor>=MOTOR_NUM_MAX)return;   // data error
//  336   uint8 i;
//  337   uint8 posx1, posx2;
//  338   uint8 num = Num_Pos(len, pData);
//  339   uint8 motorVelocity_arr[5], motorDelay_arr[5];
//  340   if(num%2)return;  // data error
//  341   if(num/2 > MOTOR_MAX_OPERATION)num = MOTOR_MAX_OPERATION*2;   // data too long
//  342   
//  343   posx1 = 0;
//  344   for(i=0; i<num; i++)
//  345   {
//  346       posx2 = Locate_Pos(pData, i+1);
//  347       if(posx2 - posx1 == 0)
//  348         return; //data error
//  349       if(i%2)
//  350       {
//  351         mid(motorDelay_arr, pData, posx2-posx1-1,posx1);
//  352         MotorControl[motor].delay[i/2] = atoi(motorDelay_arr);
//  353       }
//  354       else
//  355       {
//  356         mid(motorVelocity_arr, pData, posx2-posx1-1,posx1);
//  357         MotorControl[motor].velocity[i/2] = 150000/TIMER3_INT_DELAY/atoi(motorVelocity_arr);
//  358       }
//  359       posx1 = posx2;
//  360   }
//  361   MotorControl[motor].total = num/2;
//  362   MotorControl[motor].direct = command;
//  363   MotorControl[motor].status = 0;
//  364   */
//  365   
//  366   uint16 event_t;
//  367   event_t = MOTOR_UPDATE_EVT | motor;       // 0x5000 | 0x00??
//  368   
//  369   osal_stop_timerEx(Motor_TaskID, event_t);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     A,R0
        MOV     R2,A
        MOV     R3,#0x50
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  370   MotorUpdate(motor, 1);
        ; Setup parameters for call to function MotorUpdate
        MOV     R2,#0x1
        MOV     R1,?V0 + 2
        LCALL   ??MotorUpdate?relay
//  371 }
??MotorAction_2:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock27
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_33:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_32
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_12
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_13
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_29:
        INC     DPTR
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond41 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_28
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_10
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_29, ??CrossCallReturnLabel_11
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker44 Using cfiCommon1
        CFI (cfiPicker44) NoFunction
        CFI (cfiPicker44) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiPicker44
//  372 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  373 void MotorUpdate(uint8 motor, uint8 first_boot)
MotorUpdate:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function MotorUpdate
        CODE
//  374 {
        FUNCALL MotorUpdate, MotorDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, HalTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, MotorDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, HalTimerStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, __xdata_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  375     uint8 status_m;
//  376     status_m = MotorControl[motor].status;
        MOV     DPL,R7
        MOV     A,DPL
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     A,R2
        MOV     R1,A
        MOV     A,#MotorControl & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  377     if(status_m == (MotorControl[motor].total)-1)
        MOV     ?V0 + 2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOV     R0,A
        CLR     A
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        XRL     A,?V0 + 2
        JNZ     ??MotorUpdate_0
        MOV     A,R1
??MotorUpdate_0:
        JNZ     ??MotorUpdate_1
//  378     {
//  379         if(MotorControl[motor].command == LOOP_OPERATE_CLUSTER)
        MOV     A,R7
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     A,R2
        MOV     R1,A
        MOV     A,#(MotorControl + 5) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((MotorControl + 5) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??MotorUpdate_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x10
??MotorUpdate_2:
        JNZ     ??MotorUpdate_3
//  380         {
//  381             MotorControl[motor].status = 0x00;
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_16:
        CLR     A
        MOVX    @DPTR,A
//  382             status_m = 0xff;
        MOV     ?V0 + 0,#-0x1
//  383         }
//  384         else
//  385         {
//  386             // STOP
//  387             // Sleep Pin -> low
//  388             (MotorControl[motor].status)++;
//  389             motorTimeout[motor] = 0;
//  390             if(MotorDone())
//  391             {
//  392                 HalTimerStop();
//  393                 free(MotorControl[motor].msg);
//  394             }
//  395             return;
//  396         }
//  397     }
//  398     if(MotorDone())   // first boot
??MotorUpdate_1:
        ; Setup parameters for call to function MotorDone
        LCALL   ??MotorDone?relay
        MOV     A,R1
        JZ      ??MotorUpdate_4
//  399     {
//  400       motorTimeout[motor] = MotorControl[motor].msg[status_m].level;
        LCALL   ?Subroutine0 & 0xFFFF
//  401       HalTimerStart();
??CrossCallReturnLabel_46:
        ; Setup parameters for call to function HalTimerStart
        LCALL   ??HalTimerStart?relay
        SJMP    ??CrossCallReturnLabel_47
//  402     }
??MotorUpdate_3:
        MOV     DPL,R7
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#(MotorControl + 3) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((MotorControl + 3) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_49:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function MotorDone
        LCALL   ??MotorDone?relay
        MOV     A,R1
        JZ      ??MotorUpdate_5
        ; Setup parameters for call to function HalTimerStop
        LCALL   ??HalTimerStop?relay
        ; Setup parameters for call to function __xdata_free
        MOV     A,R7
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#MotorControl & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ??__xdata_free?relay
        SJMP    ??MotorUpdate_5
//  403     else
//  404     {
//  405       if(!first_boot)
??MotorUpdate_4:
        MOV     A,R6
        JNZ     ??MotorUpdate_6
//  406       {
//  407           if(status_m == 0xff)
        MOV     A,#-0x1
        XRL     A,?V0 + 0
        JNZ     ??MotorUpdate_7
//  408           {
//  409             status_m = 0;
        MOV     ?V0 + 0,#0x0
        SJMP    ??MotorUpdate_6
//  410           }
//  411           else
//  412           {
//  413             MotorControl[motor].status = status_m+1;
??MotorUpdate_7:
        MOV     A,#0x1
        ADD     A,?V0 + 0
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R7
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_17:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  414             status_m++;
        INC     ?V0 + 0
//  415           }
//  416       }
//  417       motorTimeout[motor] = MotorControl[motor].msg[status_m].level;
??MotorUpdate_6:
        LCALL   ?Subroutine0 & 0xFFFF
//  418     }
//  419     
//  420     switch (MotorControl[motor].port)
??CrossCallReturnLabel_47:
        MOV     A,R7
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_14:
        JZ      ??MotorUpdate_8
        DEC     A
        JZ      ??MotorUpdate_9
        SJMP    ??MotorUpdate_10
//  421     {
//  422       case 0:
//  423         MOTOR_DIR_1 = MotorControl[motor].msg[status_m].value;
??MotorUpdate_8:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     0x90.2,C
//  424         break;
        SJMP    ??MotorUpdate_10
//  425       case 1:
//  426         MOTOR_DIR_2 = MotorControl[motor].msg[status_m].value;
??MotorUpdate_9:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     0x90.4,C
//  427         break;
//  428     }
//  429     
//  430     uint16 event_t;
//  431     event_t = MOTOR_UPDATE_EVT | motor;       // 0x5000 | 0x00??
//  432     /*
//  433     if(MotorControl[motor].msg[status_m].hour || MotorControl[motor].msg[status_m].min)
//  434       osal_start_timerEx(Motor_TaskID, event_t, 60000); // calc 1min
//  435     else
//  436       osal_start_timerEx(Motor_TaskID, event_t, (MotorControl[motor].msg[status_m].sec)*1000);
//  437       MotorControl[motor].msg[status_m].sec = 0;*/
//  438     osal_set_event(Motor_TaskID, event_t);
??MotorUpdate_10:
        ; Setup parameters for call to function osal_set_event
        MOV     A,R7
        MOV     R2,A
        MOV     R3,#0x50
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  439 }
??MotorUpdate_5:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock45
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_49
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_46
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_47
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_45
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOV     A,R0
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_3
        CFI (cfiCond52) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond52) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond52) CFA_SP SP+-5
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_46
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_47
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_50, ??CrossCallReturnLabel_45
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#motorTimeout & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(motorTimeout >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond58 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+-1
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOV     A,#(MotorControl + 3) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((MotorControl + 3) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond61 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOV     A,?V0 + 0
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,R7
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_31:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        RET
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_8
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_9
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_46
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_47
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_44:
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_5
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_0
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_1
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_38
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_8
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_9
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_46
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_47
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker79 Using cfiCommon1
        CFI (cfiPicker79) NoFunction
        CFI (cfiPicker79) Picker
        MOV     A,#MotorControl & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond80 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_7
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_8
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_9
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker84 Using cfiCommon1
        CFI (cfiPicker84) NoFunction
        CFI (cfiPicker84) Picker
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_42:
        RET
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiPicker84

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_5
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_0
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_1
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_6
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_7
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond91 Using cfiCommon0
        CFI (cfiCond91) NoFunction
        CFI (cfiCond91) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_8
        CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond91) CFA_SP SP+0
        CFI (cfiCond91) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_9
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker96 Using cfiCommon1
        CFI (cfiPicker96) NoFunction
        CFI (cfiPicker96) Picker
        MOV     DPL,R7
        MOV     R0,DPL
        MOV     A,?V0 + 0
        MOV     B,#0x6
        MUL     AB
        MOV     R4,A
        MOV     R5,B
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     ?V0 + 1,B
        MOV     R3,?V0 + 1
        LCALL   ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiPicker96
??CrossCallReturnLabel_39:
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker100 Using cfiCommon1
        CFI (cfiPicker100) NoFunction
        CFI (cfiPicker100) Picker
        MOVX    A,@DPTR
        ADD     A,R4
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R5
        MOV     DPL,R2
        MOV     DPH,A
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiPicker100

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond101 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_52
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond102 Using cfiCommon0
        CFI (cfiCond102) NoFunction
        CFI (cfiCond102) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond102) CFA_SP SP+0
        CFI (cfiCond102) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker103 Using cfiCommon1
        CFI (cfiPicker103) NoFunction
        CFI (cfiPicker103) Picker
        INC     DPTR
        CFI EndBlock cfiCond101
        CFI EndBlock cfiCond102
        CFI EndBlock cfiPicker103
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond104 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_47
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_45
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker109 Using cfiCommon1
        CFI (cfiPicker109) NoFunction
        CFI (cfiPicker109) Picker
        INC     DPTR
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiPicker109
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
        CFI Block cfiCond110 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond111 Using cfiCommon0
        CFI (cfiCond111) NoFunction
        CFI (cfiCond111) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_46
        CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond111) CFA_SP SP+0
        CFI (cfiCond111) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond112 Using cfiCommon0
        CFI (cfiCond112) NoFunction
        CFI (cfiCond112) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_47
        CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond112) CFA_SP SP+0
        CFI (cfiCond112) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond113 Using cfiCommon0
        CFI (cfiCond113) NoFunction
        CFI (cfiCond113) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_45
        CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond113) CFA_SP SP+0
        CFI (cfiCond113) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_52
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker116 Using cfiCommon1
        CFI (cfiPicker116) NoFunction
        CFI (cfiPicker116) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond110
        CFI EndBlock cfiCond111
        CFI EndBlock cfiCond112
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiPicker116
//  440 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  441 void Timer3_uSec()
Timer3_uSec:
        CFI Block cfiBlock117 Using cfiCommon0
        CFI Function Timer3_uSec
        CODE
//  442 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  443     for(char i = 0; i<MOTOR_NUM_MAX; i++)
        MOV     R6,#0x0
//  444     {
//  445         if(motorTimeout[i] == 0)
??Timer3_uSec_0:
        MOV     A,R6
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??CrossCallReturnLabel_45
//  446         {
//  447           continue;
//  448         }
//  449         motorTimeout[i]--;
        MOV     DPL,R6
        MOV     A,DPL
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#motorTimeout & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(motorTimeout >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  450         if(motorTimeout[i] == 0)
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??CrossCallReturnLabel_45
//  451         {
//  452             // reverse
//  453             switch(MotorControl[i].port)
        MOV     A,R6
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        JZ      ??Timer3_uSec_1
        DEC     A
        JZ      ??Timer3_uSec_2
        SJMP    ??Timer3_uSec_3
//  454             {
//  455             case 0:
//  456               MOTOR_STEP_1 ^= 1;
??Timer3_uSec_1:
        XRL     0x90,#0x8
//  457               break;
        SJMP    ??Timer3_uSec_3
//  458             case 1:
//  459               MOTOR_STEP_2 ^= 1;
??Timer3_uSec_2:
        XRL     0x90,#0x20
//  460               break;
//  461             }
//  462             motorTimeout[i] = MotorControl[i].msg[MotorControl[i].status].level;
??Timer3_uSec_3:
        MOV     DPL,R6
        LCALL   ?Subroutine13 & 0xFFFF
//  463         }
//  464     }
??CrossCallReturnLabel_25:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     B,#0x6
        MUL     AB
        MOV     R4,A
        MOV     R5,B
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_45:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x2
        JC      ??Timer3_uSec_0
//  465 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock117
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond118 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker120 Using cfiCommon1
        CFI (cfiPicker120) NoFunction
        CFI (cfiPicker120) Picker
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#MotorControl & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond121 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker123 Using cfiCommon1
        CFI (cfiPicker123) NoFunction
        CFI (cfiPicker123) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond124 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond125 Using cfiCommon0
        CFI (cfiCond125) NoFunction
        CFI (cfiCond125) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_14
        CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond125) CFA_SP SP+0
        CFI (cfiCond125) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond126 Using cfiCommon0
        CFI (cfiCond126) NoFunction
        CFI (cfiCond126) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_15
        CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond126) CFA_SP SP+0
        CFI (cfiCond126) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker127 Using cfiCommon1
        CFI (cfiPicker127) NoFunction
        CFI (cfiPicker127) Picker
        MOV     B,#0x7
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(MotorControl + 4) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((MotorControl + 4) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond124
        CFI EndBlock cfiCond125
        CFI EndBlock cfiCond126
        CFI EndBlock cfiPicker127
//  466 
//  467 
//  468 // Whether all of motor is stop: 1 -> yes

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  469 uint8 MotorDone(void)
MotorDone:
        CFI Block cfiBlock128 Using cfiCommon0
        CFI Function MotorDone
        CODE
//  470 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  471     char i=0;
        MOV     R2,#0x0
//  472     for(i; i<MOTOR_NUM_MAX; i++)
//  473     {
//  474         if(motorTimeout[i]!=0)    
??MotorDone_0:
        MOV     A,R2
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ      ??MotorDone_1
//  475         { 
//  476           // if not 0 : running
//  477             return 0;   // not first
        MOV     R1,#0x0
        SJMP    ??MotorDone_2
//  478         }
//  479     }
??MotorDone_1:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x2
        JC      ??MotorDone_0
//  480     // all is 0 : all is Stop
//  481     return 1;
        MOV     R1,#0x1
??MotorDone_2:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock128
//  482 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond129 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond130) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond130) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond130) CFA_SP SP+-5
        CFI Block cfiPicker131 Using cfiCommon1
        CFI (cfiPicker131) NoFunction
        CFI (cfiPicker131) Picker
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_48:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiPicker131

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Motor_ClusterList>`:
        DATA16
        DW 4096
        DW 4097
        DW 4098
        DW 4099

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Motor_SimpleDesc>`:
        DATA8
        DB 110
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 4
        DATA16
        DW Motor_ClusterList
        DATA8
        DB 0
        DATA16
        DW 0H
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Motor_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Motor_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Motor_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Motor_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MotorAction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MotorAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MotorUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MotorUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Timer3_uSec?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Timer3_uSec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MotorDone?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MotorDone

        END
// 
// 1 603 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//     4 bytes in segment SFR_AN
//    32 bytes in segment XDATA_I
//    32 bytes in segment XDATA_ID
//    44 bytes in segment XDATA_Z
// 
// 1 671 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 4 bytes shared)
//    76 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
