///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        30/Mar/2018  15:32:36 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\Source\Motor_End.c                /
//    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\Source\Mot /
//                          or_End.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D   /
//                          REFLECTOR -D POWER_SAVING -D NV_INIT -D           /
//                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D           /
//                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                  /
//                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\End /
//                          DeviceEB\List\ -lA D:\ProgramData\Hardware\zigbee /
//                          \Projects\zstack\Samples\SensorSys\CC2530DB\EndDe /
//                          viceEB\List\ --diag_suppress Pe001,Pa010 -o       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 -I D:\ProgramData\Hardware\zigbee\Projects\zst /
//                          ack\Samples\SensorSys\CC2530DB\ -I                /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\Source\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\ /
//                           -I D:\ProgramData\Hardware\zigbee\Projects\zstac /
//                          k\Samples\SensorSys\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\include\ -I D:\ProgramData\Hardware\zig /
//                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\ -I D:\ProgramData\Hardware\zigbee\ /
//                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\high_level\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\ -I                         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\ -I             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\ -I D:\ProgramData\Hardware\zigbee\Projects\ /
//                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\ /
//                          Components\osal\include\ -I                       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\ -I D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\ -I D:\ProgramData\Hardware\zigbee\Pro /
//                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\nwk\ -I                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\ -I D:\ProgramData\Hardware\zigbee\P /
//                          rojects\zstack\Samples\SensorSys\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\ -I D:\ProgramData\Hardware\zigbee\Pr /
//                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I D:\ProgramData\Hardware\zigbee\Project /
//                          s\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -Ohz --require_prototypes  /
//    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\Motor_E /
//                          nd.s51                                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Motor_End

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??MotorAction?relay,0203H
        FUNCTION ??MotorDone?relay,0203H
        FUNCTION ??MotorUpdate?relay,0203H
        PUBLIC ??Motor_Init?relay
        FUNCTION ??Motor_Init?relay,0203H
        PUBLIC ??Motor_ProcessEvent?relay
        FUNCTION ??Motor_ProcessEvent?relay,0203H
        PUBLIC ??Timer3_uSec?relay
        FUNCTION ??Timer3_uSec?relay,0203H
        FUNCTION MotorAction,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 34, STACK
        PUBLIC MotorControl
        FUNCTION MotorDone,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION MotorUpdate,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Motor_ClusterList
        PUBLIC Motor_DstAddr
        PUBLIC Motor_Init
        FUNCTION Motor_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Motor_ProcessEvent
        FUNCTION Motor_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Motor_SimpleDesc
        PUBLIC Motor_TaskID
        PUBLIC Motor_epDesc
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC Timer3_uSec
        FUNCTION Timer3_uSec,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBWEAK _A_P0
        PUBLIC motorCnt
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
HalTimerInit        SYMBOL "HalTimerInit"
halTimerIntConnect  SYMBOL "halTimerIntConnect"
osal_msg_receive    SYMBOL "osal_msg_receive"
Sys_AllowBindConfirm SYMBOL "Sys_AllowBindConfirm"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
Num_Pos             SYMBOL "Num_Pos"
mid                 SYMBOL "mid"
atoi                SYMBOL "atoi"
Locate_Pos          SYMBOL "Locate_Pos"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_set_event      SYMBOL "osal_set_event"
HalTimerStop        SYMBOL "HalTimerStop"
HalTimerStart       SYMBOL "HalTimerStart"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??HalTimerInit?relay SYMBOL "?relay", HalTimerInit
??HalTimerStart?relay SYMBOL "?relay", HalTimerStart
??HalTimerStop?relay SYMBOL "?relay", HalTimerStop
??Locate_Pos?relay  SYMBOL "?relay", Locate_Pos
??Num_Pos?relay     SYMBOL "?relay", Num_Pos
??Sys_AllowBindConfirm?relay SYMBOL "?relay", Sys_AllowBindConfirm
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??atoi?relay        SYMBOL "?relay", atoi
??halTimerIntConnect?relay SYMBOL "?relay", halTimerIntConnect
??mid?relay         SYMBOL "?relay", mid
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
Motor_Init          SYMBOL "Motor_Init"
??Motor_Init?relay  SYMBOL "?relay", Motor_Init
Motor_ProcessEvent  SYMBOL "Motor_ProcessEvent"
??Motor_ProcessEvent?relay SYMBOL "?relay", Motor_ProcessEvent
Timer3_uSec         SYMBOL "Timer3_uSec"
??Timer3_uSec?relay SYMBOL "?relay", Timer3_uSec

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalTimerInit
        FUNCTION HalTimerInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN halTimerIntConnect
        FUNCTION halTimerIntConnect,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_AllowBindConfirm
        FUNCTION Sys_AllowBindConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Num_Pos
        FUNCTION Num_Pos,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN mid
        FUNCTION mid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN atoi
        FUNCTION atoi,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Locate_Pos
        FUNCTION Locate_Pos,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalTimerStop
        FUNCTION HalTimerStop,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalTimerStart
        FUNCTION HalTimerStart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalTimerInit?relay
        FUNCTION ??HalTimerInit?relay,00H
        EXTERN ??HalTimerStart?relay
        FUNCTION ??HalTimerStart?relay,00H
        EXTERN ??HalTimerStop?relay
        FUNCTION ??HalTimerStop?relay,00H
        EXTERN ??Locate_Pos?relay
        FUNCTION ??Locate_Pos?relay,00H
        EXTERN ??Num_Pos?relay
        FUNCTION ??Num_Pos?relay,00H
        EXTERN ??Sys_AllowBindConfirm?relay
        FUNCTION ??Sys_AllowBindConfirm?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??atoi?relay
        FUNCTION ??atoi?relay,00H
        EXTERN ??halTimerIntConnect?relay
        FUNCTION ??halTimerIntConnect?relay,00H
        EXTERN ??mid?relay
        FUNCTION ??mid?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H

// D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Motor_End.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include "sapi.h"
//    7 
//    8 #include "SensorSys_End.h"
//    9 #include "device.h"
//   10 #include "Motor_End.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   11 
//   12 #include "DebugTrace.h"
//   13 
//   14 #if !defined( WIN32 )
//   15 	#include "OnBoard.h"
//   16 #endif
//   17 
//   18 /* HAL */
//   19 #include "hal_led.h"
//   20 #include "hal_timer.h"
//   21 #include "hal_key.h"
//   22 #include "hal_uart.h"
//   23 
//   24 /*********************************************************************
//   25  * MACROS
//   26  */
//   27 
//   28 /*********************************************************************
//   29  * CONSTANTS
//   30  */
//   31 
//   32 /*********************************************************************
//   33  * TYPEDEFS
//   34  */
//   35 
//   36 /*********************************************************************
//   37  * GLOBAL VARIABLES
//   38  */
//   39 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   40 byte Motor_TaskID;
Motor_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   41 uint8 motorCnt;
motorCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   42 
//   43 
//   44 // Motor 端点的簇ID
//   45 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_I:XDATA:NOROOT(0)
//   46 cId_t Motor_ClusterList[MOTOR_MAX_CLUSTERS] =
Motor_ClusterList:
        DATA8
        DS 6
        REQUIRE `?<Initializer for Motor_ClusterList>`
        REQUIRE __INIT_XDATA_I
//   47 {
//   48     MOTOR_FORWARD,
//   49     MOTOR_BACKWARD,
//   50     MOTOR_STOP
//   51 };
//   52 
//   53 // Motor 端点简单描述符

        RSEG XDATA_I:XDATA:NOROOT(0)
//   54 SimpleDescriptionFormat_t Motor_SimpleDesc[MOTOR_NUM_MAX] =
Motor_SimpleDesc:
        DATA8
        DS 24
        REQUIRE `?<Initializer for Motor_SimpleDesc>`
        REQUIRE __INIT_XDATA_I
//   55 {
//   56 	MOTOR_ENDPOINT,           //  int Endpoint;
//   57 	SYS_PROFID,                //  uint16 AppProfId[2];
//   58 	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
//   59 	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
//   60 	SYS_FLAGS,                 //  int   AppFlags:4;
//   61 	MOTOR_MAX_CLUSTERS,        //  byte  AppNumInClusters;
//   62 	(cId_t *)Motor_ClusterList,  //  byte *pAppInClusterList;
//   63 	0,                          //  byte  AppNumInClusters;
//   64 	NULL                         //  byte *pAppInClusterList;
//   65 };
//   66 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   67 endPointDesc_t Motor_epDesc[MOTOR_NUM_MAX];
Motor_epDesc:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   68 
//   69 typedef struct {
//   70   uint16 velocity[MOTOR_MAX_OPERATION];
//   71   uint16 delay[MOTOR_MAX_OPERATION];
//   72   uint8 total;      /* how much commands */
//   73   uint8 direct;     /* rotate direction */
//   74   uint8 status;     /* what is doing now */
//   75 } MotorControl_t;
//   76 
//   77 
//   78 /*********************************************************************
//   79  * EXTERNAL VARIABLES
//   80  */
//   81 extern uint8 myAppState;
//   82 extern uint8 keys_shift;
//   83 extern uint8 type_join;
//   84 /*********************************************************************
//   85  * EXTERNAL FUNCTIONS
//   86  */
//   87 
//   88 /*********************************************************************
//   89  * LOCAL VARIABLES
//   90  */
//   91 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 afAddrType_t Motor_DstAddr;
Motor_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   93 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   94 MotorControl_t MotorControl[MOTOR_NUM_MAX]; 
MotorControl:
        DS 46
        REQUIRE __INIT_XDATA_Z
//   95 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   96 static uint16 motorTimeout[MOTOR_NUM_MAX] = {0, 0};
motorTimeout:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   97 /*********************************************************************
//   98  * LOCAL FUNCTIONS
//   99  */
//  100 void Motor_Init( byte task_id );
//  101 UINT16 Motor_ProcessEvent( byte task_id, UINT16 events );
//  102 
//  103 static void Motor_ReceiveDataIndication( uint16 source, uint8 endPoint, 
//  104                               uint16 command, uint16 len, uint8 *pData  );
//  105 static void Motor_AllowBindConfirm( uint16 source );
//  106 static void MotorAction( uint8 motor, uint16 command, uint16 len, uint8 *pData );
//  107 static void MotorUpdate(uint8 motor);
//  108 static uint8 MotorDone(void);
//  109 /*********************************************************************
//  110  * @fn      Motor_Init
//  111  *
//  112  * @brief   Initialization function for the Generic App Task.
//  113  *          This is called during initialization and should contain
//  114  *          any application specific initialization (ie. hardware
//  115  *          initialization/setup, table initialization, power up
//  116  *          notificaiton ... ).
//  117  *
//  118  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  119  *                    used to send messages and set timers.
//  120  *
//  121  * @return  none
//  122  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  123 void Motor_Init( byte task_id )
Motor_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Motor_Init
        CODE
//  124 {
        FUNCALL Motor_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_Init, HalTimerInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_Init, halTimerIntConnect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  125         char i;
//  126 	Motor_TaskID = task_id;
        MOV     DPTR,#Motor_TaskID
        MOVX    @DPTR,A
//  127 
//  128         // Initalize P0 IO direction
//  129         P0SEL &= ~0xf0;
        ANL     0xf3,#0xf
//  130         P0DIR |= 0xf0;
        ORL     0xfd,#0xf0
//  131         
//  132 	// Device hardware initialization can be added here or in main() (Zmain.c).
//  133 	// If the hardware is application specific - add it here.
//  134 	// If the hardware is other parts of the device add it in main().
//  135 
//  136 	Motor_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#Motor_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  137 	Motor_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  138 	Motor_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#Motor_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  139         
//  140         for( i=0; i<MOTOR_NUM_MAX; i++)
        MOV     R7,A
//  141         {
//  142             // Fill out the endpoint description.
//  143             Motor_epDesc[i].endPoint = MOTOR_ENDPOINT+i;
??Motor_Init_0:
        MOV     DPL,R7
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#Motor_epDesc & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(Motor_epDesc >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        MOV     A,#0x6e
        ADD     A,R7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  144             Motor_epDesc[i].task_id = &Motor_TaskID;
        INC     DPTR
        MOV     A,#Motor_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Motor_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  145             Motor_SimpleDesc[i] = Motor_SimpleDesc[0];
        MOV     A,R0
        MOV     B,#0xc
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#Motor_SimpleDesc & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(Motor_SimpleDesc >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#Motor_SimpleDesc
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  146             Motor_epDesc[i].simpleDesc
//  147 						= (SimpleDescriptionFormat_t *)&(Motor_SimpleDesc[i]);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  148             Motor_SimpleDesc[i].EndPoint += i;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,R7
        MOVX    @DPTR,A
//  149 	    Motor_epDesc[i].latencyReq = noLatencyReqs;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  150             
//  151             // Register the endpoint description with the AF
//  152 	    afRegister( &(Motor_epDesc[i]) );
        ; Setup parameters for call to function afRegister
        LCALL   ??afRegister?relay
//  153         }
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x2
        JC      ??Motor_Init_0
//  154  
//  155 	//	ZDO_RegisterForZDOMsg( Motor_TaskID, End_Device_Bind_rsp );
//  156 	ZDO_RegisterForZDOMsg( Motor_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  157         
//  158 // Init timer3 for Motor
//  159         HalTimerInit(5);
        ; Setup parameters for call to function HalTimerInit
        MOV     R1,#0x5
        LCALL   ??HalTimerInit?relay
//  160         halTimerIntConnect(Timer3_uSec);
        ; Setup parameters for call to function halTimerIntConnect
        MOV     R2,#??Timer3_uSec?relay & 0xff
        MOV     R3,#(??Timer3_uSec?relay >> 8) & 0xff
        LCALL   ??halTimerIntConnect?relay
        CFI EndBlock cfiBlock0
//  161 }
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        REQUIRE P0DIR
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  162 
//  163 /*********************************************************************
//  164  * @fn      Motor_ProcessEvent
//  165  *
//  166  * @brief   Generic Application Task event processor.  This function
//  167  *          is called to process all events for the task.  Events
//  168  *          include timers, messages and any other user defined events.
//  169  *
//  170  * @param   task_id  - The OSAL assigned task ID.
//  171  * @param   events - events to process.  This is a bit map and can
//  172  *                   contain more than one event.
//  173  *
//  174  * @return  none
//  175  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  176 UINT16 Motor_ProcessEvent( byte task_id, UINT16 events )
Motor_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Motor_ProcessEvent
        CODE
//  177 {
        FUNCALL Motor_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, Sys_AllowBindConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, MotorAction
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, MotorUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Motor_ProcessEvent, MotorUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  178     afIncomingMSGPacket_t *MSGpkt = NULL;
//  179     (void)task_id;  // Intentionally unreferenced parameter
//  180 
//  181     if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??Motor_ProcessEvent_0 & 0xFFFF
//  182     {
//  183         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Motor_ProcessEvent_1
//  184         while ( MSGpkt )
//  185         {
//  186           switch ( MSGpkt->hdr.event )
//  187           {
//  188             case AF_INCOMING_MSG_CMD:
//  189                 Motor_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
//  190                                         MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
//  191                 break;
//  192               
//  193             case ZDO_MATCH_DESC_RSP_SENT:
//  194                 Motor_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
??Motor_ProcessEvent_2:
        ; Setup parameters for call to function Sys_AllowBindConfirm
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??Sys_AllowBindConfirm?relay
//  195                 break;
//  196           }
//  197           // Release the memory
//  198           osal_msg_deallocate( (uint8 *)MSGpkt );
??Motor_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  199     
//  200           // Next
//  201           MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Motor_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
??Motor_ProcessEvent_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??Motor_ProcessEvent_4
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Motor_ProcessEvent_5
        ADD     A,#0x48
        JZ      ??Motor_ProcessEvent_2
        SJMP    ??Motor_ProcessEvent_3
??Motor_ProcessEvent_5:
        ; Setup parameters for call to function MotorAction
        MOV     A,?V0 + 0
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_12:
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,?V0 + 0
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,?V0 + 0
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine11_0 & 0xFFFF
??CrossCallReturnLabel_7:
        ADD     A,#-0x6e
        MOV     R1,A
        LCALL   ??MotorAction?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??Motor_ProcessEvent_3
//  202         }
//  203         return (events ^ SYS_EVENT_MSG);
??Motor_ProcessEvent_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??Motor_ProcessEvent_6:
        MOV     R3,A
        SJMP    ??Motor_ProcessEvent_7
//  204     }
//  205     if ( events & MOTOR1_UPDATE_EVT )
??Motor_ProcessEvent_0:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??Motor_ProcessEvent_8
//  206     {
//  207         MotorUpdate(0);
        ; Setup parameters for call to function MotorUpdate
        MOV     R1,#0x0
        LCALL   ??MotorUpdate?relay
//  208         return (events ^ MOTOR1_UPDATE_EVT);
        MOV     A,R6
        XRL     A,#0x20
??Motor_ProcessEvent_9:
        MOV     R2,A
        MOV     A,R7
        SJMP    ??Motor_ProcessEvent_6
//  209     }
//  210     if ( events & MOTOR2_UPDATE_EVT )
??Motor_ProcessEvent_8:
        MOV     A,R6
        ANL     A,#0x21
        JZ      ??Motor_ProcessEvent_10
//  211     {
//  212         MotorUpdate(1);
        ; Setup parameters for call to function MotorUpdate
        MOV     R1,#0x1
        LCALL   ??MotorUpdate?relay
//  213         return (events ^ MOTOR2_UPDATE_EVT);
        MOV     A,R6
        XRL     A,#0x21
        SJMP    ??Motor_ProcessEvent_9
//  214     }
//  215     return 0;
??Motor_ProcessEvent_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Motor_ProcessEvent_7:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  216 }
//  217 
//  218 /******************************************************************************
//  219  * @fn          Motor_ReceiveDataIndication
//  220  *
//  221  * @brief       The SAPI_ReceiveDataIndication callback function is called
//  222  *              asynchronously by the ZigBee stack to notify the application
//  223  *              when data is received from a peer device.
//  224  *
//  225  * @param       source - The short address of the peer device that sent the data
//  226  *              command - The commandId associated with the data
//  227  *              len - The number of bytes in the pData parameter
//  228  *              pData - The data sent by the peer device
//  229  *
//  230  * @return      none
//  231  */
//  232 void Motor_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
//  233 {
//  234   MotorAction(endPoint-MOTOR_ENDPOINT, command, len, pData);
//  235 }
//  236 
//  237 /******************************************************************************
//  238  * @fn          Motor_AllowBindConfirm
//  239  *
//  240  * @brief       Indicates when another device attempted to bind to this device
//  241  *
//  242  * @param
//  243  *
//  244  * @return      none
//  245  */
//  246 void Motor_AllowBindConfirm( uint16 source )
//  247 {
//  248      Sys_AllowBindConfirm(source);
//  249 }
//  250 
//  251 /******************************************************************************
//  252  * @fn          MotorAction
//  253  *
//  254  * @brief       Motor Action Decide
//  255  *
//  256  * @param
//  257  *
//  258  * @return      none
//  259  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  260 void MotorAction( uint8 motor, uint16 command, uint16 len, uint8 *pData )
MotorAction:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function MotorAction
        CODE
//  261 {
        FUNCALL MotorAction, Num_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, mid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, Locate_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, mid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, atoi
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorAction, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 0,R2
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
//  262   // pData contains : " velocity(r/min), delay(0xffff: never)(sec), velocity, delay, ... "
//  263   
//  264   // devide word between No.3 and No.4 ','
//  265   if(motor>=MOTOR_NUM_MAX)return;   // data error
        MOV     A,R1
        CLR     C
        SUBB    A,#0x2
        JC      $+5
        LJMP    ??MotorAction_0 & 0xFFFF
//  266   
//  267   uint8 i;
//  268   uint8 posx1, posx2;
//  269   uint8 num = Num_Pos(len, pData);
        ; Setup parameters for call to function Num_Pos
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        LCALL   ??Num_Pos?relay
        MOV     A,R1
        MOV     ?V0 + 4,A
//  270   uint8 motorVelocity_arr[5], motorDelay_arr[5];
//  271   if(num%2)return;  // data error
        MOV     C,0xE0 /* A   */.0
        JNC     $+5
        LJMP    ??MotorAction_0 & 0xFFFF
//  272   if(num/2 > MOTOR_MAX_OPERATION)num = MOTOR_MAX_OPERATION*2;   // data too long
        CLR     C
        RRC     A
        CLR     C
        SUBB    A,#0x6
        JC      ??MotorAction_1
        MOV     ?V0 + 4,#0xa
//  273   
//  274   posx1 = 0;
??MotorAction_1:
        MOV     R6,#0x0
//  275   for(i=0; i<num; i++)
        MOV     ?V0 + 3,R6
        SJMP    ??MotorAction_2
//  276   {
//  277       posx2 = Locate_Pos(pData, i+1);
//  278       if(posx2 - posx1 == 0)
//  279         return; //data error
//  280       if(i%2)
//  281       {
//  282         mid(motorDelay_arr, pData, posx2-posx1-1,posx1);
//  283         MotorControl[motor].delay[i/2] = atoi(motorDelay_arr);
//  284       }
//  285       else
//  286       {
//  287         mid(motorVelocity_arr, pData, posx2-posx1-1,posx1);
??MotorAction_3:
        ; Setup parameters for call to function mid
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??mid?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  288         MotorControl[motor].velocity[i/2] = 150000/TIMER3_INT_DELAY/atoi(motorVelocity_arr);
        ; Setup parameters for call to function atoi
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??atoi?relay
        MOV     R0,#-0x26
        MOV     R1,#0x29
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 6,?V0 + 3
        MOV     A,?V0 + 6
        ANL     A,#0xfe
        MOV     R4,A
        MOV     A,?V0 + 2
        LCALL   ??Subroutine13_0 & 0xFFFF
//  289       }
??CrossCallReturnLabel_19:
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??MotorAction_4:
        MOVX    @DPTR,A
//  290       posx1 = posx2;
        MOV     R6,?V0 + 5
        INC     ?V0 + 3
??MotorAction_2:
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,?V0 + 4
        JC      $+5
        LJMP    ??MotorAction_5 & 0xFFFF
        ; Setup parameters for call to function Locate_Pos
        MOV     A,#0x1
        ADD     A,?V0 + 3
        MOV     R1,A
        MOV     R2,?V0 + 10
        MOV     R3,?V0 + 11
        LCALL   ??Locate_Pos?relay
        MOV     A,R1
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,R6
        CLR     C
        SUBB    A,?V0 + 6
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??MotorAction_0 & 0xFFFF
        MOV     A,?V0 + 3
        MOV     C,0xE0 /* A   */.0
        MOV     DPL,R6
        MOV     R2,DPL
        MOV     ?V0 + 7,#0x0
        MOV     R0,#?V0 + 6
        JC      $+5
        LJMP    ??MotorAction_3 & 0xFFFF
        ; Setup parameters for call to function mid
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??mid?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
        ; Setup parameters for call to function atoi
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??atoi?relay
        MOV     A,?V0 + 2
        MOV     B,#0x17
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     ?V0 + 6,?V0 + 3
        MOV     A,?V0 + 6
        ANL     A,#0xfe
        MOV     R4,A
        MOV     A,#(MotorControl + 10) & 0xff
        ADD     A,R4
        MOV     R4,A
        MOV     A,#((MotorControl + 10) >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,R4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LJMP    ??MotorAction_4 & 0xFFFF
//  291   }
//  292   MotorControl[motor].total = num/2;
??MotorAction_5:
        MOV     A,?V0 + 2
        MOV     B,#0x17
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#MotorControl & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,?V0 + 4
        CLR     C
        RRC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#0x14
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  293   MotorControl[motor].direct = command;
        MOV     A,R0
        ADD     A,#0x15
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  294   MotorControl[motor].status = 0;
        MOV     A,R0
        ADD     A,#0x16
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        CLR     A
        MOVX    @DPTR,A
//  295   
//  296   switch(motor)
        MOV     A,?V0 + 2
        JZ      ??MotorAction_6
        DEC     A
        JZ      ??MotorAction_7
        SJMP    ??MotorAction_0
//  297   {
//  298   case 0:
//  299     osal_stop_timerEx(Motor_TaskID, MOTOR1_UPDATE_EVT);
??MotorAction_6:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x20
        MOV     R3,#0x0
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  300     osal_set_event(Motor_TaskID, MOTOR1_UPDATE_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x20
        SJMP    ??MotorAction_8
//  301     break;
//  302   case 1:
//  303     osal_stop_timerEx(Motor_TaskID, MOTOR2_UPDATE_EVT);
??MotorAction_7:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x21
        MOV     R3,#0x0
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  304     osal_set_event(Motor_TaskID, MOTOR2_UPDATE_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x21
??MotorAction_8:
        MOV     R3,#0x0
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  305     break;
??MotorAction_0:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  306   }
//  307 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 32)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 32)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     ?V0 + 6,?V0 + 5
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,R2
        ADD     A,#-0x1
        MOV     ?V0 + 6,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 6
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//  308 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  309 void MotorUpdate(uint8 motor)
MotorUpdate:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function MotorUpdate
        CODE
//  310 {
        FUNCALL MotorUpdate, MotorDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, HalTimerStop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, MotorDone
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, HalTimerStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MotorUpdate, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  311     if(MotorControl[motor].status == (MotorControl[motor].total)-1)
        MOV     B,#0x17
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#MotorControl & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     A,R2
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R4,A
        MOV     A,R2
        ADD     A,#0x14
        LCALL   ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_8:
        ADD     A,#-0x1
        MOV     R0,A
        CLR     A
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R0
        XRL     A,R4
        JNZ     ??MotorUpdate_0
        MOV     A,R1
??MotorUpdate_0:
        JNZ     ??MotorUpdate_1
//  312     {
//  313         // STOP
//  314         // Sleep Pin -> low
//  315         (MotorControl[motor].status)++;
        MOV     DPL,R6
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x17
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#(MotorControl + 22) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((MotorControl + 22) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  316         motorTimeout[motor] = 0;
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_26:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  317         if(MotorDone())
        ; Setup parameters for call to function MotorDone
        LCALL   ??MotorDone?relay
        MOV     A,R1
        JZ      ??MotorUpdate_2
//  318         {
//  319             HalTimerStop();
        ; Setup parameters for call to function HalTimerStop
        LCALL   ??HalTimerStop?relay
        SJMP    ??MotorUpdate_2
//  320         }
//  321         return;
//  322     }
//  323 
//  324     if(MotorDone())   // first boot
??MotorUpdate_1:
        ; Setup parameters for call to function MotorDone
        LCALL   ??MotorDone?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     R0,DPL
        JZ      ??MotorUpdate_3
//  325     {
//  326         MOTOR_DIR_1 = MotorControl[motor].direct;
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_20:
        ADD     A,#0x15
        LCALL   ??Subroutine10_0 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     C,0xE0 /* A   */.0
        MOV     0x80.4,C
//  327         motorTimeout[motor] = MotorControl[motor].velocity[MotorControl[motor].status];
        LCALL   ?Subroutine2 & 0xFFFF
//  328         HalTimerStart();
??CrossCallReturnLabel_23:
        ; Setup parameters for call to function HalTimerStart
        LCALL   ??HalTimerStart?relay
        SJMP    ??CrossCallReturnLabel_22
//  329     }
//  330     else
//  331     {
//  332         (MotorControl[motor].status)++;
??MotorUpdate_3:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_21:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        INC     A
        MOVX    @DPTR,A
//  333         motorTimeout[motor] = MotorControl[motor].velocity[MotorControl[motor].status];
        LCALL   ??Subroutine14_0 & 0xFFFF
//  334     }
//  335     
//  336     switch(motor)
??CrossCallReturnLabel_22:
        MOV     A,R6
        JZ      ??MotorUpdate_4
        DEC     A
        JZ      ??MotorUpdate_5
        SJMP    ??MotorUpdate_2
//  337     {
//  338     case 0:
//  339         osal_start_timerEx(Motor_TaskID, MOTOR1_UPDATE_EVT, (MotorControl[motor].delay[MotorControl[motor].status])*1000);
??MotorUpdate_4:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#MotorControl + 22
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(MotorControl + 10) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((MotorControl + 10) >> 8) & 0xff
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     R2,#0x20
        SJMP    ??MotorUpdate_6
//  340         break;
//  341     case 1:
//  342         osal_start_timerEx(Motor_TaskID, MOTOR2_UPDATE_EVT, (MotorControl[motor].delay[MotorControl[motor].status])*1000);
??MotorUpdate_5:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#MotorControl + 45
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(MotorControl + 33) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((MotorControl + 33) >> 8) & 0xff
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     R2,#0x21
??MotorUpdate_6:
        MOV     R3,#0x0
        MOV     DPTR,#Motor_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  343         break;
//  344     }
??MotorUpdate_2:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock7
        REQUIRE _A_P0
//  345 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_23
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_24
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_22
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     A,R0
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_25, ??CrossCallReturnLabel_3
        CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond14) CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_23
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_24
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_27, ??CrossCallReturnLabel_22
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#motorTimeout & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(motorTimeout >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        ADD     A,#0x16
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_18:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     DPL,A
        MOV     A,R1
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_10
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_11
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_8
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_9
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_6
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_7
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_23
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_24
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+-1
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 30)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond53 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker55 Using cfiCommon1
        CFI (cfiPicker55) NoFunction
        CFI (cfiPicker55) Picker
        MOV     A,R0
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiPicker55
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond56 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        MOV     B,#0x17
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#MotorControl & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker62 Using cfiCommon1
        CFI (cfiPicker62) NoFunction
        CFI (cfiPicker62) Picker
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#-0x18
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiPicker62
//  346 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  347 void Timer3_uSec()
Timer3_uSec:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI Function Timer3_uSec
        CODE
//  348 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  349     for(char i = 0; i<MOTOR_NUM_MAX; i++)
        MOV     R6,#0x0
//  350     {
//  351         if(motorTimeout[i] == 0)
??Timer3_uSec_0:
        MOV     A,R6
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??CrossCallReturnLabel_24
//  352         {
//  353           continue;
//  354         }
//  355         motorTimeout[i]--;
        MOV     DPL,R6
        MOV     A,DPL
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#motorTimeout & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(motorTimeout >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  356         if(motorTimeout[i] == 0)
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??CrossCallReturnLabel_24
//  357         {
//  358             // reverse
//  359             switch(i)
        MOV     A,R6
        JZ      ??Timer3_uSec_1
        DEC     A
        JZ      ??Timer3_uSec_2
        SJMP    ??Timer3_uSec_3
//  360             {
//  361             case 0:
//  362               MOTOR_STEP_1 ^= 1;
??Timer3_uSec_1:
        XRL     0x80,#0x20
//  363               break;
        SJMP    ??Timer3_uSec_3
//  364             case 1:
//  365               MOTOR_STEP_2 ^= 1;
??Timer3_uSec_2:
        XRL     0x80,#0x80
//  366               break;
//  367             }
//  368             motorTimeout[i] = MotorControl[i].velocity[MotorControl[i].status];
??Timer3_uSec_3:
        MOV     DPL,R6
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x17
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#MotorControl & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(MotorControl >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        LCALL   ?Subroutine2 & 0xFFFF
//  369         }
//  370     }
??CrossCallReturnLabel_24:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x2
        JC      ??Timer3_uSec_0
//  371 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock63
        REQUIRE _A_P0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        MOV     A,R2
        ADD     A,#0x16
        MOV     DPL,A
        MOV     A,R3
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_14:
        MOVX    A,@DPTR
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        CLR     C
        RLC     A
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,R2
        ADD     A,R4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70
//  372 
//  373 
//  374 // Whether all of motor is stop: 1 -> yes

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  375 uint8 MotorDone(void)
MotorDone:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI Function MotorDone
        CODE
//  376 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  377     char i=0;
        MOV     R2,#0x0
//  378     for(i; i<MOTOR_NUM_MAX; i++)
//  379     {
//  380         if(motorTimeout[i]!=0)    
??MotorDone_0:
        MOV     A,R2
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ      ??MotorDone_1
//  381         {
//  382           // if not 0 : running
//  383             return 0;   // not first
        MOV     R1,#0x0
        SJMP    ??MotorDone_2
//  384         }
//  385     }
??MotorDone_1:
        INC     R2
        MOV     A,R2
        CLR     C
        SUBB    A,#0x2
        JC      ??MotorDone_0
//  386     // all is 0 : all is Stop
//  387     return 1;
        MOV     R1,#0x1
??MotorDone_2:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock71
//  388 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond73) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond73) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond73) CFA_SP SP+-5
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_25:
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Motor_ClusterList>`:
        DATA16
        DW 1
        DW 2
        DW 3

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Motor_SimpleDesc>`:
        DATA8
        DB 110
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 3
        DATA16
        DW Motor_ClusterList
        DATA8
        DB 0
        DATA16
        DW 0H
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Motor_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Motor_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Motor_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Motor_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MotorAction?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MotorAction

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MotorUpdate?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MotorUpdate

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Timer3_uSec?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Timer3_uSec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MotorDone?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MotorDone

        END
// 
// 1 239 bytes in segment BANKED_CODE
//    36 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//    30 bytes in segment XDATA_I
//    30 bytes in segment XDATA_ID
//    76 bytes in segment XDATA_Z
// 
// 1 305 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
//   106 bytes of XDATA memory
//
//Errors: none
//Warnings: 3
