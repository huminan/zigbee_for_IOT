###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         11/Apr/2018  15:58:06 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data                                               #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\Source\Key_End.c                    #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000         #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\Source\Key_E #
#                          nd.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D        #
#                          REFLECTOR -D POWER_SAVING -D NV_INIT -D            #
#                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D            #
#                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC  #
#                          -lC D:\ProgramData\Hardware\zigbee\Projects\zstack #
#                          \Samples\SensorSys\CC2530DB\EndDeviceEB\List\ -lA  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\          #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e        #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data --nr_virtual_regs 16 -I     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\Key_End.l #
#                          st                                                 #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\Key_End.r5 #
#                          1                                                  #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Key_End.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include "sapi.h"
      7          
      8          #include "SensorSys_End.h"
      9          #include "device.h"
     10          #include "SensorSys_Tools.h"
     11          #include "DebugTrace.h"
     12          
     13          #if !defined( WIN32 )
     14          	#include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x8a
   \   unsigned char volatile __sfr P1IFG
   \                     P1IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8b
   \   unsigned char volatile __sfr P2IFG
   \                     P2IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8d
   \   unsigned char volatile __sfr P1IEN
   \                     P1IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xac
   \   unsigned char volatile __sfr P2IEN
   \                     P2IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf5
   \   unsigned char volatile __sfr P2SEL
   \                     P2SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     15          #endif
     16          
     17          /* HAL */
     18          #include "hal_led.h"
     19          #include "hal_key.h"
     20          #include "hal_uart.h"
     21          
     22          /*********************************************************************
     23           * MACROS
     24           */
     25          #define KEY_TOGGLE_PORT_BIT    0
     26          #define KEY_TOGGLE_EDGE_BIT    1
     27          
     28          // #define KEY_INIT_POS_PORT   0
     29          // #define KEY_INIT_POS_TOGGLE 1
     30          
     31          /*********************************************************************
     32           * CONSTANTS
     33           */
     34          
     35          /*********************************************************************
     36           * TYPEDEFS
     37           */
     38          
     39          /*********************************************************************
     40           * GLOBAL VARIABLES
     41           */
     42          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     43          uint8 keyCnt = 0;
   \                     keyCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     44          
     45          
     46          
     47          
     48          // Key 端点的簇ID
     49          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_I, align 1, keep-with-next
     50          const cId_t Key_ClusterList[KEY_MAX_CLUSTERS] =
   \                     Key_ClusterList:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for Key_ClusterList>`
   \   000008                REQUIRE __INIT_XDATA_I
     51          {
     52              PORT_INIT_CLUSTER,
     53              TOGGLE_INIT_CLUSTER,
     54              OPERATE_CLUSTER,
     55              DELETE_CLUSTER
     56          };
     57          
     58          // Key 端点简单描述符

   \                                 In  segment XDATA_I, align 1, keep-with-next
     59          SimpleDescriptionFormat_t Key_SimpleDesc[KEY_NUM_MAX] =
   \                     Key_SimpleDesc:
   \   000000                DS 120
   \   000078                REQUIRE `?<Initializer for Key_SimpleDesc>`
   \   000078                REQUIRE __INIT_XDATA_I
     60          {
     61          	KEY_ENDPOINT,           //  int Endpoint;
     62          	SYS_PROFID,                //  uint16 AppProfId[2];
     63          	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
     64          	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
     65          	SYS_FLAGS,                 //  int   AppFlags:4;
     66          	KEY_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     67          	(cId_t *)Key_ClusterList,  //  byte *pAppInClusterList;
     68          	KEY_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     69          	(cId_t *)Key_ClusterList   //  byte *pAppInClusterList;
     70          };
     71          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          endPointDesc_t Key_epDesc[KEY_NUM_MAX];
   \                     Key_epDesc:
   \   000000                DS 60
   \   00003C                REQUIRE __INIT_XDATA_Z
     73          
     74          /*********************************************************************
     75           * EXTERNAL VARIABLES
     76           */
     77          extern uint8 myAppState;
     78          extern uint8 keys_shift;
     79          extern uint8 type_join;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     80          SensorObserve_t *KeyObserve; 
   \                     KeyObserve:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     81          /*********************************************************************
     82           * EXTERNAL FUNCTIONS
     83           */
     84          
     85          /*********************************************************************
     86           * LOCAL VARIABLES
     87           */
     88          
     89          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          byte Key_TaskID;
   \                     Key_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     91          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          afAddrType_t Key_DstAddr;
   \                     Key_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     93          
     94          /*********************************************************************
     95           * LOCAL FUNCTIONS
     96           */
     97          void Key_Init( byte task_id );
     98          UINT16 Key_ProcessEvent( byte task_id, UINT16 events );
     99          void Key_HandleKeys( byte shift, byte keys );
    100          static void KeyAction( uint8 key, uint16 command, uint16 len, uint8 *pData );
    101          
    102          static void Key_ReceiveDataIndication( uint16 source, uint8 endPoint, 
    103                                        uint16 command, uint16 len, uint8 *pData  );
    104          static void Key_AllowBindConfirm( uint16 source );
    105          
    106          /*********************************************************************
    107           * EXTERNAL FUNCTIONS
    108           */
    109          void KeySend2Coor(uint8 dev_num, uint16 commandId, uint8 *pData);
    110          
    111          
    112          /*********************************************************************
    113           * @fn      Key_Init
    114           *
    115           * @brief   Initialization function for the Generic App Task.
    116           *          This is called during initialization and should contain
    117           *          any application specific initialization (ie. hardware
    118           *          initialization/setup, table initialization, power up
    119           *          notificaiton ... ).
    120           *
    121           * @param   task_id - the ID assigned by OSAL.  This ID should be
    122           *                    used to send messages and set timers.
    123           *
    124           * @return  none
    125           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    126          void Key_Init( byte task_id )
   \                     Key_Init:
    127          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    128                  char i;
    129          	Key_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Key_TaskID
   \   000009   F0           MOVX    @DPTR,A
    130          
    131          	// Device hardware initialization can be added here or in main() (Zmain.c).
    132          	// If the hardware is application specific - add it here.
    133          	// If the hardware is other parts of the device add it in main().
    134          
    135          	Key_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#Key_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    136          	Key_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    137          	Key_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#Key_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    138                  
    139                  for( i=0; i<KEY_NUM_MAX; i++)
   \   000017   FF           MOV     R7,A
    140                  {
    141                      // Fill out the endpoint description.
    142                      Key_epDesc[i].endPoint = KEY_ENDPOINT+i;
   \                     ??Key_Init_0:
   \   000018   8F82         MOV     DPL,R7
   \   00001A   A882         MOV     R0,DPL
   \   00001C   E8           MOV     A,R0
   \   00001D   75F006       MOV     B,#0x6
   \   000020   A4           MUL     AB
   \   000021   FA           MOV     R2,A
   \   000022   ABF0         MOV     R3,B
   \   000024   74..         MOV     A,#Key_epDesc & 0xff
   \   000026   2A           ADD     A,R2
   \   000027   FA           MOV     R2,A
   \   000028   74..         MOV     A,#(Key_epDesc >> 8) & 0xff
   \   00002A   3B           ADDC    A,R3
   \   00002B   FB           MOV     R3,A
   \   00002C   740A         MOV     A,#0xa
   \   00002E   2F           ADD     A,R7
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   F0           MOVX    @DPTR,A
    143                      Key_epDesc[i].task_id = &Key_TaskID;
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#Key_TaskID & 0xff
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#(Key_TaskID >> 8) & 0xff
   \   00003B   F0           MOVX    @DPTR,A
    144                      Key_SimpleDesc[i] = Key_SimpleDesc[0];
   \   00003C   E8           MOV     A,R0
   \   00003D   75F00C       MOV     B,#0xc
   \   000040   A4           MUL     AB
   \   000041   F8           MOV     R0,A
   \   000042   A9F0         MOV     R1,B
   \   000044   74..         MOV     A,#Key_SimpleDesc & 0xff
   \   000046   28           ADD     A,R0
   \   000047   F8           MOV     R0,A
   \   000048   74..         MOV     A,#(Key_SimpleDesc >> 8) & 0xff
   \   00004A   39           ADDC    A,R1
   \   00004B   F9           MOV     R1,A
   \   00004C   90....       MOV     DPTR,#Key_SimpleDesc
   \   00004F   E8           MOV     A,R0
   \   000050   FC           MOV     R4,A
   \   000051   E9           MOV     A,R1
   \   000052   FD           MOV     R5,A
   \   000053   740C         MOV     A,#0xc
   \   000055   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    145                      Key_epDesc[i].simpleDesc
    146          						= (SimpleDescriptionFormat_t *)&(Key_SimpleDesc[i]);
   \   000058   8A82         MOV     DPL,R2
   \   00005A   8B83         MOV     DPH,R3
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E8           MOV     A,R0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E9           MOV     A,R1
   \   000063   F0           MOVX    @DPTR,A
    147                      Key_SimpleDesc[i].EndPoint += i;
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   E0           MOVX    A,@DPTR
   \   000069   2F           ADD     A,R7
   \   00006A   F0           MOVX    @DPTR,A
    148          	    Key_epDesc[i].latencyReq = noLatencyReqs;
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E4           CLR     A
   \   000075   F0           MOVX    @DPTR,A
    149                      
    150                      // Register the endpoint description with the AF
    151          	    afRegister( &(Key_epDesc[i]) );
   \   000076                ; Setup parameters for call to function afRegister
   \   000076   12....       LCALL   ??afRegister?relay
    152                  }
   \   000079   0F           INC     R7
   \   00007A   EF           MOV     A,R7
   \   00007B   C3           CLR     C
   \   00007C   940A         SUBB    A,#0xa
   \   00007E   4098         JC      ??Key_Init_0
    153          
    154                  KeyObserve = NULL;
   \   000080   90....       MOV     DPTR,#KeyObserve
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   F0           MOVX    @DPTR,A
    155          	// Register for all key events - This app will handle all key events
    156          	RegisterForKeys( Key_TaskID );
   \   000087                ; Setup parameters for call to function RegisterForKeys
   \   000087   90....       MOV     DPTR,#Key_TaskID
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??RegisterForKeys?relay
    157           
    158          	//	ZDO_RegisterForZDOMsg( Key_TaskID, End_Device_Bind_rsp );
    159          	ZDO_RegisterForZDOMsg( Key_TaskID, Match_Desc_rsp );
   \   00008F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00008F   7A06         MOV     R2,#0x6
   \   000091   7B80         MOV     R3,#-0x80
   \   000093   90....       MOV     DPTR,#Key_TaskID
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F9           MOV     R1,A
   \   000098   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    160          }
   \   00009B                REQUIRE ?Subroutine0
   \   00009B                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    161          
    162          /*********************************************************************
    163           * @fn      Key_ProcessEvent
    164           *
    165           * @brief   Generic Application Task event processor.  This function
    166           *          is called to process all events for the task.  Events
    167           *          include timers, messages and any other user defined events.
    168           *
    169           * @param   task_id  - The OSAL assigned task ID.
    170           * @param   events - events to process.  This is a bit map and can
    171           *                   contain more than one event.
    172           *
    173           * @return  none
    174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          UINT16 Key_ProcessEvent( byte task_id, UINT16 events )
   \                     Key_ProcessEvent:
    176          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    177              afIncomingMSGPacket_t *MSGpkt = NULL;
    178              (void)task_id;  // Intentionally unreferenced parameter
    179          
    180              if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??Key_ProcessEvent_0 & 0xFFFF
    181              {
    182                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   000011                ; Setup parameters for call to function osal_msg_receive
   \   000011   8016         SJMP    ??Key_ProcessEvent_1
    183                  while ( MSGpkt )
    184                  {
    185                    switch ( MSGpkt->hdr.event )
    186                    {
    187                      case KEY_CHANGE:
    188                          Key_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    189                          break;
    190                  
    191                      case AF_INCOMING_MSG_CMD:
    192                          Key_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
    193                                                  MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
    194                          break;
    195                        
    196                      case ZDO_MATCH_DESC_RSP_SENT:
    197                          Key_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
   \                     ??Key_ProcessEvent_2:
   \   000013                ; Setup parameters for call to function Sys_AllowBindConfirm
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??Sys_AllowBindConfirm?relay
    198                          break;
    199                    }
    200                    // Release the memory
    201                    osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Key_ProcessEvent_3:
   \   00001D                ; Setup parameters for call to function osal_msg_deallocate
   \   00001D   EE           MOV     A,R6
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   ??osal_msg_deallocate?relay
    202              
    203                    // Next
    204                    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Key_TaskID );
   \   000024                ; Setup parameters for call to function osal_msg_receive
   \   000024   90....       MOV     DPTR,#Key_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \                     ??Key_ProcessEvent_1:
   \   000029   12....       LCALL   ??osal_msg_receive?relay
   \   00002C   8A..         MOV     ?V0 + 4,R2
   \   00002E   8B..         MOV     ?V0 + 5,R3
   \   000030   AE..         MOV     R6,?V0 + 4
   \   000032   AF..         MOV     R7,?V0 + 5
   \   000034   EE           MOV     A,R6
   \   000035   4F           ORL     A,R7
   \   000036   6067         JZ      ??Key_ProcessEvent_4
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   24E6         ADD     A,#-0x1a
   \   00003F   601C         JZ      ??Key_ProcessEvent_5
   \   000041   245A         ADD     A,#0x5a
   \   000043   6006         JZ      ??Key_ProcessEvent_6
   \   000045   24EE         ADD     A,#-0x12
   \   000047   60CA         JZ      ??Key_ProcessEvent_2
   \   000049   80D2         SJMP    ??Key_ProcessEvent_3
   \                     ??Key_ProcessEvent_6:
   \   00004B                ; Setup parameters for call to function Key_HandleKeys
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FA           MOV     R2,A
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   ??Key_HandleKeys?relay
   \   00005B   80C0         SJMP    ??Key_ProcessEvent_3
   \                     ??Key_ProcessEvent_5:
   \   00005D                ; Setup parameters for call to function KeyAction
   \   00005D   EE           MOV     A,R6
   \   00005E   2422         ADD     A,#0x22
   \   000060   F582         MOV     DPL,A
   \   000062   EF           MOV     A,R7
   \   000063   3400         ADDC    A,#0x0
   \   000065   F583         MOV     DPH,A
   \   000067   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00006A   EE           MOV     A,R6
   \   00006B   2420         ADD     A,#0x20
   \   00006D   F582         MOV     DPL,A
   \   00006F   EF           MOV     A,R7
   \   000070   3400         ADDC    A,#0x0
   \   000072   F583         MOV     DPH,A
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FC           MOV     R4,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   FD           MOV     R5,A
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FA           MOV     R2,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FB           MOV     R3,A
   \   000086   EE           MOV     A,R6
   \   000087   2414         ADD     A,#0x14
   \   000089   F582         MOV     DPL,A
   \   00008B   EF           MOV     A,R7
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   24F6         ADD     A,#-0xa
   \   000093   F9           MOV     R1,A
   \   000094   12....       LCALL   ??KeyAction?relay
   \   000097   7402         MOV     A,#0x2
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   02....       LJMP    ??Key_ProcessEvent_3 & 0xFFFF
    205                  }
    206                  return (events ^ SYS_EVENT_MSG);
   \                     ??Key_ProcessEvent_4:
   \   00009F   AA..         MOV     R2,?V0 + 0
   \   0000A1   E5..         MOV     A,?V0 + 1
   \   0000A3   6480         XRL     A,#0x80
   \   0000A5   FB           MOV     R3,A
   \   0000A6   8004         SJMP    ??Key_ProcessEvent_7
    207              }
    208              return 0;
   \                     ??Key_ProcessEvent_0:
   \   0000A8   7A00         MOV     R2,#0x0
   \   0000AA   7B00         MOV     R3,#0x0
   \                     ??Key_ProcessEvent_7:
   \   0000AC                REQUIRE ?Subroutine1
   \   0000AC                ; // Fall through to label ?Subroutine1
    209          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    210          
    211          /*********************************************************************
    212           * @fn      Key_HandleKeys
    213           *
    214           * @brief   Handles all key events for this device.
    215           *
    216           * @param   shift - true if in shift/alt.
    217           * @param   keys - bit field for key events. Valid entries:
    218           *                 HAL_KEY_SW_4
    219           *                 HAL_KEY_SW_3
    220           *                 HAL_KEY_SW_2
    221           *                 HAL_KEY_SW_1
    222           *
    223           * @return  none
    224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    225          void Key_HandleKeys( byte shift, byte keys )
   \                     Key_HandleKeys:
    226          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    227            if(shift)
   \   000009   EE           MOV     A,R6
   \   00000A   601A         JZ      ??Key_HandleKeys_0
    228            {
    229                  if ( keys & HAL_KEY_SW_1 )
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5003         JNC     ??Key_HandleKeys_1
    230                  {
    231                    zb_SystemReset();
   \   000011                ; Setup parameters for call to function zb_SystemReset
   \   000011   12....       LCALL   ??zb_SystemReset?relay
    232                  }
    233                  if ( keys & HAL_KEY_SW_2 )
   \                     ??Key_HandleKeys_1:
   \   000014   EF           MOV     A,R7
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   5003         JNC     ??Key_HandleKeys_2
    234                  {
    235                    zb_SystemReset();
   \   000019                ; Setup parameters for call to function zb_SystemReset
   \   000019   12....       LCALL   ??zb_SystemReset?relay
    236                  }
    237                  if ( keys & HAL_KEY_SW_3 )
   \                     ??Key_HandleKeys_2:
   \   00001C   EF           MOV     A,R7
   \   00001D   A2E4         MOV     C,0xE0 /* A   */.4
   \   00001F   5020         JNC     ??Key_HandleKeys_3
    238                  {
    239                    zb_SystemReset();
   \   000021                ; Setup parameters for call to function zb_SystemReset
   \   000021   12....       LCALL   ??zb_SystemReset?relay
   \   000024   801B         SJMP    ??Key_HandleKeys_3
    240                  }
    241                  if ( keys & HAL_KEY_SW_4 )
    242                  {
    243                  }
    244                  if ( keys & HAL_KEY_SW_6 )  // Physical Key S1
    245                  {
    246                      // Send to Watch Endpoint ? Send to Key Endpoint ?
    247                  }
    248            }
    249            
    250            else
    251            {
    252          //	uint8 startOptions;
    253          //	uint8 logicalType;
    254          	// Shift is used to make each key/switch dual purpose.
    255          	if ( keys_shift )
   \                     ??Key_HandleKeys_0:
   \   000026   90....       MOV     DPTR,#keys_shift
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6015         JZ      ??Key_HandleKeys_3
    256          	{
    257          		// Allow Binding
    258          		if ( keys & HAL_KEY_SW_1 )
   \   00002C   EF           MOV     A,R7
   \   00002D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002F   5010         JNC     ??Key_HandleKeys_3
    259          		{
    260          			if(type_join)
   \   000031   90....       MOV     DPTR,#type_join
   \   000034   E0           MOVX    A,@DPTR
   \   000035   600A         JZ      ??Key_HandleKeys_3
    261          			{
    262          				Sys_AllowBind(10);
   \   000037                ; Setup parameters for call to function Sys_AllowBind
   \   000037   790A         MOV     R1,#0xa
   \   000039   12....       LCALL   ??Sys_AllowBind?relay
    263                                          
    264          			// osal_start_timerEx(Sys_TaskID, CLOSE_BIND_EVT, 10000);
    265          			
    266          				keys_shift = 0;
   \   00003C   90....       MOV     DPTR,#keys_shift
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
    267          			}
    268          			else
    269          			{
    270          				// wrong endpoint the presend send to
    271          			}
    272          		}
    273          		if ( keys & HAL_KEY_SW_2 )
    274          		{
    275          		}
    276          		if ( keys & HAL_KEY_SW_3 )
    277          		{
    278          		}
    279          		if ( keys & HAL_KEY_SW_4 )
    280          		{
    281          		}
    282          	}
    283          	else
    284          	{
    285          		if ( keys & HAL_KEY_SW_1 )
    286          		{
    287                            
    288                            /*
    289          		    if ( myAppState == APP_INIT )
    290          		    {
    291          		        // In the init state, keys are used to indicate the logical mode.
    292          		        // The Switch device is always an end-device
    293          		        logicalType = ZG_DEVICETYPE_ENDDEVICE;
    294          		        zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
    295          
    296          		        // Do more configuration if necessary and then restart device with auto-start bit set
    297          
    298          		        zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
    299          		        startOptions = ZCD_STARTOPT_AUTO_START;
    300          		        zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
    301          		        zb_SystemReset();
    302          
    303              		    }*/
    304          		  //  else
    305          		//    {
    306          
    307          	//	    }
    308          		}
    309          
    310          		if ( keys & HAL_KEY_SW_2 )
    311          		{
    312          		}
    313          
    314          		if ( keys & HAL_KEY_SW_3 )
    315          		{
    316          		}
    317          		
    318          		if ( keys & HAL_KEY_SW_4 )
    319          		{
    320          		}
    321          	}
    322            }
    323          }
   \                     ??Key_HandleKeys_3:
   \   000041   02....       LJMP    ?Subroutine0 & 0xFFFF
    324          
    325          /******************************************************************************
    326           * @fn          Key_ReceiveDataIndication
    327           *
    328           * @brief       The SAPI_ReceiveDataIndication callback function is called
    329           *              asynchronously by the ZigBee stack to notify the application
    330           *              when data is received from a peer device.
    331           *
    332           * @param       source - The short address of the peer device that sent the data
    333           *              command - The commandId associated with the data
    334           *              len - The number of bytes in the pData parameter
    335           *              pData - The data sent by the peer device
    336           *
    337           * @return      none
    338           */
    339          void Key_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
    340          {
    341            KeyAction(endPoint-KEY_ENDPOINT, command, len, pData);
    342          }
    343          
    344          /******************************************************************************
    345           * @fn          SwitchAction
    346           *
    347           * @brief       Switch Action Decide
    348           *
    349           * @param
    350           *
    351           * @return      none
    352           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          void KeyAction( uint8 key, uint16 command, uint16 len, uint8 *pData )
   \                     KeyAction:
    354          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FE           MOV     R6,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
    355            if(command == PORT_INIT_CLUSTER)
   \   000013   7401         MOV     A,#0x1
   \   000015   6A           XRL     A,R2
   \   000016   7001         JNZ     ??KeyAction_0
   \   000018   EB           MOV     A,R3
   \                     ??KeyAction_0:
   \   000019   6003         JZ      $+5
   \   00001B   02....       LJMP    ??KeyAction_1 & 0xFFFF
    356            {
    357          /*    uint8 i;
    358              uint8 port[KEY_INIT_MSG_MAX];
    359              for(i=0; i<KEY_INIT_MSG_MAX; i++, pData++)
    360              {
    361                  port[i] = *pData;
    362              }*/
    363              uint8 port;
    364              port = *pData;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FE           MOV     R6,A
    365            //  P2: 1 2 3 4 ; P1: 2 3 4 5 6 7
    366            //-----------------------------------
    367            //port: 0 1 2 3       4 5 6 7 8 9
    368              if(port < KEY_NUM_MAX)
   \   000024   C3           CLR     C
   \   000025   940A         SUBB    A,#0xa
   \   000027   4003         JC      $+5
   \   000029   02....       LJMP    ??KeyAction_2 & 0xFFFF
    369              {
    370                  if(port < P2_KEY_MAX)
   \   00002C   EE           MOV     A,R6
   \   00002D   C3           CLR     C
   \   00002E   9404         SUBB    A,#0x4
   \   000030   75..01       MOV     ?V0 + 0,#0x1
   \   000033   75..00       MOV     ?V0 + 1,#0x0
   \   000036   5018         JNC     ??KeyAction_3
    371                  {
    372                      P2SEL &= ~(0x01 << (port + 1));
   \   000038   7401         MOV     A,#0x1
   \   00003A   2E           ADD     A,R6
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?S_SHL
   \   000040   A8..         MOV     R0,?V0 + 0
   \   000042   E8           MOV     A,R0
   \   000043   F4           CPL     A
   \   000044   52F5         ANL     0xf5,A
    373                      P2DIR &= ~(0x01 << (port + 1));
   \   000046   52FF         ANL     0xff,A
    374                      P2IEN |= 0x01 << (port + 1);
   \   000048   E8           MOV     A,R0
   \   000049   42AC         ORL     0xac,A
    375                      P2IFG = 0;
   \   00004B   758B00       MOV     0x8b,#0x0
   \   00004E   8016         SJMP    ??KeyAction_4
    376                  }
    377                  else
    378                  {
    379                      P1SEL &= ~(0x01 << (port - 2));
   \                     ??KeyAction_3:
   \   000050   74FE         MOV     A,#-0x2
   \   000052   2E           ADD     A,R6
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?S_SHL
   \   000058   A8..         MOV     R0,?V0 + 0
   \   00005A   E8           MOV     A,R0
   \   00005B   F4           CPL     A
   \   00005C   52F4         ANL     0xf4,A
    380                      P1DIR &= ~(0x01 << (port - 2));
   \   00005E   52FE         ANL     0xfe,A
    381                      P1IEN |= 0x01 << (port - 2);
   \   000060   E8           MOV     A,R0
   \   000061   428D         ORL     0x8d,A
    382                      P1IFG = 0;
   \   000063   758A00       MOV     0x8a,#0x0
    383                  }
    384                  if(KeyObserve == NULL)
   \                     ??KeyAction_4:
   \   000066   90....       MOV     DPTR,#KeyObserve
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F8           MOV     R0,A
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   E8           MOV     A,R0
   \   00006F   49           ORL     A,R1
   \   000070   701E         JNZ     ??KeyAction_5
    385                  {
    386                    KeyObserve = (SensorObserve_t *)osal_mem_alloc(sizeof(SensorObserve_t));
   \   000072                ; Setup parameters for call to function osal_mem_alloc
   \   000072   7A03         MOV     R2,#0x3
   \   000074   7B00         MOV     R3,#0x0
   \   000076   12....       LCALL   ??osal_mem_alloc?relay
   \   000079   90....       MOV     DPTR,#KeyObserve
   \   00007C   EA           MOV     A,R2
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   EB           MOV     A,R3
   \   000080   12....       LCALL   ?Subroutine2 & 0xFFFF
    387                    KeyObserve->port = port;
    388                    KeyObserve->next = NULL;
    389                  }
   \                     ??CrossCallReturnLabel_0:
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   EE           MOV     A,R6
   \   000086   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   F0           MOVX    @DPTR,A
   \   00008D   02....       LJMP    ??KeyAction_2 & 0xFFFF
    390                  else
    391                      ss_AddObserveList(KeyObserve, port);
   \                     ??KeyAction_5:
   \   000090                ; Setup parameters for call to function ss_AddObserveList
   \   000090   EE           MOV     A,R6
   \   000091   F9           MOV     R1,A
   \   000092   90....       MOV     DPTR,#KeyObserve
   \   000095   E0           MOVX    A,@DPTR
   \   000096   FA           MOV     R2,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   FB           MOV     R3,A
   \   00009A   12....       LCALL   ??ss_AddObserveList?relay
   \   00009D   8074         SJMP    ??KeyAction_2
    392                  return;
    393              }
    394              else
    395              {
    396                  // send error back
    397                  return;
    398              }
    399            }
    400            if(command == TOGGLE_INIT_CLUSTER)
   \                     ??KeyAction_1:
   \   00009F   7405         MOV     A,#0x5
   \   0000A1   6A           XRL     A,R2
   \   0000A2   7001         JNZ     ??KeyAction_6
   \   0000A4   EB           MOV     A,R3
   \                     ??KeyAction_6:
   \   0000A5   706C         JNZ     ??KeyAction_2
    401            {
    402              uint8 i;
    403              byte *data_p = NULL;
    404              data_p = (byte *)osal_mem_alloc(sizeof(byte) * len);
   \   0000A7                ; Setup parameters for call to function osal_mem_alloc
   \   0000A7   AA..         MOV     R2,?V0 + 0
   \   0000A9   AB..         MOV     R3,?V0 + 1
   \   0000AB   12....       LCALL   ??osal_mem_alloc?relay
   \   0000AE   8A..         MOV     ?V0 + 2,R2
   \   0000B0   8B..         MOV     ?V0 + 3,R3
   \   0000B2   A8..         MOV     R0,?V0 + 2
   \   0000B4   A9..         MOV     R1,?V0 + 3
    405              for(i=0; i<len; i++, pData++)
   \   0000B6   7A00         MOV     R2,#0x0
   \   0000B8   801E         SJMP    ??KeyAction_7
    406              {
    407                  data_p[i] = *pData;
   \                     ??KeyAction_8:
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   C0E0         PUSH    A
   \   0000C1   E8           MOV     A,R0
   \   0000C2   25..         ADD     A,?V0 + 2
   \   0000C4   F582         MOV     DPL,A
   \   0000C6   E9           MOV     A,R1
   \   0000C7   3400         ADDC    A,#0x0
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   D0E0         POP     A
   \   0000CD   F0           MOVX    @DPTR,A
    408              }
   \   0000CE   0A           INC     R2
   \   0000CF   8E82         MOV     DPL,R6
   \   0000D1   8F83         MOV     DPH,R7
   \   0000D3   A3           INC     DPTR
   \   0000D4   AE82         MOV     R6,DPL
   \   0000D6   AF83         MOV     R7,DPH
   \                     ??KeyAction_7:
   \   0000D8   8A..         MOV     ?V0 + 2,R2
   \   0000DA   C3           CLR     C
   \   0000DB   E5..         MOV     A,?V0 + 2
   \   0000DD   95..         SUBB    A,?V0 + 0
   \   0000DF   E4           CLR     A
   \   0000E0   95..         SUBB    A,?V0 + 1
   \   0000E2   40D6         JC      ??KeyAction_8
    409              if(data_p[KEY_TOGGLE_PORT_BIT] > 3) // not exist
   \   0000E4   8882         MOV     DPL,R0
   \   0000E6   8983         MOV     DPH,R1
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C3           CLR     C
   \   0000EA   9404         SUBB    A,#0x4
   \   0000EC   5025         JNC     ??KeyAction_2
    410              {
    411                  //send error
    412                  return;
    413              }
    414              if(data_p[KEY_TOGGLE_EDGE_BIT] == KEY_RISE_EDGE)
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   75..01       MOV     ?V0 + 0,#0x1
   \   0000F3   75..00       MOV     ?V0 + 1,#0x0
   \   0000F6   8882         MOV     DPL,R0
   \   0000F8   8983         MOV     DPH,R1
   \   0000FA   700D         JNZ     ??KeyAction_9
    415              {
    416                  PICTL &= ~(0x01<<data_p[KEY_TOGGLE_PORT_BIT]);
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   78..         MOV     R0,#?V0 + 0
   \   0000FF   12....       LCALL   ?S_SHL
   \   000102   E5..         MOV     A,?V0 + 0
   \   000104   F4           CPL     A
   \   000105   528C         ANL     0x8c,A
   \   000107   800A         SJMP    ??KeyAction_2
    417              }
    418              else
    419              {
    420                  PICTL |= 0x01<<data_p[KEY_TOGGLE_PORT_BIT];
   \                     ??KeyAction_9:
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   78..         MOV     R0,#?V0 + 0
   \   00010C   12....       LCALL   ?S_SHL
   \   00010F   E5..         MOV     A,?V0 + 0
   \   000111   428C         ORL     0x8c,A
   \                     ??KeyAction_2:
   \   000113   7F04         MOV     R7,#0x4
   \   000115   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000118                REQUIRE P2SEL
   \   000118                REQUIRE P2DIR
   \   000118                REQUIRE P2IEN
   \   000118                REQUIRE P2IFG
   \   000118                REQUIRE P1SEL
   \   000118                REQUIRE P1DIR
   \   000118                REQUIRE P1IEN
   \   000118                REQUIRE P1IFG
   \   000118                REQUIRE PICTL
    421              }
    422            }
    423          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#KeyObserve
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   22           RET
    424          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    425          void KeySend2Coor(uint8 dev_num, uint16 commandId, uint8 *pData)
   \                     KeySend2Coor:
    426          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
    427              Sys_SendDataRequest( 0xFFFE, &Key_epDesc[dev_num], commandId, (uint8)osal_strlen( pData ),
                                                                                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    428                                     pData, sysSeqNumber, 0, 0 );
   \   00000F                ; Setup parameters for call to function osal_strlen
   \   00000F   AA..         MOV     R2,?V0 + 2
   \   000011   AB..         MOV     R3,?V0 + 3
   \   000013   12....       LCALL   ??osal_strlen?relay
   \   000016                ; Setup parameters for call to function Sys_SendDataRequest
   \   000016   75..00       MOV     ?V0 + 4,#0x0
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001E   78..         MOV     R0,#?V0 + 4
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000023   90....       MOV     DPTR,#sysSeqNumber
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 4,A
   \   000029   78..         MOV     R0,#?V0 + 4
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   78..         MOV     R0,#?V0 + 2
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   EA           MOV     A,R2
   \   000039   F9           MOV     R1,A
   \   00003A   EE           MOV     A,R6
   \   00003B   75F006       MOV     B,#0x6
   \   00003E   A4           MUL     AB
   \   00003F   FA           MOV     R2,A
   \   000040   ABF0         MOV     R3,B
   \   000042   74..         MOV     A,#Key_epDesc & 0xff
   \   000044   2A           ADD     A,R2
   \   000045   FC           MOV     R4,A
   \   000046   74..         MOV     A,#(Key_epDesc >> 8) & 0xff
   \   000048   3B           ADDC    A,R3
   \   000049   FD           MOV     R5,A
   \   00004A   7AFE         MOV     R2,#-0x2
   \   00004C   7BFF         MOV     R3,#-0x1
   \   00004E   12....       LCALL   ??Sys_SendDataRequest?relay
   \   000051   7407         MOV     A,#0x7
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
    429          }
   \   000056   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Key_ClusterList>`:
   \   000000   0100         DW 1
   \   000002   0500         DW 5
   \   000004   0200         DW 2
   \   000006   0400         DW 4

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for Key_SimpleDesc>`:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW Key_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW Key_ClusterList
   \   00000C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000014   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00001C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000024   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00002C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000034   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00003C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000044   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00004C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000054   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00005C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000064   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00006C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000074   00000000     DB 0, 0, 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Key_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Key_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Key_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Key_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Key_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Key_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??KeyAction?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    KeyAction

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??KeySend2Coor?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    KeySend2Coor
    430          
    431          /******************************************************************************
    432           * @fn          Key_AllowBindConfirm
    433           *
    434           * @brief       Indicates when another device attempted to bind to this device
    435           *
    436           * @param
    437           *
    438           * @return      none
    439           */
    440          void Key_AllowBindConfirm( uint16 source )
    441          {
    442              Sys_AllowBindConfirm(source);
    443          }
    444          
    445          

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     KeyAction                      1      0     28
       -> osal_mem_alloc            0      0     24
       -> ss_AddObserveList         0      0     24
       -> osal_mem_alloc            0      0     24
     KeySend2Coor                   0      0     21
       -> osal_strlen               0      0     28
       -> Sys_SendDataRequest       0      0     42
     Key_HandleKeys                 0      0     23
       -> zb_SystemReset            0      0     18
       -> zb_SystemReset            0      0     18
       -> zb_SystemReset            0      0     18
       -> Sys_AllowBind             0      0     18
     Key_Init                       1      0      9
       -> afRegister                0      0     18
       -> RegisterForKeys           0      0     18
       -> ZDO_RegisterForZDOMsg     0      0     18
     Key_ProcessEvent               0      0     16
       -> osal_msg_receive          0      0     28
       -> Sys_AllowBindConfirm      0      0     28
       -> osal_msg_deallocate       0      0     28
       -> osal_msg_receive          0      0     28
       -> Key_HandleKeys            0      0     28
       -> KeyAction                 0      0     32


   Segment part sizes:

     Function/Label                     Bytes
     --------------                     -----
     P1IFG                                 1
     P2IFG                                 1
     PICTL                                 1
     P1IEN                                 1
     P2IEN                                 1
     P1SEL                                 1
     P2SEL                                 1
     P1DIR                                 1
     P2DIR                                 1
     keyCnt                                1
     Key_ClusterList                       8
     Key_SimpleDesc                      120
     Key_epDesc                           60
     KeyObserve                            2
     Key_TaskID                            1
     Key_DstAddr                          12
     Key_Init                            155
     ?Subroutine0                          5
     Key_ProcessEvent                    172
     ?Subroutine1                          5
     Key_HandleKeys                       68
     KeyAction                           280
     ?Subroutine2                         13
     KeySend2Coor                         89
     ?<Initializer for Key_ClusterList>    8
     ?<Initializer for Key_SimpleDesc>   120
     ??Key_Init?relay                      6
     ??Key_ProcessEvent?relay              6
     ??Key_HandleKeys?relay                6
     ??KeyAction?relay                     6
     ??KeySend2Coor?relay                  6

 
 787 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   9 bytes in segment SFR_AN
 128 bytes in segment XDATA_I
 128 bytes in segment XDATA_ID
  76 bytes in segment XDATA_Z
 
 945 bytes of CODE  memory
   0 bytes of DATA  memory (+ 9 bytes shared)
 204 bytes of XDATA memory

Errors: none
Warnings: 1
