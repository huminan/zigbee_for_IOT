///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        30/Mar/2018  14:24:09 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data                                              /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\Source\Led_End.c                  /
//    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\Source\Led /
//                          _End.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D     /
//                          REFLECTOR -D POWER_SAVING -D NV_INIT -D           /
//                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D           /
//                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                  /
//                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\End /
//                          DeviceEB\List\ -lA D:\ProgramData\Hardware\zigbee /
//                          \Projects\zstack\Samples\SensorSys\CC2530DB\EndDe /
//                          viceEB\List\ --diag_suppress Pe001,Pa010 -o       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data --nr_virtual_regs  /
//                          16 -I D:\ProgramData\Hardware\zigbee\Projects\zst /
//                          ack\Samples\SensorSys\CC2530DB\ -I                /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\Source\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\ /
//                           -I D:\ProgramData\Hardware\zigbee\Projects\zstac /
//                          k\Samples\SensorSys\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\include\ -I D:\ProgramData\Hardware\zig /
//                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\ -I D:\ProgramData\Hardware\zigbee\ /
//                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\high_level\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\ -I                         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\ -I             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\ -I D:\ProgramData\Hardware\zigbee\Projects\ /
//                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\ /
//                          Components\osal\include\ -I                       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\ -I D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\ -I D:\ProgramData\Hardware\zigbee\Pro /
//                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\nwk\ -I                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\ -I D:\ProgramData\Hardware\zigbee\P /
//                          rojects\zstack\Samples\SensorSys\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\ -I D:\ProgramData\Hardware\zigbee\Pr /
//                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I D:\ProgramData\Hardware\zigbee\Project /
//                          s\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -Ohz --require_prototypes  /
//    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\Led_End /
//                          .s51                                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Led_End

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Led_Init?relay
        FUNCTION ??Led_Init?relay,0203H
        PUBLIC ??Led_ProcessEvent?relay
        FUNCTION ??Led_ProcessEvent?relay,0203H
        PUBLIC Led_ClusterList
        PUBLIC Led_DstAddr
        PUBLIC Led_Init
        FUNCTION Led_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Led_ProcessEvent
        FUNCTION Led_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC Led_SimpleDesc
        PUBLIC Led_TaskID
        PUBLIC Led_epDesc
        PUBLIC ledCnt
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
Sys_AllowBindConfirm SYMBOL "Sys_AllowBindConfirm"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
zb_SystemReset      SYMBOL "zb_SystemReset"
??Sys_AllowBindConfirm?relay SYMBOL "?relay", Sys_AllowBindConfirm
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??zb_SystemReset?relay SYMBOL "?relay", zb_SystemReset
Led_Init            SYMBOL "Led_Init"
??Led_Init?relay    SYMBOL "?relay", Led_Init
Led_ProcessEvent    SYMBOL "Led_ProcessEvent"
??Led_ProcessEvent?relay SYMBOL "?relay", Led_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_AllowBindConfirm
        FUNCTION Sys_AllowBindConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SystemReset
        FUNCTION zb_SystemReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??Sys_AllowBindConfirm?relay
        FUNCTION ??Sys_AllowBindConfirm?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??zb_SystemReset?relay
        FUNCTION ??zb_SystemReset?relay,00H

// D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Led_End.c
//    1 #include "OSAL.h"
//    2 #include "AF.h"
//    3 #include "ZDApp.h"
//    4 #include "ZDObject.h"
//    5 #include "ZDProfile.h"
//    6 #include "sapi.h"
//    7 
//    8 #include "SensorSys_End.h"
//    9 #include "device.h"
//   10 #include "DebugTrace.h"
//   11 
//   12 #if !defined( WIN32 )
//   13 	#include "OnBoard.h"
//   14 #endif
//   15 
//   16 /* HAL */
//   17 #include "hal_led.h"
//   18 #include "hal_key.h"
//   19 #include "hal_uart.h"
//   20 
//   21 /*********************************************************************
//   22  * MACROS
//   23  */
//   24 
//   25 /*********************************************************************
//   26  * CONSTANTS
//   27  */
//   28 
//   29 /*********************************************************************
//   30  * TYPEDEFS
//   31  */
//   32 
//   33 /*********************************************************************
//   34  * GLOBAL VARIABLES
//   35  */
//   36 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   37 byte Led_TaskID;
Led_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   38 uint8 ledCnt;
ledCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   39 
//   40 
//   41 // Led 端点的簇ID
//   42 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_I:XDATA:NOROOT(0)
//   43 cId_t Led_ClusterList[LED_MAX_CLUSTERS] =
Led_ClusterList:
        DATA8
        DS 6
        REQUIRE `?<Initializer for Led_ClusterList>`
        REQUIRE __INIT_XDATA_I
//   44 {
//   45     LED_LIGHT,
//   46     LED_DIM,
//   47     LED_FLASH
//   48 };
//   49 
//   50 // Led 端点简单描述符

        RSEG XDATA_I:XDATA:NOROOT(0)
//   51 SimpleDescriptionFormat_t Led_SimpleDesc[LED_NUM_MAX] =
Led_SimpleDesc:
        DATA8
        DS 36
        REQUIRE `?<Initializer for Led_SimpleDesc>`
        REQUIRE __INIT_XDATA_I
//   52 {
//   53 	LED_ENDPOINT,           //  int Endpoint;
//   54 	SYS_PROFID,                //  uint16 AppProfId[2];
//   55 	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
//   56 	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
//   57 	SYS_FLAGS,                 //  int   AppFlags:4;
//   58 	LED_MAX_CLUSTERS,        //  byte  AppNumInClusters;
//   59 	(cId_t *)Led_ClusterList,  //  byte *pAppInClusterList;
//   60 	0,                          //  byte  AppNumInClusters;
//   61 	NULL                         //  byte *pAppInClusterList;
//   62 };
//   63 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   64 endPointDesc_t Led_epDesc[LED_NUM_MAX];
Led_epDesc:
        DS 18
        REQUIRE __INIT_XDATA_Z
//   65 
//   66 /*********************************************************************
//   67  * EXTERNAL VARIABLES
//   68  */
//   69 extern uint8 myAppState;
//   70 extern uint8 keys_shift;
//   71 extern uint8 type_join;
//   72 /*********************************************************************
//   73  * EXTERNAL FUNCTIONS
//   74  */
//   75 
//   76 /*********************************************************************
//   77  * LOCAL VARIABLES
//   78  */
//   79 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   80 afAddrType_t Led_DstAddr;
Led_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   81 
//   82 /*********************************************************************
//   83  * LOCAL FUNCTIONS
//   84  */
//   85 void Led_Init( byte task_id );
//   86 UINT16 Led_ProcessEvent( byte task_id, UINT16 events );
//   87 
//   88 static void Led_ReceiveDataIndication( uint16 source, uint8 endPoint, 
//   89                               uint16 command, uint16 len, uint8 *pData  );
//   90 static void Led_AllowBindConfirm( uint16 source );
//   91 /*********************************************************************
//   92  * @fn      Led_Init
//   93  *
//   94  * @brief   Initialization function for the Generic App Task.
//   95  *          This is called during initialization and should contain
//   96  *          any application specific initialization (ie. hardware
//   97  *          initialization/setup, table initialization, power up
//   98  *          notificaiton ... ).
//   99  *
//  100  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  101  *                    used to send messages and set timers.
//  102  *
//  103  * @return  none
//  104  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  105 void Led_Init( byte task_id )
Led_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Led_Init
        CODE
//  106 {
        FUNCALL Led_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Led_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  107         char i;
//  108 	Led_TaskID = task_id;
        MOV     DPTR,#Led_TaskID
        MOVX    @DPTR,A
//  109 
//  110 	// Device hardware initialization can be added here or in main() (Zmain.c).
//  111 	// If the hardware is application specific - add it here.
//  112 	// If the hardware is other parts of the device add it in main().
//  113 
//  114 	Led_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#Led_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  115 	Led_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  116 	Led_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#Led_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  117         
//  118         for( i=0; i<LED_NUM_MAX; i++)
        MOV     R7,A
//  119         {
//  120             // Fill out the endpoint description.
//  121             Led_epDesc[i].endPoint = LED_ENDPOINT+i;
??Led_Init_0:
        MOV     DPL,R7
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#Led_epDesc & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(Led_epDesc >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        MOV     A,#0x3c
        ADD     A,R7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//  122             Led_epDesc[i].task_id = &Led_TaskID;
        INC     DPTR
        MOV     A,#Led_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Led_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  123             Led_SimpleDesc[i] = Led_SimpleDesc[0];
        MOV     A,R0
        MOV     B,#0xc
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#Led_SimpleDesc & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(Led_SimpleDesc >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     DPTR,#Led_SimpleDesc
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  124             Led_epDesc[i].simpleDesc
//  125 						= (SimpleDescriptionFormat_t *)&(Led_SimpleDesc[i]);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  126             Led_SimpleDesc[i].EndPoint += i;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ADD     A,R7
        MOVX    @DPTR,A
//  127 	    Led_epDesc[i].latencyReq = noLatencyReqs;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  128             
//  129             // Register the endpoint description with the AF
//  130 	    afRegister( &(Led_epDesc[i]) );
        ; Setup parameters for call to function afRegister
        LCALL   ??afRegister?relay
//  131         }
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x3
        JC      ??Led_Init_0
//  132  
//  133 	//	ZDO_RegisterForZDOMsg( Led_TaskID, End_Device_Bind_rsp );
//  134 	ZDO_RegisterForZDOMsg( Led_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Led_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  135 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  136 
//  137 /*********************************************************************
//  138  * @fn      Led_ProcessEvent
//  139  *
//  140  * @brief   Generic Application Task event processor.  This function
//  141  *          is called to process all events for the task.  Events
//  142  *          include timers, messages and any other user defined events.
//  143  *
//  144  * @param   task_id  - The OSAL assigned task ID.
//  145  * @param   events - events to process.  This is a bit map and can
//  146  *                   contain more than one event.
//  147  *
//  148  * @return  none
//  149  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  150 UINT16 Led_ProcessEvent( byte task_id, UINT16 events )
Led_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Led_ProcessEvent
        CODE
//  151 {
        FUNCALL Led_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Led_ProcessEvent, Sys_AllowBindConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Led_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Led_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Led_ProcessEvent, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Led_ProcessEvent, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  152     afIncomingMSGPacket_t *MSGpkt = NULL;
//  153     (void)task_id;  // Intentionally unreferenced parameter
//  154 
//  155     if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??Led_ProcessEvent_0 & 0xFFFF
//  156     {
//  157         MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Led_ProcessEvent_1
//  158         while ( MSGpkt )
//  159         {
//  160           switch ( MSGpkt->hdr.event )
//  161           {
//  162             case AF_INCOMING_MSG_CMD:
//  163                 Led_ReceiveDataIndication( MSGpkt->srcAddr.addr.shortAddr, MSGpkt->endPoint, MSGpkt->clusterId,
//  164                                         MSGpkt->cmd.DataLength, MSGpkt->cmd.Data);
//  165                 break;
//  166               
//  167             case ZDO_MATCH_DESC_RSP_SENT:
//  168                 Led_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)MSGpkt)->nwkAddr );
??Led_ProcessEvent_2:
        ; Setup parameters for call to function Sys_AllowBindConfirm
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??Sys_AllowBindConfirm?relay
//  169                 break;
//  170           }
//  171           // Release the memory
//  172           osal_msg_deallocate( (uint8 *)MSGpkt );
??Led_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  173     
//  174           // Next
//  175           MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Led_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Led_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
??Led_ProcessEvent_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        MOV     A,R6
        ORL     A,R7
        JZ      ??Led_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??Led_ProcessEvent_5
        ADD     A,#0x48
        JZ      ??Led_ProcessEvent_2
        SJMP    ??Led_ProcessEvent_3
??Led_ProcessEvent_5:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0x3c
        JZ      ??Led_ProcessEvent_6
        DEC     A
        JZ      ??Led_ProcessEvent_7
        SJMP    ??Led_ProcessEvent_3
??Led_ProcessEvent_6:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??Led_ProcessEvent_8
        MOV     A,R1
??Led_ProcessEvent_8:
        JNZ     ??Led_ProcessEvent_9
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
        SJMP    ??Led_ProcessEvent_10
??Led_ProcessEvent_9:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??Led_ProcessEvent_11
        MOV     A,R1
??Led_ProcessEvent_11:
        JNZ     ??Led_ProcessEvent_3
??Led_ProcessEvent_10:
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
        SJMP    ??Led_ProcessEvent_3
??Led_ProcessEvent_7:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??Led_ProcessEvent_12
        MOV     A,R1
??Led_ProcessEvent_12:
        JNZ     ??Led_ProcessEvent_3
        SJMP    ??Led_ProcessEvent_10
//  176         }
//  177         return (events ^ SYS_EVENT_MSG);
??Led_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??Led_ProcessEvent_13
//  178     }
//  179     return 0;
??Led_ProcessEvent_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Led_ProcessEvent_13:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  180 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Led_ClusterList>`:
        DATA16
        DW 1
        DW 2
        DW 3

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for Led_SimpleDesc>`:
        DATA8
        DB 60
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 3
        DATA16
        DW Led_ClusterList
        DATA8
        DB 0
        DATA16
        DW 0H
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Led_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Led_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Led_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Led_ProcessEvent

        END
//  181 
//  182 /******************************************************************************
//  183  * @fn          Led_ReceiveDataIndication
//  184  *
//  185  * @brief       The SAPI_ReceiveDataIndication callback function is called
//  186  *              asynchronously by the ZigBee stack to notify the application
//  187  *              when data is received from a peer device.
//  188  *
//  189  * @param       source - The short address of the peer device that sent the data
//  190  *              command - The commandId associated with the data
//  191  *              len - The number of bytes in the pData parameter
//  192  *              pData - The data sent by the peer device
//  193  *
//  194  * @return      none
//  195  */
//  196 void Led_ReceiveDataIndication( uint16 source, uint8 endPoint, uint16 command, uint16 len, uint8 *pData  )
//  197 {
//  198   // LedAction(endPoint-LED_ENDPOINT, command, pData);
//  199   
//  200   switch (endPoint)
//  201   {
//  202     case LED_ENDPOINT:
//  203       {
//  204         if (command == LED_LIGHT)
//  205         {
//  206              zb_SystemReset();
//  207         }
//  208         if (command == LED_DIM)
//  209         {
//  210              zb_SystemReset();
//  211         }
//  212       }
//  213     case (LED_ENDPOINT+1):
//  214       {
//  215         if (command == LED_LIGHT)
//  216         {
//  217             zb_SystemReset();
//  218         }
//  219       }
//  220     case (LED_ENDPOINT+2):
//  221       {
//  222         if (command == LED_LIGHT)
//  223         {
//  224             
//  225         }
//  226       }
//  227   }
//  228 }
//  229 
//  230 /******************************************************************************
//  231  * @fn          Led_AllowBindConfirm
//  232  *
//  233  * @brief       Indicates when another device attempted to bind to this device
//  234  *
//  235  * @param
//  236  *
//  237  * @return      none
//  238  */
//  239 void Led_AllowBindConfirm( uint16 source )
//  240 {
//  241      Sys_AllowBindConfirm(source);
//  242 }
// 
// 299 bytes in segment BANKED_CODE
//  12 bytes in segment BANK_RELAYS
//  42 bytes in segment XDATA_I
//  42 bytes in segment XDATA_ID
//  32 bytes in segment XDATA_Z
// 
// 353 bytes of CODE  memory
//  74 bytes of XDATA memory
//
//Errors: none
//Warnings: none
