///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        08/Sep/2017  21:42:52 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ProgramData\Hardware\zigbee\Components\stack\s /
//                          api\sapi.c                                        /
//    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zi /
//                          gbee\Components\stack\sapi\sapi.c -D              /
//                          NWK_AUTO_POLL -D HOLD_AUTO_START -D REFLECTOR -D  /
//                          POWER_SAVING -D NV_INIT -D xNV_RESTORE -D         /
//                          xZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D          /
//                          xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC -lC             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\ -lA    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\        /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\ -I                      /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\Source\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\ /
//                           -I D:\ProgramData\Hardware\zigbee\Projects\zstac /
//                          k\Samples\SensorSys\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\include\ -I D:\ProgramData\Hardware\zig /
//                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\ -I D:\ProgramData\Hardware\zigbee\ /
//                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\high_level\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\ -I                         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\ -I             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\ -I D:\ProgramData\Hardware\zigbee\Projects\ /
//                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\ /
//                          Components\osal\include\ -I                       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\ -I D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\ -I D:\ProgramData\Hardware\zigbee\Pro /
//                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\nwk\ -I                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\ -I D:\ProgramData\Hardware\zigbee\P /
//                          rojects\zstack\Samples\SensorSys\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\ -I D:\ProgramData\Hardware\zigbee\Pr /
//                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I D:\ProgramData\Hardware\zigbee\Project /
//                          s\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -Ohz --require_prototypes  /
//    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\sapi.s5 /
//                          1                                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME sapi

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SAPI_Init?relay
        FUNCTION ??SAPI_Init?relay,0203H
        PUBLIC ??SAPI_ProcessEvent?relay
        FUNCTION ??SAPI_ProcessEvent?relay,0203H
        PUBLIC ??SAPI_ProcessZDOMsgs?relay
        FUNCTION ??SAPI_ProcessZDOMsgs?relay,0203H
        FUNCTION ??SAPI_SendCback?relay,0203H
        PUBLIC ??zb_AllowBind?relay
        FUNCTION ??zb_AllowBind?relay,0203H
        PUBLIC ??zb_BindDevice?relay
        FUNCTION ??zb_BindDevice?relay,0203H
        PUBLIC ??zb_FindDeviceRequest?relay
        FUNCTION ??zb_FindDeviceRequest?relay,0203H
        PUBLIC ??zb_GetDeviceInfo?relay
        FUNCTION ??zb_GetDeviceInfo?relay,0203H
        PUBLIC ??zb_PermitJoiningRequest?relay
        FUNCTION ??zb_PermitJoiningRequest?relay,0203H
        PUBLIC ??zb_ReadConfiguration?relay
        FUNCTION ??zb_ReadConfiguration?relay,0203H
        PUBLIC ??zb_SendDataRequest?relay
        FUNCTION ??zb_SendDataRequest?relay,0203H
        PUBLIC ??zb_StartRequest?relay
        FUNCTION ??zb_StartRequest?relay,0203H
        PUBLIC ??zb_SystemReset?relay
        FUNCTION ??zb_SystemReset?relay,0203H
        PUBLIC ??zb_WriteConfiguration?relay
        FUNCTION ??zb_WriteConfiguration?relay,0203H
        PUBLIC SAPI_Init
        FUNCTION SAPI_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SAPI_ProcessEvent
        FUNCTION SAPI_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC SAPI_ProcessZDOMsgs
        FUNCTION SAPI_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION SAPI_SendCback,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC sapi_TaskID
        PUBLIC sapi_epDesc
        PUBLIC zb_AllowBind
        FUNCTION zb_AllowBind,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zb_BindDevice
        FUNCTION zb_BindDevice,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC zb_FindDeviceRequest
        FUNCTION zb_FindDeviceRequest,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zb_GetDeviceInfo
        FUNCTION zb_GetDeviceInfo,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zb_PermitJoiningRequest
        FUNCTION zb_PermitJoiningRequest,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_ReadConfiguration
        FUNCTION zb_ReadConfiguration,021203H
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC zb_SendDataRequest
        FUNCTION zb_SendDataRequest,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC zb_StartRequest
        FUNCTION zb_StartRequest,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC zb_SystemReset
        FUNCTION zb_SystemReset,021203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_WriteConfiguration
        FUNCTION zb_WriteConfiguration,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
ZDOInitDevice       SYMBOL "ZDOInitDevice"
sAddrExtCpy         SYMBOL "sAddrExtCpy"
APSME_BindRequest   SYMBOL "APSME_BindRequest"
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
ZDO_AnyClusterMatches SYMBOL "ZDO_AnyClusterMatches"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
bindRemoveEntry     SYMBOL "bindRemoveEntry"
bindFind            SYMBOL "bindFind"
HalLedSet           SYMBOL "HalLedSet"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
afSetMatch          SYMBOL "afSetMatch"
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_nv_item_len    SYMBOL "osal_nv_item_len"
osal_nv_read        SYMBOL "osal_nv_read"
osal_nv_write       SYMBOL "osal_nv_write"
osal_memcpy         SYMBOL "osal_memcpy"
osal_msg_receive    SYMBOL "osal_msg_receive"
zb_StartConfirm     SYMBOL "zb_StartConfirm"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
zb_BindConfirm      SYMBOL "zb_BindConfirm"
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
afRegister          SYMBOL "afRegister"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_set_event      SYMBOL "osal_set_event"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
osal_msg_send       SYMBOL "osal_msg_send"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??APSME_BindRequest?relay SYMBOL "?relay", APSME_BindRequest
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??NLME_IsAddressBroadcast?relay SYMBOL "?relay", NLME_IsAddressBroadcast
??ZDOInitDevice?relay SYMBOL "?relay", ZDOInitDevice
??ZDO_AnyClusterMatches?relay SYMBOL "?relay", ZDO_AnyClusterMatches
??ZDO_ParseAddrRsp?relay SYMBOL "?relay", ZDO_ParseAddrRsp
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??ZDP_NwkAddrReq?relay SYMBOL "?relay", ZDP_NwkAddrReq
??afRegister?relay  SYMBOL "?relay", afRegister
??afSetMatch?relay  SYMBOL "?relay", afSetMatch
??bindFind?relay    SYMBOL "?relay", bindFind
??bindRemoveEntry?relay SYMBOL "?relay", bindRemoveEntry
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
??osal_nv_item_len?relay SYMBOL "?relay", osal_nv_item_len
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
??zb_AllowBindConfirm?relay SYMBOL "?relay", zb_AllowBindConfirm
??zb_BindConfirm?relay SYMBOL "?relay", zb_BindConfirm
??zb_FindDeviceConfirm?relay SYMBOL "?relay", zb_FindDeviceConfirm
??zb_HandleOsalEvent?relay SYMBOL "?relay", zb_HandleOsalEvent
??zb_ReceiveDataIndication?relay SYMBOL "?relay", zb_ReceiveDataIndication
??zb_SendDataConfirm?relay SYMBOL "?relay", zb_SendDataConfirm
??zb_StartConfirm?relay SYMBOL "?relay", zb_StartConfirm
SAPI_Init           SYMBOL "SAPI_Init"
??SAPI_Init?relay   SYMBOL "?relay", SAPI_Init
SAPI_ProcessEvent   SYMBOL "SAPI_ProcessEvent"
??SAPI_ProcessEvent?relay SYMBOL "?relay", SAPI_ProcessEvent
SAPI_ProcessZDOMsgs SYMBOL "SAPI_ProcessZDOMsgs"
??SAPI_ProcessZDOMsgs?relay SYMBOL "?relay", SAPI_ProcessZDOMsgs
zb_AllowBind        SYMBOL "zb_AllowBind"
??zb_AllowBind?relay SYMBOL "?relay", zb_AllowBind
zb_BindDevice       SYMBOL "zb_BindDevice"
??zb_BindDevice?relay SYMBOL "?relay", zb_BindDevice
zb_FindDeviceRequest SYMBOL "zb_FindDeviceRequest"
??zb_FindDeviceRequest?relay SYMBOL "?relay", zb_FindDeviceRequest
zb_GetDeviceInfo    SYMBOL "zb_GetDeviceInfo"
??zb_GetDeviceInfo?relay SYMBOL "?relay", zb_GetDeviceInfo
zb_PermitJoiningRequest SYMBOL "zb_PermitJoiningRequest"
??zb_PermitJoiningRequest?relay SYMBOL "?relay", zb_PermitJoiningRequest
zb_ReadConfiguration SYMBOL "zb_ReadConfiguration"
??zb_ReadConfiguration?relay SYMBOL "?relay", zb_ReadConfiguration
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
??zb_SendDataRequest?relay SYMBOL "?relay", zb_SendDataRequest
zb_StartRequest     SYMBOL "zb_StartRequest"
??zb_StartRequest?relay SYMBOL "?relay", zb_StartRequest
zb_SystemReset      SYMBOL "zb_SystemReset"
??zb_SystemReset?relay SYMBOL "?relay", zb_SystemReset
zb_WriteConfiguration SYMBOL "zb_WriteConfiguration"
??zb_WriteConfiguration?relay SYMBOL "?relay", zb_WriteConfiguration

        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDOInitDevice
        FUNCTION ZDOInitDevice,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_BindRequest
        FUNCTION APSME_BindRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_AnyClusterMatches
        FUNCTION ZDO_AnyClusterMatches,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bindRemoveEntry
        FUNCTION bindRemoveEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bindFind
        FUNCTION bindFind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afSetMatch
        FUNCTION afSetMatch,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_StartConfirm
        FUNCTION zb_StartConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_BindConfirm
        FUNCTION zb_BindConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??APSME_BindRequest?relay
        FUNCTION ??APSME_BindRequest?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??NLME_IsAddressBroadcast?relay
        FUNCTION ??NLME_IsAddressBroadcast?relay,00H
        EXTERN ??ZDOInitDevice?relay
        FUNCTION ??ZDOInitDevice?relay,00H
        EXTERN ??ZDO_AnyClusterMatches?relay
        FUNCTION ??ZDO_AnyClusterMatches?relay,00H
        EXTERN ??ZDO_ParseAddrRsp?relay
        FUNCTION ??ZDO_ParseAddrRsp?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??ZDP_NwkAddrReq?relay
        FUNCTION ??ZDP_NwkAddrReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??afSetMatch?relay
        FUNCTION ??afSetMatch?relay,00H
        EXTERN ??bindFind?relay
        FUNCTION ??bindFind?relay,00H
        EXTERN ??bindRemoveEntry?relay
        FUNCTION ??bindRemoveEntry?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_nv_item_len?relay
        FUNCTION ??osal_nv_item_len?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN ??zb_AllowBindConfirm?relay
        FUNCTION ??zb_AllowBindConfirm?relay,00H
        EXTERN ??zb_BindConfirm?relay
        FUNCTION ??zb_BindConfirm?relay,00H
        EXTERN ??zb_FindDeviceConfirm?relay
        FUNCTION ??zb_FindDeviceConfirm?relay,00H
        EXTERN ??zb_HandleOsalEvent?relay
        FUNCTION ??zb_HandleOsalEvent?relay,00H
        EXTERN ??zb_ReceiveDataIndication?relay
        FUNCTION ??zb_ReceiveDataIndication?relay,00H
        EXTERN ??zb_SendDataConfirm?relay
        FUNCTION ??zb_SendDataConfirm?relay,00H
        EXTERN ??zb_StartConfirm?relay
        FUNCTION ??zb_StartConfirm?relay,00H
        EXTERN ZDAppTaskID
        EXTERN _NIB
        EXTERN aExtendedAddress
        EXTERN devState
        EXTERN zb_SimpleDesc
        EXTERN zgApsDefaultMaxBindingTime
        EXTERN zgStartDelay

// D:\ProgramData\Hardware\zigbee\Components\stack\sapi\sapi.c
//    1 /**************************************************************************************************
//    2   Filename:       sapi.c
//    3   Revised:        $Date: 2010-05-03 17:46:57 -0700 (Mon, 03 May 2010) $
//    4   Revision:       $Revision: 22364 $
//    5 
//    6   Description:    Z-Stack Simple Application Interface.
//    7 
//    8 
//    9   Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED “AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /******************************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "ZComDef.h"
//   45 #include "hal_drivers.h"
//   46 #include "OSAL.h"
//   47 #include "OSAL_Tasks.h"
//   48 //#include "OSAL_Custom.h"
//   49 
//   50 #if defined ( MT_TASK )
//   51   #include "MT.h"
//   52   #include "MT_TASK.h"
//   53 #endif
//   54 
//   55 #include "nwk.h"
//   56 #include "APS.h"
//   57 #include "ZDApp.h"
//   58 
//   59 #include "osal_nv.h"
//   60 #include "NLMEDE.h"
//   61 #include "AF.h"
//   62 #include "OnBoard.h"
//   63 #include "nwk_util.h"
//   64 #include "ZDProfile.h"
//   65 #include "ZDObject.h"
//   66 #include "hal_led.h"
//   67 #include "hal_key.h"
//   68 #include "sapi.h"
//   69 #include "MT_SAPI.h"
//   70 
//   71 extern uint8 zgStartDelay;
//   72 extern uint8 zgSapiEndpoint;
//   73 /*********************************************************************
//   74  * CONSTANTS
//   75  */
//   76 #if !defined SAPI_CB_FUNC
//   77 #define SAPI_CB_FUNC  TRUE
//   78 #endif
//   79 
//   80 // Message ID's for application user messages must be in 0xE0-0xEF range
//   81 #define ZB_USER_MSG                       0xE0
//   82 #define SAPICB_DATA_CNF   0xE0
//   83 #define SAPICB_BIND_CNF   0xE1
//   84 #define SAPICB_START_CNF  0xE2
//   85 
//   86 /*********************************************************************
//   87  * TYPEDEFS
//   88  */
//   89 
//   90 /*********************************************************************
//   91  * GLOBAL VARIABLES
//   92  */
//   93 
//   94 #if OSAL_SAPI
//   95 // The order in this table must be identical to the task initialization calls below in osalInitTask.
//   96 const pTaskEventHandlerFn tasksArr[] = {
//   97   macEventLoop,
//   98   nwk_event_loop,
//   99   Hal_ProcessEvent,
//  100 #if defined( MT_TASK )
//  101   MT_ProcessEvent,
//  102 #endif
//  103   APS_event_loop,
//  104   ZDApp_event_loop,
//  105 
//  106   SAPI_ProcessEvent
//  107 };
//  108 
//  109 const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
//  110 uint16 *tasksEvents;
//  111 #endif
//  112 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  113 endPointDesc_t sapi_epDesc;
sapi_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  114 uint8 sapi_TaskID;
sapi_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  115 static uint16 sapi_bindInProgress;
sapi_bindInProgress:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  116 
//  117 /*********************************************************************
//  118  * LOCAL FUNCTIONS
//  119  */
//  120 
//  121 void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  122 static void SAPI_SendCback( uint8 event, uint8 status, uint16 data );
//  123 
//  124 static void SAPI_StartConfirm( uint8 status );
//  125 static void SAPI_SendDataConfirm( uint8 handle, uint8 status );
//  126 static void SAPI_BindConfirm( uint16 commandId, uint8 status );
//  127 static void SAPI_FindDeviceConfirm( uint8 searchType,
//  128                                         uint8 *searchKey, uint8 *result );
//  129 static void SAPI_ReceiveDataIndication( uint16 source,
//  130                               uint16 command, uint16 len, uint8 *pData  );
//  131 static void SAPI_AllowBindConfirm( uint16 source );
//  132 
//  133 /******************************************************************************
//  134  * @fn          zb_SystemReset
//  135  *
//  136  * @brief       The zb_SystemReset function reboots the ZigBee device.  The
//  137  *              zb_SystemReset function can be called after a call to
//  138  *              zb_WriteConfiguration to restart Z-Stack with the updated
//  139  *              configuration.
//  140  *
//  141  * @param       none
//  142  *
//  143  * @return      none
//  144  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  145 void zb_SystemReset ( void )
zb_SystemReset:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zb_SystemReset
        CODE
//  146 {
        FUNCALL zb_SystemReset, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        ; Saved register size: 0
        ; Auto size: 0
//  147   SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  148 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//  149 
//  150 /******************************************************************************
//  151  * @fn          zb_StartRequest
//  152  *
//  153  * @brief       The zb_StartRequest function starts the ZigBee stack.  When the
//  154  *              ZigBee stack starts, the device reads configuration parameters
//  155  *              from Nonvolatile memory and the device joins its network.  The
//  156  *              ZigBee stack calls the zb_StartConrifm callback function when
//  157  *              the startup process completes.
//  158  *
//  159  * @param       none
//  160  *
//  161  * @return      none
//  162  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  163 void zb_StartRequest()
zb_StartRequest:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function zb_StartRequest
        CODE
//  164 {
        FUNCALL zb_StartRequest, zb_ReadConfiguration
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartRequest, SAPI_SendCback
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartRequest, ZDOInitDevice
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 1)
//  165   uint8 logicalType;
//  166 
//  167   zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
        ; Setup parameters for call to function zb_ReadConfiguration
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_ReadConfiguration?relay
//  168 
//  169   // Check for bad combinations of compile flag definitions and device type setting.
//  170   if ((logicalType > ZG_DEVICETYPE_ENDDEVICE)      ||
//  171 #if !ZG_BUILD_ENDDEVICE_TYPE   // Only RTR or Coord possible.
//  172       (logicalType == ZG_DEVICETYPE_ENDDEVICE)     ||
//  173 #endif
//  174 #if !ZG_BUILD_RTR_TYPE         // Only End Device possible.
//  175       (logicalType == ZG_DEVICETYPE_ROUTER)        ||
//  176       (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
//  177 #elif ZG_BUILD_RTRONLY_TYPE    // Only RTR possible.
//  178       (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
//  179 #elif !ZG_BUILD_JOINING_TYPE   // Only Coord possible.
//  180       (logicalType == ZG_DEVICETYPE_ROUTER)        ||
//  181 #endif
//  182       (0))
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JNC     ??zb_StartRequest_0
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??zb_StartRequest_0
        MOVX    A,@DPTR
        JNZ     ??zb_StartRequest_1
//  183   {
//  184     logicalType = ZB_INVALID_PARAMETER;
??zb_StartRequest_0:
        MOV     A,#0x2
        MOVX    @DPTR,A
//  185     SAPI_SendCback(SAPICB_START_CNF, logicalType, 0);
        ; Setup parameters for call to function SAPI_SendCback
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,A
        MOV     R1,#-0x1e
        LCALL   ??SAPI_SendCback?relay
        SJMP    ??zb_StartRequest_2
//  186   }
//  187   else
//  188   {
//  189     logicalType = ZB_SUCCESS;
??zb_StartRequest_1:
        CLR     A
        MOVX    @DPTR,A
//  190     ZDOInitDevice(zgStartDelay);
        ; Setup parameters for call to function ZDOInitDevice
        MOV     DPTR,#zgStartDelay
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??ZDOInitDevice?relay
//  191   }
//  192 
//  193   
//  194   return;
??zb_StartRequest_2:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 XSP16+0
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//  195 }
//  196 
//  197 /******************************************************************************
//  198  * @fn          zb_BindDevice
//  199  *
//  200  * @brief       The zb_BindDevice function establishes or removes a ‘binding? *              between two devices.  Once bound, an application can send
//  201  *              messages to a device by referencing the commandId for the
//  202  *              binding.
//  203  *
//  204  * @param       create - TRUE to create a binding, FALSE to remove a binding
//  205  *              commandId - The identifier of the binding
//  206  *              pDestination - The 64-bit IEEE address of the device to bind to
//  207  *
//  208  * @return      The status of the bind operation is returned in the
//  209  *              zb_BindConfirm callback.
//  210  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  211 void zb_BindDevice ( uint8 create, uint16 commandId, uint8 *pDestination )
zb_BindDevice:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function zb_BindDevice
        CODE
//  212 {
        FUNCALL zb_BindDevice, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, APSME_BindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, SAPI_SendCback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, bindFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindDevice, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  213   zAddrType_t destination;
//  214   uint8 ret = ZB_ALREADY_IN_PROGRESS;
        MOV     ?V0 + 1,#0x20
//  215 
//  216   if ( create )
        MOV     A,R1
        JNZ     $+5
        LJMP    ??zb_BindDevice_0 & 0xFFFF
//  217   {
//  218     if (sapi_bindInProgress == 0xffff)
        MOV     DPTR,#sapi_bindInProgress
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??zb_BindDevice_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??zb_BindDevice_1:
        JNZ     ??CrossCallReturnLabel_10
//  219     {
//  220       if ( pDestination )
        MOV     A,R6
        ORL     A,R7
        JZ      ??zb_BindDevice_2
//  221       {
//  222         destination.addrMode = Addr64Bit;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  223         osal_cpyExtAddr( destination.addr.extAddr, pDestination );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
//  224 
//  225         ret = APSME_BindRequest( sapi_epDesc.endPoint, commandId,
//  226                                             &destination, sapi_epDesc.endPoint );
        ; Setup parameters for call to function APSME_BindRequest
        MOV     DPTR,#sapi_epDesc
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine17_0 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     DPTR,#sapi_epDesc
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??APSME_BindRequest?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R1
        MOV     ?V0 + 1,A
//  227 
//  228         if ( ret == ZSuccess )
        JNZ     ??CrossCallReturnLabel_10
//  229         {
//  230           // Find nwk addr
//  231           ZDP_NwkAddrReq(pDestination, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDP_NwkAddrReq?relay
//  232           osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine8 & 0xFFFF
//  233         }
//  234       }
//  235       else
//  236       {
//  237         ret = ZB_INVALID_PARAMETER;
//  238         destination.addrMode = Addr16Bit;
//  239         destination.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  240         if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumOutClusters,
//  241                                                 sapi_epDesc.simpleDesc->pAppOutClusterList ) )
//  242         {
//  243           // Try to match with a device in the allow bind mode
//  244           ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
//  245               sapi_epDesc.simpleDesc->AppProfId, 1, &commandId, 0, (cId_t *)NULL, 0 );
//  246         }
//  247         else if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumInClusters,
//  248                                                 sapi_epDesc.simpleDesc->pAppInClusterList ) )
//  249         {
//  250           ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
//  251               sapi_epDesc.simpleDesc->AppProfId, 0, (cId_t *)NULL, 1, &commandId, 0 );
//  252         }
//  253 
//  254         if ( ret == ZB_SUCCESS )
//  255         {
//  256           // Set a timer to make sure bind completes
//  257 #if ( ZG_BUILD_RTR_TYPE )
//  258           osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, AIB_MaxBindingTime);
//  259 #else
//  260           // AIB_MaxBindingTime is not defined for an End Device
//  261           osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, zgApsDefaultMaxBindingTime);
//  262 #endif
//  263           sapi_bindInProgress = commandId;
//  264           return; // dont send cback event
//  265         }
//  266       }
//  267     }
//  268 
//  269     SAPI_SendCback( SAPICB_BIND_CNF, ret, commandId );
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function SAPI_SendCback
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V0 + 1
        MOV     R1,#-0x1f
        LCALL   ??SAPI_SendCback?relay
        LJMP    ??CrossCallReturnLabel_11 & 0xFFFF
??zb_BindDevice_2:
        MOV     ?V0 + 1,#0x2
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??ZDO_AnyClusterMatches?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R1
        JZ      ??zb_BindDevice_3
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 24)
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x1
        SJMP    ??zb_BindDevice_4
        CFI CFA_XSP16 add(XSP16, 23)
??zb_BindDevice_3:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??ZDO_AnyClusterMatches?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_10 & 0xFFFF
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 1,#0x1
        MOV     R0,#?V0 + 1
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x0
??zb_BindDevice_4:
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R1
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 1
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_10 & 0xFFFF
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#zgApsDefaultMaxBindingTime
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x20
        MOV     DPTR,#sapi_TaskID
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#sapi_bindInProgress
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_11
//  270   }
//  271   else
//  272   {
//  273     // Remove local bindings for the commandId
//  274     BindingEntry_t *pBind;
//  275 
//  276     // Loop through bindings an remove any that match the cluster
//  277     while ( pBind = bindFind( sapi_epDesc.simpleDesc->EndPoint, commandId, 0 ) )
//  278     {
//  279       bindRemoveEntry(pBind);
??zb_BindDevice_5:
        ; Setup parameters for call to function bindRemoveEntry
        LCALL   ??bindRemoveEntry?relay
//  280     }
??zb_BindDevice_0:
        ; Setup parameters for call to function bindFind
        MOV     R4,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ??bindFind?relay
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zb_BindDevice_5
//  281     osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine8 & 0xFFFF
//  282   }
??CrossCallReturnLabel_11:
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  283   return;
//  284 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_9:
        INC     DPTR
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     DPTR,#sapi_epDesc + 3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  285 /******************************************************************************
//  286  * @fn          zb_PermitJoiningRequest
//  287  *
//  288  * @brief       The zb_PermitJoiningRequest function is used to control the
//  289  *              joining permissions and thus allow or disallow new devices from
//  290  *              joining the network.
//  291  *
//  292  * @param       destination - The destination parameter indicates the address
//  293  *                            of the device for which the joining permissions
//  294  *                            should be set. This is usually the local device
//  295  *                            address or the special broadcast address that denotes
//  296  *                            all routers and coordinator ( 0xFFFC ). This way
//  297  *                            the joining permissions of a single device or the
//  298  *                            whole network can be controlled.
//  299  *              timeout -  Indicates the amount of time in seconds for which
//  300  *                         the joining permissions should be turned on.
//  301  *                         If timeout is set to 0x00, the device will turn off the
//  302  *                         joining permissions indefinitely. If it is set to 0xFF,
//  303  *                         the joining permissions will be turned on indefinitely.
//  304  *
//  305  *
//  306  * @return      ZB_SUCCESS or a failure code
//  307  *
//  308  */
//  309 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  310 uint8 zb_PermitJoiningRequest ( uint16 destination, uint8 timeout )
zb_PermitJoiningRequest:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function zb_PermitJoiningRequest
        CODE
//  311 {
        ; Saved register size: 0
        ; Auto size: 0
//  312 #if defined( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  313   zAddrType_t dstAddr;
//  314 
//  315   dstAddr.addrMode = Addr16Bit;
//  316   dstAddr.addr.shortAddr = destination;
//  317 
//  318   return( (uint8) ZDP_MgmtPermitJoinReq( &dstAddr, timeout, 0, 0 ) );
//  319 #else
//  320   (void)destination;
//  321   (void)timeout;
//  322   return ZUnsupportedMode;
        MOV     R1,#0x12
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
//  323 #endif
//  324 }
//  325 /******************************************************************************
//  326  * @fn          zb_AllowBind
//  327  *
//  328  * @brief       The zb_AllowBind function puts the device into the
//  329  *              Allow Binding Mode for a given period of time.  A peer device
//  330  *              can establish a binding to a device in the Allow Binding Mode
//  331  *              by calling zb_BindDevice with a destination address of NULL
//  332  *
//  333  * @param       timeout - The number of seconds to remain in the allow binding
//  334  *                        mode.  Valid values range from 1 through 65.
//  335  *                        If 0, the Allow Bind mode will be set false without TO
//  336  *                        If greater than 64, the Allow Bind mode will be true
//  337  *
//  338  * @return      ZB_SUCCESS if the device entered the allow bind mode, else
//  339  *              an error code.
//  340  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  341 void zb_AllowBind ( uint8 timeout )
zb_AllowBind:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function zb_AllowBind
        CODE
//  342 {
        FUNCALL zb_AllowBind, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_AllowBind, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_AllowBind, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_AllowBind, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_AllowBind, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  343   HalLedSet(HAL_LED_1, HAL_LED_MODE_FLASH);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  344 
//  345   osal_stop_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  346 
//  347   if ( timeout == 0 )
        MOV     A,R6
        JNZ     ??zb_AllowBind_0
//  348   {
//  349     afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
        ; Setup parameters for call to function afSetMatch
        LCALL   ?Subroutine4 & 0xFFFF
//  350   }
??CrossCallReturnLabel_15:
        SJMP    ??CrossCallReturnLabel_14
//  351   else
//  352   {
//  353     afSetMatch(sapi_epDesc.simpleDesc->EndPoint, TRUE);
??zb_AllowBind_0:
        ; Setup parameters for call to function afSetMatch
        MOV     R2,#0x1
        LCALL   ??Subroutine15_0 & 0xFFFF
//  354     if ( timeout != 0xFF )
??CrossCallReturnLabel_18:
        MOV     A,#-0x1
        XRL     A,R6
        JZ      ??CrossCallReturnLabel_14
//  355     {
//  356       if ( timeout > 64 )
        MOV     A,R6
        CLR     C
        SUBB    A,#0x41
        JC      ??zb_AllowBind_1
//  357       {
//  358         timeout = 64;
        MOV     R6,#0x40
//  359       }
//  360       osal_start_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER, timeout*1000);
??zb_AllowBind_1:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R6
        MOV     R4,A
        MOV     B,#-0x18
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x3
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x40
        MOV     DPTR,#sapi_TaskID
        LCALL   ??Subroutine14_0 & 0xFFFF
        CFI EndBlock cfiBlock11
//  361     }
//  362   }
//  363   return;
??CrossCallReturnLabel_14:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  364 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV     R4,#-0x6
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x2
        MOV     DPTR,#ZDAppTaskID
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond17 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
//  365 /******************************************************************************
//  366  * @fn          zb_SendDataRequest
//  367  *
//  368  * @brief       The zb_SendDataRequest function initiates transmission of data
//  369  *              to a peer device
//  370  *
//  371  * @param       destination - The destination of the data.  The destination can
//  372  *                            be one of the following:
//  373  *                            - 16-Bit short address of device [0-0xfffD]
//  374  *                            - ZB_BROADCAST_ADDR sends the data to all devices
//  375  *                              in the network.
//  376  *                            - ZB_BINDING_ADDR sends the data to a previously
//  377  *                              bound device.
//  378  *
//  379  *              commandId - The command ID to send with the message.  If the
//  380  *                          ZB_BINDING_ADDR destination is used, this parameter
//  381  *                          also indicates the binding to use.
//  382  *
//  383  *              len - The size of the pData buffer in bytes
//  384  *              handle - A handle used to identify the send data request.
//  385  *              txOptions - TRUE if requesting acknowledgement from the destination.
//  386  *              radius - The max number of hops the packet can travel through
//  387  *                       before it is dropped.
//  388  *
//  389  * @return      none
//  390  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  391 void zb_SendDataRequest ( uint16 destination, uint16 commandId, uint8 len,
zb_SendDataRequest:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function zb_SendDataRequest
        CODE
//  392                           uint8 *pData, uint8 handle, uint8 txOptions, uint8 radius )
//  393 {
        FUNCALL zb_SendDataRequest, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataRequest, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataRequest, SAPI_SendCback
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,R1
        MOV     R7,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  394   afStatus_t status;
//  395   afAddrType_t dstAddr;
//  396 
//  397   txOptions |= AF_DISCV_ROUTE;
        MOV     A,R6
        SETB    0xE0 /* A   */.5
        MOV     R6,A
//  398 
//  399   // Set the destination address
//  400   if (destination == ZB_BINDING_ADDR)
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??zb_SendDataRequest_0
        MOV     A,#-0x1
        XRL     A,R3
??zb_SendDataRequest_0:
        JNZ     ??zb_SendDataRequest_1
//  401   {
//  402     // Binding
//  403     dstAddr.addrMode = afAddrNotPresent;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??zb_SendDataRequest_2
//  404   }
//  405   else
//  406   {
//  407     // Use short address
//  408     dstAddr.addr.shortAddr = destination;
??zb_SendDataRequest_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  409     dstAddr.addrMode = afAddr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  410 
//  411     if ( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( destination ) )
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        LCALL   ??NLME_IsAddressBroadcast?relay
        MOV     A,R1
        JZ      ??zb_SendDataRequest_2
//  412     {
//  413       txOptions &= ~AF_ACK_REQUEST;
        MOV     A,R6
        CLR     0xE0 /* A   */.4
        MOV     R6,A
//  414     }
//  415   }
//  416 
//  417   dstAddr.panId = 0;                                    // Not an inter-pan message.
??zb_SendDataRequest_2:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  418   dstAddr.endPoint = sapi_epDesc.simpleDesc->EndPoint;  // Set the endpoint.
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  419 
//  420   // Send the message
//  421   status = AF_DataRequest(&dstAddr, &sapi_epDesc, commandId, len,
//  422                           pData, &handle, txOptions, radius);
        ; Setup parameters for call to function AF_DataRequest
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,R7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R6
        MOV     R1,A
        MOV     R4,#sapi_epDesc & 0xff
        MOV     R5,#(sapi_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R1
        MOV     R2,A
//  423 
//  424   if (status != afStatus_SUCCESS)
        JZ      ??zb_SendDataRequest_3
//  425   {
//  426     SAPI_SendCback( SAPICB_DATA_CNF, status, handle );
        ; Setup parameters for call to function SAPI_SendCback
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R1,#-0x20
        LCALL   ??SAPI_SendCback?relay
//  427   }
//  428 }
??zb_SendDataRequest_3:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock23
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_7
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker28 Using cfiCommon1
        CFI (cfiPicker28) NoFunction
        CFI (cfiPicker28) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiPicker28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_9, ??CrossCallReturnLabel_7
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_8
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_15
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_17
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_18
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_0
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_1
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     DPTR,#sapi_epDesc + 3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
//  429 
//  430 /******************************************************************************
//  431  * @fn          zb_ReadConfiguration
//  432  *
//  433  * @brief       The zb_ReadConfiguration function is used to get a
//  434  *              Configuration Protperty from Nonvolatile memory.
//  435  *
//  436  * @param       configId - The identifier for the configuration property
//  437  *              len - The size of the pValue buffer in bytes
//  438  *              pValue - A buffer to hold the configuration property
//  439  *
//  440  * @return      none
//  441  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  442 uint8 zb_ReadConfiguration( uint8 configId, uint8 len, void *pValue )
zb_ReadConfiguration:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function zb_ReadConfiguration
        CODE
//  443 {
        FUNCALL zb_ReadConfiguration, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReadConfiguration, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  444   uint8 size;
//  445 
//  446   size = (uint8)osal_nv_item_len( configId );
        ; Setup parameters for call to function osal_nv_item_len
        MOV     ?V0 + 2,R7
        MOV     R2,?V0 + 2
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_len?relay
        MOV     A,R2
        MOV     R1,A
//  447   if ( size > len )
        MOV     A,R6
        CLR     C
        SUBB    A,R1
        JNC     ??zb_ReadConfiguration_0
//  448   {
//  449     return ZFailure;
        MOV     R1,#0x1
        SJMP    ??zb_ReadConfiguration_1
//  450   }
//  451   else
//  452   {
//  453     return( osal_nv_read(configId, 0, size, pValue) );
??zb_ReadConfiguration_0:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     ?V0 + 0,R7
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  454   }
??zb_ReadConfiguration_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock39
//  455 }
//  456 /******************************************************************************
//  457  * @fn          zb_WriteConfiguration
//  458  *
//  459  * @brief       The zb_WriteConfiguration function is used to write a
//  460  *              Configuration Property to nonvolatile memory.
//  461  *
//  462  * @param       configId - The identifier for the configuration property
//  463  *              len - The size of the pValue buffer in bytes
//  464  *              pValue - A buffer containing the new value of the
//  465  *                       configuration property
//  466  *
//  467  * @return      none
//  468  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  469 uint8 zb_WriteConfiguration( uint8 configId, uint8 len, void *pValue )
zb_WriteConfiguration:
        CFI Block cfiBlock40 Using cfiCommon0
        CFI Function zb_WriteConfiguration
        CODE
//  470 {
        FUNCALL zb_WriteConfiguration, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  471   return( osal_nv_write(configId, 0, len, pValue) );
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     ?V0 + 0,R7
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        CFI EndBlock cfiBlock40
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  472 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock41
//  473 /******************************************************************************
//  474  * @fn          zb_GetDeviceInfo
//  475  *
//  476  * @brief       The zb_GetDeviceInfo function retrieves a Device Information
//  477  *              Property.
//  478  *
//  479  * @param       param - The identifier for the device information
//  480  *              pValue - A buffer to hold the device information
//  481  *
//  482  * @return      none
//  483  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  484 void zb_GetDeviceInfo ( uint8 param, void *pValue )
zb_GetDeviceInfo:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function zb_GetDeviceInfo
        CODE
//  485 {
        FUNCALL zb_GetDeviceInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_GetDeviceInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_GetDeviceInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_GetDeviceInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_GetDeviceInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_GetDeviceInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_GetDeviceInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_GetDeviceInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
//  486   switch(param)
        JZ      ??zb_GetDeviceInfo_0
        DEC     A
        JZ      ??zb_GetDeviceInfo_1
        DEC     A
        JZ      ??zb_GetDeviceInfo_2
        DEC     A
        JZ      ??zb_GetDeviceInfo_3
        DEC     A
        JZ      ??zb_GetDeviceInfo_4
        DEC     A
        JZ      ??zb_GetDeviceInfo_5
        DEC     A
        JZ      ??zb_GetDeviceInfo_6
        DEC     A
        JZ      ??zb_GetDeviceInfo_7
        SJMP    ??zb_GetDeviceInfo_8
//  487   {
//  488     case ZB_INFO_DEV_STATE:
//  489       osal_memcpy(pValue, &devState, sizeof(uint8));
??zb_GetDeviceInfo_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#devState & 0xff
        MOV     ?V0 + 1,#(devState >> 8) & 0xff
??zb_GetDeviceInfo_9:
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x1
        SJMP    ??zb_GetDeviceInfo_10
        CFI CFA_XSP16 add(XSP16, 11)
//  490       break;
//  491     case ZB_INFO_IEEE_ADDR:
//  492       osal_memcpy(pValue, &aExtendedAddress, Z_EXTADDR_LEN);
??zb_GetDeviceInfo_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#aExtendedAddress & 0xff
        MOV     ?V0 + 1,#(aExtendedAddress >> 8) & 0xff
        SJMP    ??zb_GetDeviceInfo_11
//  493       break;
//  494     case ZB_INFO_SHORT_ADDR:
//  495       osal_memcpy(pValue, &_NIB.nwkDevAddress, sizeof(uint16));
??zb_GetDeviceInfo_2:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(_NIB + 20) & 0xff
        MOV     ?V0 + 1,#((_NIB + 20) >> 8) & 0xff
??zb_GetDeviceInfo_12:
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x2
        SJMP    ??zb_GetDeviceInfo_10
        CFI CFA_XSP16 add(XSP16, 11)
//  496       break;
//  497     case ZB_INFO_PARENT_SHORT_ADDR:
//  498       osal_memcpy(pValue, &_NIB.nwkCoordAddress, sizeof(uint16));
??zb_GetDeviceInfo_3:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(_NIB + 23) & 0xff
        MOV     ?V0 + 1,#((_NIB + 23) >> 8) & 0xff
        SJMP    ??zb_GetDeviceInfo_12
//  499       break;
//  500     case ZB_INFO_PARENT_IEEE_ADDR:
//  501       osal_memcpy(pValue, &_NIB.nwkCoordExtAddress, Z_EXTADDR_LEN);
??zb_GetDeviceInfo_4:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(_NIB + 25) & 0xff
        MOV     ?V0 + 1,#((_NIB + 25) >> 8) & 0xff
        SJMP    ??zb_GetDeviceInfo_11
//  502       break;
//  503     case ZB_INFO_CHANNEL:
//  504       osal_memcpy(pValue, &_NIB.nwkLogicalChannel, sizeof(uint8));
??zb_GetDeviceInfo_5:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(_NIB + 22) & 0xff
        MOV     ?V0 + 1,#((_NIB + 22) >> 8) & 0xff
        SJMP    ??zb_GetDeviceInfo_9
//  505       break;
//  506     case ZB_INFO_PAN_ID:
//  507       osal_memcpy(pValue, &_NIB.nwkPanId, sizeof(uint16));
??zb_GetDeviceInfo_6:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(_NIB + 33) & 0xff
        MOV     ?V0 + 1,#((_NIB + 33) >> 8) & 0xff
        SJMP    ??zb_GetDeviceInfo_12
//  508       break;
//  509     case ZB_INFO_EXT_PAN_ID:
//  510       osal_memcpy(pValue, &_NIB.extendedPANID, Z_EXTADDR_LEN);
??zb_GetDeviceInfo_7:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#(_NIB + 53) & 0xff
        MOV     ?V0 + 1,#((_NIB + 53) >> 8) & 0xff
??zb_GetDeviceInfo_11:
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x8
??zb_GetDeviceInfo_10:
        MOV     R5,#0x0
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  511       break;
//  512   }
//  513 }
??zb_GetDeviceInfo_8:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock42
//  514 
//  515 /******************************************************************************
//  516  * @fn          zb_FindDeviceRequest
//  517  *
//  518  * @brief       The zb_FindDeviceRequest function is used to determine the
//  519  *              short address for a device in the network.  The device initiating
//  520  *              a call to zb_FindDeviceRequest and the device being discovered
//  521  *              must both be a member of the same network.  When the search is
//  522  *              complete, the zv_FindDeviceConfirm callback function is called.
//  523  *
//  524  * @param       searchType - The type of search to perform. Can be one of following:
//  525  *                           ZB_IEEE_SEARCH - Search for 16-bit addr given IEEE addr.
//  526  *              searchKey - Value to search on.
//  527  *
//  528  * @return      none
//  529  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  530 void zb_FindDeviceRequest( uint8 searchType, void *searchKey )
zb_FindDeviceRequest:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function zb_FindDeviceRequest
        CODE
//  531 {
        FUNCALL zb_FindDeviceRequest, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  532   if (searchType == ZB_IEEE_SEARCH)
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??zb_FindDeviceRequest_0
//  533   {
//  534     ZDP_NwkAddrReq((uint8*) searchKey, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        LCALL   ??ZDP_NwkAddrReq?relay
//  535   }
//  536 }
??zb_FindDeviceRequest_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock43
//  537 /******************************************************************************
//  538  * @fn          SAPI_StartConfirm
//  539  *
//  540  * @brief       The SAPI_StartConfirm callback is called by the ZigBee stack
//  541  *              after a start request operation completes
//  542  *
//  543  * @param       status - The status of the start operation.  Status of
//  544  *                       ZB_SUCCESS indicates the start operation completed
//  545  *                       successfully.  Else the status is an error code.
//  546  *
//  547  * @return      none
//  548  */
//  549 void SAPI_StartConfirm( uint8 status )
//  550 {
//  551 #if defined ( MT_SAPI_CB_FUNC )
//  552   /* First check if MT has subscribed for this callback. If so , pass it as
//  553   a event to MonitorTest and return control to calling function after that */
//  554   if ( SAPICB_CHECK( SPI_CB_SAPI_START_CNF ) )
//  555   {
//  556     zb_MTCallbackStartConfirm( status );
//  557   }
//  558   else
//  559 #endif  //MT_SAPI_CB_FUNC
//  560   {
//  561 #if ( SAPI_CB_FUNC )
//  562     zb_StartConfirm( status );
//  563 #endif
//  564   }
//  565 }
//  566 
//  567 /******************************************************************************
//  568  * @fn          SAPI_SendDataConfirm
//  569  *
//  570  * @brief       The SAPI_SendDataConfirm callback function is called by the
//  571  *              ZigBee after a send data operation completes
//  572  *
//  573  * @param       handle - The handle identifying the data transmission.
//  574  *              status - The status of the operation.
//  575  *
//  576  * @return      none
//  577  */
//  578 void SAPI_SendDataConfirm( uint8 handle, uint8 status )
//  579 {
//  580 #if defined ( MT_SAPI_CB_FUNC )
//  581   /* First check if MT has subscribed for this callback. If so , pass it as
//  582   a event to MonitorTest and return control to calling function after that */
//  583   if ( SAPICB_CHECK( SPI_CB_SAPI_SEND_DATA_CNF ) )
//  584   {
//  585     zb_MTCallbackSendDataConfirm( handle, status );
//  586   }
//  587   else
//  588 #endif  //MT_SAPI_CB_FUNC
//  589   {
//  590 #if ( SAPI_CB_FUNC )
//  591     zb_SendDataConfirm( handle, status );
//  592 #endif
//  593   }
//  594 }
//  595 
//  596 /******************************************************************************
//  597  * @fn          SAPI_BindConfirm
//  598  *
//  599  * @brief       The SAPI_BindConfirm callback is called by the ZigBee stack
//  600  *              after a bind operation completes.
//  601  *
//  602  * @param       commandId - The command ID of the binding being confirmed.
//  603  *              status - The status of the bind operation.
//  604  *              allowBind - TRUE if the bind operation was initiated by a call
//  605  *                          to zb_AllowBindRespones.  FALSE if the operation
//  606  *                          was initiated by a call to ZB_BindDevice
//  607  *
//  608  * @return      none
//  609  */
//  610 void SAPI_BindConfirm( uint16 commandId, uint8 status )
//  611 {
//  612 #if defined ( MT_SAPI_CB_FUNC )
//  613   /* First check if MT has subscribed for this callback. If so , pass it as
//  614   a event to MonitorTest and return control to calling function after that */
//  615   if ( SAPICB_CHECK( SPI_CB_SAPI_BIND_CNF ) )
//  616   {
//  617     zb_MTCallbackBindConfirm( commandId, status );
//  618   }
//  619   else
//  620 #endif  //MT_SAPI_CB_FUNC
//  621   {
//  622 #if ( SAPI_CB_FUNC )
//  623     zb_BindConfirm( commandId, status );
//  624 #endif
//  625   }
//  626 }
//  627 /******************************************************************************
//  628  * @fn          SAPI_AllowBindConfirm
//  629  *
//  630  * @brief       Indicates when another device attempted to bind to this device
//  631  *
//  632  * @param
//  633  *
//  634  * @return      none
//  635  */
//  636 void SAPI_AllowBindConfirm( uint16 source )
//  637 {
//  638   #if defined ( MT_SAPI_CB_FUNC )
//  639   /* First check if MT has subscribed for this callback. If so , pass it as
//  640   a event to MonitorTest and return control to calling function after that */
//  641   if ( SAPICB_CHECK( SPI_CB_SAPI_ALLOW_BIND_CNF ) )
//  642   {
//  643     zb_MTCallbackAllowBindConfirm( source );
//  644   }
//  645   else
//  646 #endif  //MT_SAPI_CB_FUNC
//  647   {
//  648 #if ( SAPI_CB_FUNC )
//  649     zb_AllowBindConfirm( source );
//  650 #endif
//  651   }
//  652 }
//  653 /******************************************************************************
//  654  * @fn          SAPI_FindDeviceConfirm
//  655  *
//  656  * @brief       The SAPI_FindDeviceConfirm callback function is called by the
//  657  *              ZigBee stack when a find device operation completes.
//  658  *
//  659  * @param       searchType - The type of search that was performed.
//  660  *              searchKey - Value that the search was executed on.
//  661  *              result - The result of the search.
//  662  *
//  663  * @return      none
//  664  */
//  665 void SAPI_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
//  666 {
//  667 #if defined ( MT_SAPI_CB_FUNC )
//  668   /* First check if MT has subscribed for this callback. If so , pass it as
//  669   a event to MonitorTest and return control to calling function after that */
//  670   if ( SAPICB_CHECK( SPI_CB_SAPI_FIND_DEV_CNF ) )
//  671   {
//  672     zb_MTCallbackFindDeviceConfirm( searchType, searchKey, result );
//  673   }
//  674   else
//  675 #endif  //MT_SAPI_CB_FUNC
//  676   {
//  677 #if ( SAPI_CB_FUNC )
//  678     zb_FindDeviceConfirm( searchType, searchKey, result );
//  679 #endif
//  680   }
//  681 }
//  682 /******************************************************************************
//  683  * @fn          SAPI_ReceiveDataIndication
//  684  *
//  685  * @brief       The SAPI_ReceiveDataIndication callback function is called
//  686  *              asynchronously by the ZigBee stack to notify the application
//  687  *              when data is received from a peer device.
//  688  *
//  689  * @param       source - The short address of the peer device that sent the data
//  690  *              command - The commandId associated with the data
//  691  *              len - The number of bytes in the pData parameter
//  692  *              pData - The data sent by the peer device
//  693  *
//  694  * @return      none
//  695  */
//  696 void SAPI_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
//  697 {
//  698 #if defined ( MT_SAPI_CB_FUNC )
//  699   /* First check if MT has subscribed for this callback. If so , pass it as
//  700   a event to MonitorTest and return control to calling function after that */
//  701   if ( SAPICB_CHECK( SPI_CB_SAPI_RCV_DATA_IND ) )
//  702   {
//  703     zb_MTCallbackReceiveDataIndication( source, command, len, pData  );
//  704   }
//  705   else
//  706 #endif  //MT_SAPI_CB_FUNC
//  707   {
//  708 #if ( SAPI_CB_FUNC )
//  709     zb_ReceiveDataIndication( source, command, len, pData  );
//  710 #endif
//  711   }
//  712 }
//  713 /*********************************************************************
//  714  * @fn      SAPI_ProcessEvent
//  715  *
//  716  * @brief   Simple API Task event processor.  This function
//  717  *          is called to process all events for the task.  Events
//  718  *          include timers, messages and any other user defined events.
//  719  *
//  720  * @param   task_id  - The OSAL assigned task ID.
//  721  * @param   events - events to process.  This is a bit map and can
//  722  *                   contain more than one event.
//  723  *
//  724  * @return  none
//  725  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  726 UINT16 SAPI_ProcessEvent( byte task_id, UINT16 events )
SAPI_ProcessEvent:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI Function SAPI_ProcessEvent
        CODE
//  727 {
        FUNCALL SAPI_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_StartConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, SAPI_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_SendDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_ReceiveDataIndication
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_StartConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_StartConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_AllowBindConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_SendDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_BindConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_BindConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_HandleOsalEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessEvent, zb_HandleOsalEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  728   osal_event_hdr_t *pMsg;
//  729   afIncomingMSGPacket_t *pMSGpkt;
//  730   afDataConfirm_t *pDataConfirm;
//  731 
//  732   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??SAPI_ProcessEvent_0 & 0xFFFF
//  733   {
//  734     pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SAPI_ProcessEvent_1
//  735     while ( pMsg )
//  736     {
//  737       switch ( pMsg->event )
//  738       {
//  739         case ZDO_CB_MSG:
//  740           SAPI_ProcessZDOMsgs( (zdoIncomingMsg_t *)pMsg );
//  741           break;
//  742 
//  743         case AF_DATA_CONFIRM_CMD:
//  744           // This message is received as a confirmation of a data packet sent.
//  745           // The status is of ZStatus_t type [defined in ZComDef.h]
//  746           // The message fields are defined in AF.h
//  747           pDataConfirm = (afDataConfirm_t *) pMsg;
//  748           SAPI_SendDataConfirm( pDataConfirm->transID, pDataConfirm->hdr.status );
//  749           break;
//  750 
//  751         case AF_INCOMING_MSG_CMD:
//  752           pMSGpkt = (afIncomingMSGPacket_t *) pMsg;
//  753           SAPI_ReceiveDataIndication( pMSGpkt->srcAddr.addr.shortAddr, pMSGpkt->clusterId,
//  754                                     pMSGpkt->cmd.DataLength, pMSGpkt->cmd.Data);
//  755           break;
//  756 
//  757         case ZDO_STATE_CHANGE:
//  758           // If the device has started up, notify the application
//  759           if (pMsg->status == DEV_END_DEVICE ||
//  760               pMsg->status == DEV_ROUTER ||
//  761               pMsg->status == DEV_ZB_COORD )
//  762           {
//  763             SAPI_StartConfirm( ZB_SUCCESS );
//  764           }
//  765           else  if (pMsg->status == DEV_HOLD ||
//  766                   pMsg->status == DEV_INIT)
//  767           {
//  768             SAPI_StartConfirm( ZB_INIT );
//  769           }
//  770           break;
//  771 
//  772         case ZDO_MATCH_DESC_RSP_SENT:
//  773           SAPI_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)pMsg)->nwkAddr );
//  774           break;
//  775 
//  776         case SAPICB_DATA_CNF:
//  777           SAPI_SendDataConfirm( (uint8)((sapi_CbackEvent_t *)pMsg)->data,
//  778                                     ((sapi_CbackEvent_t *)pMsg)->hdr.status );
//  779           break;
//  780 
//  781         case SAPICB_BIND_CNF:
//  782           SAPI_BindConfirm( ((sapi_CbackEvent_t *)pMsg)->data,
//  783                               ((sapi_CbackEvent_t *)pMsg)->hdr.status );
//  784           break;
//  785 
//  786         case SAPICB_START_CNF:
//  787           SAPI_StartConfirm( ((sapi_CbackEvent_t *)pMsg)->hdr.status );
??SAPI_ProcessEvent_2:
        ; Setup parameters for call to function zb_StartConfirm
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
??SAPI_ProcessEvent_3:
        LCALL   ??zb_StartConfirm?relay
//  788           break;
//  789 
//  790         default:
//  791           // User messages should be handled by user or passed to the application
//  792           if ( pMsg->event >= ZB_USER_MSG )
//  793           {
//  794 
//  795           }
//  796           break;
//  797       }
//  798 
//  799       // Release the memory
//  800       osal_msg_deallocate( (uint8 *) pMsg );
??SAPI_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  801 
//  802       // Next
//  803       pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        MOV     R1,?V0 + 2
??SAPI_ProcessEvent_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??SAPI_ProcessEvent_5 & 0xFFFF
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SAPI_ProcessEvent_6
        ADD     A,#0x49
        JZ      ??SAPI_ProcessEvent_7
        DEC     A
        JNZ     $+5
        LJMP    ??SAPI_ProcessEvent_8 & 0xFFFF
        DEC     A
        JZ      ??SAPI_ProcessEvent_9
        ADD     A,#-0xd
        JNZ     $+5
        LJMP    ??SAPI_ProcessEvent_10 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??SAPI_ProcessEvent_11 & 0xFFFF
        DEC     A
        JZ      ??SAPI_ProcessEvent_2
        ADD     A,#-0x1b
        JZ      ??SAPI_ProcessEvent_12
        SJMP    ??SAPI_ProcessEvent_4
??SAPI_ProcessEvent_9:
        ; Setup parameters for call to function SAPI_ProcessZDOMsgs
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??SAPI_ProcessZDOMsgs?relay
        SJMP    ??SAPI_ProcessEvent_4
??SAPI_ProcessEvent_12:
        ; Setup parameters for call to function zb_SendDataConfirm
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
??SAPI_ProcessEvent_13:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zb_SendDataConfirm?relay
        SJMP    ??SAPI_ProcessEvent_4
??SAPI_ProcessEvent_6:
        ; Setup parameters for call to function zb_ReceiveDataIndication
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ??zb_ReceiveDataIndication?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
??SAPI_ProcessEvent_7:
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??SAPI_ProcessEvent_14
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SAPI_ProcessEvent_14
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x9
        JNZ     ??SAPI_ProcessEvent_15
??SAPI_ProcessEvent_14:
        ; Setup parameters for call to function zb_StartConfirm
        MOV     R1,#0x0
        LJMP    ??SAPI_ProcessEvent_3 & 0xFFFF
??SAPI_ProcessEvent_15:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??SAPI_ProcessEvent_16
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
??SAPI_ProcessEvent_16:
        ; Setup parameters for call to function zb_StartConfirm
        MOV     R1,#0x22
        LJMP    ??SAPI_ProcessEvent_3 & 0xFFFF
??SAPI_ProcessEvent_8:
        ; Setup parameters for call to function zb_AllowBindConfirm
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ??zb_AllowBindConfirm?relay
        LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
??SAPI_ProcessEvent_10:
        ; Setup parameters for call to function zb_SendDataConfirm
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        LJMP    ??SAPI_ProcessEvent_13 & 0xFFFF
??SAPI_ProcessEvent_11:
        ; Setup parameters for call to function zb_BindConfirm
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ??zb_BindConfirm?relay
        LJMP    ??SAPI_ProcessEvent_4 & 0xFFFF
//  804     }
//  805 
//  806     // Return unprocessed events
//  807     return (events ^ SYS_EVENT_MSG);
??SAPI_ProcessEvent_5:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
??SAPI_ProcessEvent_17:
        MOV     R3,A
        SJMP    ??SAPI_ProcessEvent_18
//  808   }
//  809 
//  810   if ( events & ZB_ALLOW_BIND_TIMER )
??SAPI_ProcessEvent_0:
        MOV     A,R3
        ANL     A,#0x40
        JZ      ??SAPI_ProcessEvent_19
//  811   {
//  812     afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
        ; Setup parameters for call to function afSetMatch
        LCALL   ?Subroutine4 & 0xFFFF
//  813     return (events ^ ZB_ALLOW_BIND_TIMER);
??CrossCallReturnLabel_16:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x40
        SJMP    ??SAPI_ProcessEvent_17
//  814   }
//  815 
//  816   if ( events & ZB_BIND_TIMER )
??SAPI_ProcessEvent_19:
        MOV     A,R3
        ANL     A,#0x20
        JZ      ??SAPI_ProcessEvent_20
//  817   {
//  818     // Send bind confirm callback to application
//  819     SAPI_BindConfirm( sapi_bindInProgress, ZB_TIMEOUT );
        ; Setup parameters for call to function zb_BindConfirm
        MOV     R1,#0x21
        LCALL   ?Subroutine6 & 0xFFFF
//  820     sapi_bindInProgress = 0xffff;
//  821 
//  822     return (events ^ ZB_BIND_TIMER);
??CrossCallReturnLabel_2:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x20
        SJMP    ??SAPI_ProcessEvent_17
//  823   }
//  824 
//  825   if ( events & ZB_ENTRY_EVENT )
??SAPI_ProcessEvent_20:
        MOV     A,R3
        ANL     A,#0x10
        JZ      ??SAPI_ProcessEvent_21
//  826   {
//  827     uint8 startOptions;
//  828 
//  829     // Give indication to application of device startup
//  830 #if ( SAPI_CB_FUNC )
//  831     zb_HandleOsalEvent( ZB_ENTRY_EVENT );
        ; Setup parameters for call to function zb_HandleOsalEvent
        MOV     R2,#0x0
        MOV     R3,#0x10
        LCALL   ??zb_HandleOsalEvent?relay
//  832 #endif
//  833 
//  834     // LED off cancels HOLD_AUTO_START blink set in the stack
//  835     HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  836 
//  837 //    zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
//  838 //    if ( startOptions & ZCD_STARTOPT_AUTO_START )
//  839 //    {
//  840       zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   ??zb_StartRequest?relay
//  841 //    }
//  842 //    else
//  843 //    {
//  844       // blink leds and wait for external input to config and restart
//  845 //      HalLedBlink(HAL_LED_2, 0, 50, 500);
//  846 //    }
//  847 
//  848     return (events ^ ZB_ENTRY_EVENT );
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x10
        SJMP    ??SAPI_ProcessEvent_17
//  849   }
//  850 
//  851   // This must be the last event to be processed
//  852   if ( events & ( ZB_USER_EVENTS ) )
??SAPI_ProcessEvent_21:
        MOV     A,R2
        JZ      ??SAPI_ProcessEvent_22
//  853   {
//  854     // User events are passed to the application
//  855 #if ( SAPI_CB_FUNC )
//  856     zb_HandleOsalEvent( events );
        ; Setup parameters for call to function zb_HandleOsalEvent
        LCALL   ??zb_HandleOsalEvent?relay
//  857 #endif
//  858 
//  859     // Do not return here, return 0 later
//  860   }
//  861 
//  862   // Discard unknown events
//  863   return 0;
??SAPI_ProcessEvent_22:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SAPI_ProcessEvent_18:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock44
//  864 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond45 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        MOV     R2,#0x0
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_20:
        LCALL   ??afSetMatch?relay
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
//  865 
//  866 /*********************************************************************
//  867  * @fn      SAPI_ProcessZDOMsgs()
//  868  *
//  869  * @brief   Process response messages
//  870  *
//  871  * @param   none
//  872  *
//  873  * @return  none
//  874  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  875 void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
SAPI_ProcessZDOMsgs:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function SAPI_ProcessZDOMsgs
        CODE
//  876 {
        FUNCALL SAPI_ProcessZDOMsgs, ZDO_ParseAddrRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessZDOMsgs, zb_FindDeviceConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessZDOMsgs, APSME_BindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessZDOMsgs, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessZDOMsgs, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_ProcessZDOMsgs, zb_BindConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  877   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for SAPI_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32768
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SAPI_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SAPI_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??CrossCallReturnLabel_3
        CODE
//  878   {
//  879     case NWK_addr_rsp:
//  880       {
//  881         // Send find device callback to application
//  882         ZDO_NwkIEEEAddrResp_t *pNwkAddrRsp = ZDO_ParseAddrRsp( inMsg );
??SAPI_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseAddrRsp
        LCALL   ??ZDO_ParseAddrRsp?relay
        MOV     DPL,R2
        MOV     DPH,R3
//  883         SAPI_FindDeviceConfirm( ZB_IEEE_SEARCH, (uint8*)&pNwkAddrRsp->nwkAddr, pNwkAddrRsp->extAddr );
        ; Setup parameters for call to function zb_FindDeviceConfirm
        MOV     A,DPL
        ADD     A,#0x3
        MOV     R4,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R5,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ??zb_FindDeviceConfirm?relay
//  884       }
//  885       break;
        LJMP    ??CrossCallReturnLabel_3 & 0xFFFF
//  886 
//  887     case Match_Desc_rsp:
//  888       {
//  889         zAddrType_t dstAddr;
//  890         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??SAPI_ProcessZDOMsgs_1:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  891 
//  892         if ( sapi_bindInProgress != 0xffff )
        MOV     DPTR,#sapi_bindInProgress
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??SAPI_ProcessZDOMsgs_2
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??SAPI_ProcessZDOMsgs_2:
        JZ      ??CrossCallReturnLabel_3
//  893         {
//  894           // Create a binding table entry
//  895           dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  896           dstAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  897 
//  898           if ( APSME_BindRequest( sapi_epDesc.simpleDesc->EndPoint,
//  899                      sapi_bindInProgress, &dstAddr, pRsp->epList[0] ) == ZSuccess )
        ; Setup parameters for call to function APSME_BindRequest
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPTR,#sapi_bindInProgress
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ??APSME_BindRequest?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_3
//  900           {
//  901             osal_stop_timerEx(sapi_TaskID,  ZB_BIND_TIMER);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x20
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  902             osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine8 & 0xFFFF
//  903 
//  904             // Find IEEE addr
//  905             ZDP_IEEEAddrReq( pRsp->nwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ??ZDP_IEEEAddrReq?relay
//  906 #if defined ( MT_SAPI_CB_FUNC )
//  907             zb_MTCallbackBindConfirm( sapi_bindInProgress, ZB_SUCCESS );
//  908 #endif              
//  909             // Send bind confirm callback to application
//  910 #if ( SAPI_CB_FUNC )
//  911             zb_BindConfirm( sapi_bindInProgress, ZB_SUCCESS );
        ; Setup parameters for call to function zb_BindConfirm
        MOV     R1,#0x0
        LCALL   ?Subroutine6 & 0xFFFF
//  912 #endif
//  913             sapi_bindInProgress = 0xffff;
//  914           }
//  915         }
//  916       }
//  917       break;
//  918   }
//  919 }
??CrossCallReturnLabel_3:
        MOV     A,#0x9
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker58 Using cfiCommon1
        CFI (cfiPicker58) NoFunction
        CFI (cfiPicker58) Picker
        INC     DPTR
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiPicker58
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        INC     DPTR
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine17_0
        ; // Fall through to label ??Subroutine17_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine17_0:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 18)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond70 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond71 Using cfiCommon0
        CFI (cfiCond71) NoFunction
        CFI (cfiCond71) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond71) CFA_SP SP+0
        CFI (cfiCond71) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker72 Using cfiCommon1
        CFI (cfiPicker72) NoFunction
        CFI (cfiPicker72) Picker
        MOV     DPTR,#sapi_bindInProgress
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??zb_BindConfirm?relay
        MOV     DPTR,#sapi_bindInProgress
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond70
        CFI EndBlock cfiCond71
        CFI EndBlock cfiPicker72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond73 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond74 Using cfiCommon0
        CFI (cfiCond74) NoFunction
        CFI (cfiCond74) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond74) CFA_SP SP+0
        CFI (cfiCond74) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker75 Using cfiCommon1
        CFI (cfiPicker75) NoFunction
        CFI (cfiPicker75) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_19:
        RET
        CFI EndBlock cfiCond73
        CFI EndBlock cfiCond74
        CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond76 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond78 Using cfiCommon0
        CFI (cfiCond78) NoFunction
        CFI (cfiCond78) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_17
        CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond78) CFA_SP SP+0
        CFI (cfiCond78) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond79 Using cfiCommon0
        CFI (cfiCond79) NoFunction
        CFI (cfiCond79) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_18
        CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond79) CFA_SP SP+0
        CFI (cfiCond79) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_0
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 23)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_1
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 20)
        CFI Block cfiPicker82 Using cfiCommon1
        CFI (cfiPicker82) NoFunction
        CFI (cfiPicker82) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_22:
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiCond78
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiPicker82
//  920 
//  921 /*********************************************************************
//  922  * @fn      SAPI_Init
//  923  *
//  924  * @brief   Initialization function for the Simple API Task.
//  925  *          This is called during initialization and should contain
//  926  *          any application specific initialization (ie. hardware
//  927  *          initialization/setup, table initialization, power up
//  928  *          notification ... ).
//  929  *
//  930  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  931  *                    used to send messages and set timers.
//  932  *
//  933  * @return  none
//  934  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  935 void SAPI_Init( byte task_id )
SAPI_Init:
        CFI Block cfiBlock83 Using cfiCommon0
        CFI Function SAPI_Init
        CODE
//  936 {
        FUNCALL SAPI_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_Init, afSetMatch
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_Init, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  937   sapi_TaskID = task_id;
        MOV     DPTR,#sapi_TaskID
        MOVX    @DPTR,A
//  938   sapi_bindInProgress = 0xffff;
        MOV     DPTR,#sapi_bindInProgress
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  939 
//  940   sapi_epDesc.task_id = &sapi_TaskID;
        MOV     DPTR,#sapi_epDesc + 1
        MOV     A,#sapi_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(sapi_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  941   sapi_epDesc.endPoint = 0;
        MOV     DPTR,#sapi_epDesc
        CLR     A
        MOVX    @DPTR,A
//  942   
//  943 #if ( SAPI_CB_FUNC )
//  944   sapi_epDesc.endPoint = zb_SimpleDesc.EndPoint;
        MOV     DPTR,#zb_SimpleDesc
        MOVX    A,@DPTR
        MOV     DPTR,#sapi_epDesc
        MOVX    @DPTR,A
//  945   sapi_epDesc.task_id = &sapi_TaskID;
//  946   sapi_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&zb_SimpleDesc;
        MOV     DPTR,#sapi_epDesc + 3
        MOV     A,#zb_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zb_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  947   sapi_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  948 
//  949   // Register the endpoint/interface description with the AF
//  950   afRegister( &sapi_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#sapi_epDesc & 0xff
        MOV     R3,#(sapi_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  951 #endif
//  952 
//  953   // Turn off match descriptor response by default
//  954   afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
        ; Setup parameters for call to function afSetMatch
        LCALL   ?Subroutine4 & 0xFFFF
//  955 
//  956   // Register callback evetns from the ZDApp
//  957   ZDO_RegisterForZDOMsg( sapi_TaskID, NWK_addr_rsp );
??CrossCallReturnLabel_17:
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x0
        MOV     R3,#-0x80
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  958   ZDO_RegisterForZDOMsg( sapi_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  959   // Set an event to start the application
//  960   osal_set_event(task_id, ZB_ENTRY_EVENT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     A,R6
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  961 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock83
//  962 /*********************************************************************
//  963  * @fn      SAPI_SendCback
//  964  *
//  965  * @brief   Sends a message to the sapi task ( itself ) so that a
//  966  *           callback can be generated later.
//  967  *
//  968  * @return  none
//  969  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  970 void SAPI_SendCback( uint8 event, uint8 status, uint16 data )
SAPI_SendCback:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function SAPI_SendCback
        CODE
//  971 {
        FUNCALL SAPI_SendCback, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SAPI_SendCback, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  972   sapi_CbackEvent_t *pMsg;
//  973 
//  974   pMsg = (sapi_CbackEvent_t *)osal_msg_allocate( sizeof(sapi_CbackEvent_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  975   if( pMsg )
        MOV     A,R2
        ORL     A,R3
        JZ      ??SAPI_SendCback_0
//  976   {
//  977     pMsg->hdr.event = event;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  978     pMsg->hdr.status = status;
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  979     pMsg->data = data;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  980 
//  981     osal_msg_send( sapi_TaskID, (uint8 *)pMsg );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  982   }
//  983 
//  984 }
??SAPI_SendCback_0:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock84

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SystemReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SystemReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_StartRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_StartRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_BindDevice?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_BindDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_PermitJoiningRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_PermitJoiningRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_AllowBind?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_AllowBind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SendDataRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SendDataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_ReadConfiguration?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_ReadConfiguration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_WriteConfiguration?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_WriteConfiguration

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_GetDeviceInfo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_GetDeviceInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_FindDeviceRequest?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_FindDeviceRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SAPI_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SAPI_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SAPI_ProcessZDOMsgs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SAPI_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SAPI_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SAPI_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SAPI_SendCback?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SAPI_SendCback

        END
//  985 
//  986 #if OSAL_SAPI
//  987 /*********************************************************************
//  988  * @fn      osalInitTasks
//  989  *
//  990  * @brief   This function invokes the initialization function for each task.
//  991  *
//  992  * @param   void
//  993  *
//  994  * @return  none
//  995  */
//  996 void osalInitTasks( void )
//  997 {
//  998   uint8 taskID = 0;
//  999 
// 1000   tasksEvents = (uint16 *)osal_mem_alloc( sizeof( uint16 ) * tasksCnt);
// 1001   osal_memset( tasksEvents, 0, (sizeof( uint16 ) * tasksCnt));
// 1002 
// 1003   macTaskInit( taskID++ );
// 1004   nwk_init( taskID++ );
// 1005   Hal_Init( taskID++ );
// 1006 #if defined( MT_TASK )
// 1007   MT_TaskInit( taskID++ );
// 1008 #endif
// 1009   APS_Init( taskID++ );
// 1010   ZDApp_Init( taskID++ );
// 1011   SAPI_Init( taskID );
// 1012 }
// 1013 #endif
// 1014 
// 1015 /*********************************************************************
// 1016 *********************************************************************/
// 1017 
// 
// 1 970 bytes in segment BANKED_CODE
//    84 bytes in segment BANK_RELAYS
//     9 bytes in segment XDATA_Z
// 
// 2 054 bytes of CODE  memory
//     9 bytes of XDATA memory
//
//Errors: none
//Warnings: 1
