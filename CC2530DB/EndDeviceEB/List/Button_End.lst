###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         06/Sep/2017  22:46:12 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\Source\Button_End.c                 #
#    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6         #
#                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ #
#                          ..\..\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO    #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zig #
#                          bee\Projects\zstack\Samples\SensorSys\Source\Butto #
#                          n_End.c -D NWK_AUTO_POLL -D HOLD_AUTO_START -D     #
#                          REFLECTOR -D POWER_SAVING -D NV_INIT -D            #
#                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D            #
#                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D xMT_SAPI_CB_FUNC  #
#                          -lC D:\ProgramData\Hardware\zigbee\Projects\zstack #
#                          \Samples\SensorSys\CC2530DB\EndDeviceEB\List\ -lA  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\          #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e        #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\ -I                     #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\Source\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\   #
#                          -I D:\ProgramData\Hardware\zigbee\Projects\zstack\ #
#                          Samples\SensorSys\CC2530DB\..\..\..\..\..\Componen #
#                          ts\hal\include\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\ -I         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\ -I D:\ProgramData\Hardware\zigbee\Pro #
#                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\ -I D:\ProgramData\Hardware\zi #
#                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\.. #
#                          \..\..\..\..\Components\mac\low_level\srf04\single #
#                          _chip\ -I D:\ProgramData\Hardware\zigbee\Projects\ #
#                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\C #
#                          omponents\mt\ -I D:\ProgramData\Hardware\zigbee\Pr #
#                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ #
#                          ..\..\Components\osal\include\ -I                  #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\ -I D:\ProgramData\Hardware\zigbee\ #
#                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\. #
#                          .\..\..\Components\services\sdata\ -I              #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\ -I D:\ProgramData\Hardware\zigbee\Projec #
#                          ts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\ -I D:\ProgramData\Hardware\zigbee\Proj #
#                          ects\zstack\Samples\SensorSys\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\ -I D:\ProgramData\Hardware\zigbee\Proje #
#                          cts\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\ -I D:\ProgramData\Hardware\zigbee\Projects\z #
#                          stack\Samples\SensorSys\CC2530DB\..\..\..\..\..\Co #
#                          mponents\zmac\f8w\ -Ohz --require_prototypes       #
#    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\List\Button_En #
#                          d.lst                                              #
#    Object file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sam #
#                          ples\SensorSys\CC2530DB\EndDeviceEB\Obj\Button_End #
#                          .r51                                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Button_End.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          #include "sapi.h"
      7          
      8          #include "SensorSys_End.h"
      9          #include "DebugTrace.h"
     10          
     11          #if !defined( WIN32 )
     12          	#include "OnBoard.h"
     13          #endif
     14          
     15          /* HAL */
     16          #include "hal_led.h"
     17          #include "hal_key.h"
     18          #include "hal_uart.h"
     19          
     20          /*********************************************************************
     21           * MACROS
     22           */
     23          
     24          /*********************************************************************
     25           * CONSTANTS
     26           */
     27          
     28          /*********************************************************************
     29           * TYPEDEFS
     30           */
     31          
     32          /*********************************************************************
     33           * GLOBAL VARIABLES
     34           */
     35          
     36          
     37          
     38          
     39          
     40          
     41          // Button 端点的簇ID
     42          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     43          const cId_t Button_ClusterList[BUTTON_MAX_CLUSTERS] =
   \                     Button_ClusterList:
   \   000000   0300         DW 3
   \   000002   0000         DW 0
     44          {
     45          	BUTTON_CLUSTERID
     46          };
     47          
     48          // Button 端点简单描述符

   \                                 In  segment XDATA_ROM_C, align 1
     49          const SimpleDescriptionFormat_t Button_SimpleDesc =
   \                     Button_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW Button_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW Button_ClusterList
     50          {
     51          	BUTTON_ENDPOINT,           //  int Endpoint;
     52          	SYS_PROFID,                //  uint16 AppProfId[2];
     53          	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
     54          	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
     55          	SYS_FLAGS,                 //  int   AppFlags:4;
     56          	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     57          	(cId_t *)Button_ClusterList,  //  byte *pAppInClusterList;
     58          	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     59          	(cId_t *)Button_ClusterList   //  byte *pAppInClusterList;
     60          };
     61          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     62          endPointDesc_t Button_epDesc;
   \                     Button_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     63          
     64          /*********************************************************************
     65           * EXTERNAL VARIABLES
     66           */
     67          extern uint8 myAppState;
     68          
     69          /*********************************************************************
     70           * EXTERNAL FUNCTIONS
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL VARIABLES
     75           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          static uint8 keys_shift = 0;
   \                     keys_shift:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          static uint8 type_join;
   \                     type_join:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     78          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     79          byte Button_TaskID;
   \                     Button_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     80          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          afAddrType_t Button_DstAddr;
   \                     Button_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
     82          
     83          
     84          /*********************************************************************
     85           * LOCAL FUNCTIONS
     86           */
     87          void Button_Init( byte task_id );
     88          UINT16 Button_ProcessEvent( byte task_id, UINT16 events );
     89          void Button_HandleKeys( byte shift, byte keys );
     90          
     91          
     92          /*********************************************************************
     93           * @fn      Button_Init
     94           *
     95           * @brief   Initialization function for the Generic App Task.
     96           *          This is called during initialization and should contain
     97           *          any application specific initialization (ie. hardware
     98           *          initialization/setup, table initialization, power up
     99           *          notificaiton ... ).
    100           *
    101           * @param   task_id - the ID assigned by OSAL.  This ID should be
    102           *                    used to send messages and set timers.
    103           *
    104           * @return  none
    105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    106          void Button_Init( byte task_id )
   \                     Button_Init:
    107          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    108          	Button_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#Button_TaskID
   \   000009   F0           MOVX    @DPTR,A
    109          
    110          	// Device hardware initialization can be added here or in main() (Zmain.c).
    111          	// If the hardware is application specific - add it here.
    112          	// If the hardware is other parts of the device add it in main().
    113          
    114          	Button_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#Button_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    115          	Button_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    116          	Button_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#Button_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   F0           MOVX    @DPTR,A
    117          
    118          	// Fill out the endpoint description.
    119          	Button_epDesc.endPoint = BUTTON_ENDPOINT;
   \   000017   90....       MOV     DPTR,#Button_epDesc
   \   00001A   740A         MOV     A,#0xa
   \   00001C   F0           MOVX    @DPTR,A
    120          	Button_epDesc.task_id = &Button_TaskID;
   \   00001D   A3           INC     DPTR
   \   00001E   74..         MOV     A,#Button_TaskID & 0xff
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   74..         MOV     A,#(Button_TaskID >> 8) & 0xff
   \   000024   F0           MOVX    @DPTR,A
    121          	Button_epDesc.simpleDesc
    122          						= (SimpleDescriptionFormat_t *)&Button_SimpleDesc;
   \   000025   A3           INC     DPTR
   \   000026   74..         MOV     A,#Button_SimpleDesc & 0xff
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   74..         MOV     A,#(Button_SimpleDesc >> 8) & 0xff
   \   00002C   F0           MOVX    @DPTR,A
    123          	Button_epDesc.latencyReq = noLatencyReqs;
   \   00002D   A3           INC     DPTR
   \   00002E   E4           CLR     A
   \   00002F   F0           MOVX    @DPTR,A
    124          
    125          	// Register the endpoint description with the AF
    126          	afRegister( &Button_epDesc );
   \   000030                ; Setup parameters for call to function afRegister
   \   000030   7A..         MOV     R2,#Button_epDesc & 0xff
   \   000032   7B..         MOV     R3,#(Button_epDesc >> 8) & 0xff
   \   000034   12....       LCALL   ??afRegister?relay
    127          
    128          	// Register for all key events - This app will handle all key events
    129          	RegisterForKeys( Button_TaskID );
   \   000037                ; Setup parameters for call to function RegisterForKeys
   \   000037   90....       MOV     DPTR,#Button_TaskID
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   ??RegisterForKeys?relay
    130           
    131          	//	ZDO_RegisterForZDOMsg( Button_TaskID, End_Device_Bind_rsp );
    132          	ZDO_RegisterForZDOMsg( Button_TaskID, Match_Desc_rsp );
   \   00003F                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00003F   7A06         MOV     R2,#0x6
   \   000041   7B80         MOV     R3,#-0x80
   \   000043   90....       MOV     DPTR,#Button_TaskID
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    133          
    134          	HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \   00004B                ; Setup parameters for call to function HalLedSet
   \   00004B   12....       LCALL   ?Subroutine1 & 0xFFFF
    135            HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    136            HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
    137          
    138          }
   \                     ??CrossCallReturnLabel_0:
   \   00004E                REQUIRE ?Subroutine0
   \   00004E                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7A01         MOV     R2,#0x1
   \   000002   7901         MOV     R1,#0x1
   \   000004   12....       LCALL   ??HalLedSet?relay
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007                ; Setup parameters for call to function HalLedSet
   \   000007   7A01         MOV     R2,#0x1
   \   000009   7902         MOV     R1,#0x2
   \   00000B   12....       LCALL   ??HalLedSet?relay
   \   00000E                ; Setup parameters for call to function HalLedSet
   \   00000E                ; Setup parameters for call to function HalLedSet
   \   00000E   7A01         MOV     R2,#0x1
   \   000010   7904         MOV     R1,#0x4
   \   000012   12....       LCALL   ??HalLedSet?relay
   \   000015   22           RET
    139          
    140          /*********************************************************************
    141           * @fn      Button_ProcessEvent
    142           *
    143           * @brief   Generic Application Task event processor.  This function
    144           *          is called to process all events for the task.  Events
    145           *          include timers, messages and any other user defined events.
    146           *
    147           * @param   task_id  - The OSAL assigned task ID.
    148           * @param   events - events to process.  This is a bit map and can
    149           *                   contain more than one event.
    150           *
    151           * @return  none
    152           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    153          UINT16 Button_ProcessEvent( byte task_id, UINT16 events )
   \                     Button_ProcessEvent:
    154          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    155          	afIncomingMSGPacket_t *MSGpkt = NULL;
    156          	(void)task_id;  // Intentionally unreferenced parameter
    157          
    158          	if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   603F         JZ      ??Button_ProcessEvent_0
    159          	{
    160              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   8025         SJMP    ??Button_ProcessEvent_1
    161              while ( MSGpkt )
    162              {
    163                switch ( MSGpkt->hdr.event )
   \                     ??Button_ProcessEvent_2:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   64C0         XRL     A,#0xc0
   \   000017   7010         JNZ     ??Button_ProcessEvent_3
    164                {
    165                	case KEY_CHANGE:
    166                		Button_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
   \   000019                ; Setup parameters for call to function Button_HandleKeys
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??Button_HandleKeys?relay
    167                	break;
    168                }
    169                // Release the memory
    170                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??Button_ProcessEvent_3:
   \   000029                ; Setup parameters for call to function osal_msg_deallocate
   \   000029   EE           MOV     A,R6
   \   00002A   FA           MOV     R2,A
   \   00002B   EF           MOV     A,R7
   \   00002C   FB           MOV     R3,A
   \   00002D   12....       LCALL   ??osal_msg_deallocate?relay
    171          
    172                // Next
    173                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Button_TaskID );
   \   000030                ; Setup parameters for call to function osal_msg_receive
   \   000030   90....       MOV     DPTR,#Button_TaskID
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   \                     ??Button_ProcessEvent_1:
   \   000035   12....       LCALL   ??osal_msg_receive?relay
   \   000038   8A..         MOV     ?V0 + 4,R2
   \   00003A   8B..         MOV     ?V0 + 5,R3
   \   00003C   AE..         MOV     R6,?V0 + 4
   \   00003E   AF..         MOV     R7,?V0 + 5
    174              }
   \   000040   EE           MOV     A,R6
   \   000041   4F           ORL     A,R7
   \   000042   70CC         JNZ     ??Button_ProcessEvent_2
    175              return (events ^ SYS_EVENT_MSG);
   \   000044   AA..         MOV     R2,?V0 + 0
   \   000046   E5..         MOV     A,?V0 + 1
   \   000048   6480         XRL     A,#0x80
   \   00004A   FB           MOV     R3,A
   \   00004B   8004         SJMP    ??Button_ProcessEvent_4
    176          	}
    177            return 0;
   \                     ??Button_ProcessEvent_0:
   \   00004D   7A00         MOV     R2,#0x0
   \   00004F   7B00         MOV     R3,#0x0
   \                     ??Button_ProcessEvent_4:
   \   000051   7F06         MOV     R7,#0x6
   \   000053   02....       LJMP    ?BANKED_LEAVE_XDATA
    178          }
    179          
    180          /*********************************************************************
    181           * @fn      Button_HandleKeys
    182           *
    183           * @brief   Handles all key events for this device.
    184           *
    185           * @param   shift - true if in shift/alt.
    186           * @param   keys - bit field for key events. Valid entries:
    187           *                 HAL_KEY_SW_4
    188           *                 HAL_KEY_SW_3
    189           *                 HAL_KEY_SW_2
    190           *                 HAL_KEY_SW_1
    191           *
    192           * @return  none
    193           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    194          void Button_HandleKeys( byte shift, byte keys )
   \                     Button_HandleKeys:
    195          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    196          	
    197          	// Shift is used to make each button/switch dual purpose.
    198          	if ( keys_shift )
   \   000007   90....       MOV     DPTR,#keys_shift
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6022         JZ      ??Button_HandleKeys_0
    199          	{
    200          		// Allow Binding
    201          		if ( keys & HAL_KEY_SW_1 )
   \   00000D   EE           MOV     A,R6
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   5040         JNC     ??Button_HandleKeys_1
    202          		{
    203          			if(type_join)
   \   000012   90....       MOV     DPTR,#type_join
   \   000015   E0           MOVX    A,@DPTR
   \   000016   603A         JZ      ??Button_HandleKeys_1
    204          			{
    205          				Sensor_AllowBind(10);
   \   000018                ; Setup parameters for call to function Sensor_AllowBind
   \   000018   790A         MOV     R1,#0xa
   \   00001A   12....       LCALL   ??Sensor_AllowBind?relay
    206          				HalLedSet(HAL_LED_1, HAL_LED_MODE_OFF);
   \   00001D                ; Setup parameters for call to function HalLedSet
   \   00001D   7A00         MOV     R2,#0x0
   \   00001F   7901         MOV     R1,#0x1
   \   000021   12....       LCALL   ??HalLedSet?relay
    207          			// osal_start_timerEx(Sys_TaskID, CLOSE_BIND_EVT, 10000);
    208          			
    209          				keys_shift = 0;
   \   000024   90....       MOV     DPTR,#keys_shift
   \   000027   E4           CLR     A
   \   000028   F0           MOVX    @DPTR,A
    210          				type_join = 0;
   \   000029   90....       MOV     DPTR,#type_join
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   8023         SJMP    ??Button_HandleKeys_1
    211          			}
    212          			else
    213          			{
    214          				// wrong endpoint the presend send to
    215          			}
    216          		}
    217          		if ( keys & HAL_KEY_SW_2 )
    218          		{
    219          		}
    220          		if ( keys & HAL_KEY_SW_3 )
    221          		{
    222          		}
    223          		if ( keys & HAL_KEY_SW_4 )
    224          		{
    225          		}
    226          	}
    227          	else
    228          	{
    229          		if ( keys & HAL_KEY_SW_1 )
   \                     ??Button_HandleKeys_0:
   \   00002F   EE           MOV     A,R6
   \   000030   A2E0         MOV     C,0xE0 /* A   */.0
   \   000032   501E         JNC     ??Button_HandleKeys_1
    230          		{
    231          			if(myAppState == APP_INIT)
   \   000034   90....       MOV     DPTR,#myAppState
   \   000037   E0           MOVX    A,@DPTR
   \   000038   700E         JNZ     ??Button_HandleKeys_2
    232          				osal_set_event(sapi_TaskID, ZB_ENTRY_EVENT);
   \   00003A                ; Setup parameters for call to function osal_set_event
   \   00003A   7A00         MOV     R2,#0x0
   \   00003C   7B10         MOV     R3,#0x10
   \   00003E   90....       MOV     DPTR,#sapi_TaskID
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F9           MOV     R1,A
   \   000043   12....       LCALL   ??osal_set_event?relay
   \   000046   800A         SJMP    ??Button_HandleKeys_1
    233          			else
    234          			{
    235          				HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
   \                     ??Button_HandleKeys_2:
   \   000048                ; Setup parameters for call to function HalLedSet
   \   000048   12....       LCALL   ?Subroutine1 & 0xFFFF
    236          	 			HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
    237          				HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
    238          				HalLedSet ( HAL_LED_4, HAL_LED_MODE_ON );
   \                     ??CrossCallReturnLabel_1:
   \   00004B                ; Setup parameters for call to function HalLedSet
   \   00004B   7A01         MOV     R2,#0x1
   \   00004D   7908         MOV     R1,#0x8
   \   00004F   12....       LCALL   ??HalLedSet?relay
    239          			}
    240          		}
    241          
    242          		if ( keys & HAL_KEY_SW_2 )
    243          		{
    244          		/*
    245          			HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    246          
    247          			// 想绑定另一个端点
    248          			dstAddr.addrMode = Addr16Bit;
    249          			dstAddr.addr.shortAddr = 0x0000; 
    250          			ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
    251          														Button_epDesc.endPoint,
    252          														SENSORSYS_PROFID,
    253          														SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    254          														SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    255          														FALSE );*/
    256          		}
    257          
    258          		if ( keys & HAL_KEY_SW_3 )
    259          		{
    260          		}
    261          		
    262          		if ( keys & HAL_KEY_SW_4 )
    263          		{
    264          		/*	HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
    265          			dstAddr.addrMode = AddrBroadcast;
    266          			dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    267          			ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    268          												SENSORSYS_PROFID,
    269          												SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    270          												SENSORSYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
    271          												FALSE );
    272          		*/
    273          		}
    274          	}
    275          }
   \                     ??Button_HandleKeys_1:
   \   000052   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Button_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Button_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Button_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Button_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Button_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Button_HandleKeys

   Maximum stack usage in bytes:

     Function                   ISTACK PSTACK XSTACK
     --------                   ------ ------ ------
     Button_HandleKeys              0      0     23
       -> Sensor_AllowBind          0      0     18
       -> HalLedSet                 0      0     18
       -> osal_set_event            0      0     18
       -> HalLedSet                 0      0     18
       -> HalLedSet                 0      0     18
       -> HalLedSet                 0      0     18
       -> HalLedSet                 0      0     18
     Button_Init                    0      0      9
       -> afRegister                0      0     18
       -> RegisterForKeys           0      0     18
       -> ZDO_RegisterForZDOMsg     0      0     18
       -> HalLedSet                 0      0     18
       -> HalLedSet                 0      0     18
       -> HalLedSet                 0      0     18
     Button_ProcessEvent            0      0     14
       -> osal_msg_receive          0      0     28
       -> Button_HandleKeys         0      0     28
       -> osal_msg_deallocate       0      0     28
       -> osal_msg_receive          0      0     28


   Segment part sizes:

     Function/Label              Bytes
     --------------              -----
     Button_ClusterList             4
     Button_SimpleDesc             12
     Button_epDesc                  6
     keys_shift                     1
     type_join                      1
     Button_TaskID                  1
     Button_DstAddr                12
     Button_Init                   78
     ?Subroutine0                   5
     ?Subroutine1                  22
     Button_ProcessEvent           86
     Button_HandleKeys             85
     ??Button_Init?relay            6
     ??Button_ProcessEvent?relay    6
     ??Button_HandleKeys?relay      6

 
 276 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
  16 bytes in segment XDATA_ROM_C
  21 bytes in segment XDATA_Z
 
 294 bytes of CODE  memory
  16 bytes of CONST memory
  21 bytes of XDATA memory

Errors: none
Warnings: none
