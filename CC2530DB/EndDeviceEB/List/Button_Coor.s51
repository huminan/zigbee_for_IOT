///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        05/Sep/2017  22:35:40 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\Source\Button_Coor.c              /
//    Command line       =  -f D:\ProgramData\Hardware\zigbee\Projects\zstack /
//                          \Samples\SensorSys\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_TX_DATA_MAX=3 -DMAC_CFG_TX_MAX=6        /
//                          -DMAC_CFG_RX_MAX=3) -f D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\CC2530DB\. /
//                          .\..\..\Tools\CC2530DB\f8wConfig.cfg              /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 D:\ProgramData\Hardware\zi /
//                          gbee\Projects\zstack\Samples\SensorSys\Source\But /
//                          ton_Coor.c -D NWK_AUTO_POLL -D HOLD_AUTO_START    /
//                          -D REFLECTOR -D POWER_SAVING -D NV_INIT -D        /
//                          xNV_RESTORE -D xZTOOL_P1 -D xMT_TASK -D           /
//                          xMT_SYS_FUNC -D xMT_SAPI_FUNC -D                  /
//                          xMT_SAPI_CB_FUNC -lC D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\End /
//                          DeviceEB\List\ -lA D:\ProgramData\Hardware\zigbee /
//                          \Projects\zstack\Samples\SensorSys\CC2530DB\EndDe /
//                          viceEB\List\ --diag_suppress Pe001,Pa010 -o       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\Obj\ -e      /
//                          --no_code_motion --debug --core=plain             /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\ -I                      /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\Source\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\ZMain\TI2530DB\ /
//                           -I D:\ProgramData\Hardware\zigbee\Projects\zstac /
//                          k\Samples\SensorSys\CC2530DB\..\..\..\..\..\Compo /
//                          nents\hal\include\ -I D:\ProgramData\Hardware\zig /
//                          bee\Projects\zstack\Samples\SensorSys\CC2530DB\.. /
//                          \..\..\..\..\Components\hal\target\CC2530EB\ -I   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\ -I D:\ProgramData\Hardware\zigbee\ /
//                          Projects\zstack\Samples\SensorSys\CC2530DB\..\..\ /
//                          ..\..\..\Components\mac\high_level\ -I            /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\ -I                         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\ -I             /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\ -I D:\ProgramData\Hardware\zigbee\Projects\ /
//                          zstack\Samples\SensorSys\CC2530DB\..\..\..\..\..\ /
//                          Components\osal\include\ -I                       /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\services\saddr\ -I D:\ProgramData\Hardware\zigb /
//                          ee\Projects\zstack\Samples\SensorSys\CC2530DB\..\ /
//                          ..\..\..\..\Components\services\sdata\ -I         /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\ -I D:\ProgramData\Hardware\zigbee\Pro /
//                          jects\zstack\Samples\SensorSys\CC2530DB\..\..\..\ /
//                          ..\..\Components\stack\nwk\ -I                    /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\ -I D:\ProgramData\Hardware\zigbee\P /
//                          rojects\zstack\Samples\SensorSys\CC2530DB\..\..\. /
//                          .\..\..\Components\stack\sec\ -I                  /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\ -I D:\ProgramData\Hardware\zigbee\Pr /
//                          ojects\zstack\Samples\SensorSys\CC2530DB\..\..\.. /
//                          \..\..\Components\stack\zdo\ -I                   /
//                          D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\ -I D:\ProgramData\Hardware\zigbee\Project /
//                          s\zstack\Samples\SensorSys\CC2530DB\..\..\..\..\. /
//                          .\Components\zmac\f8w\ -Ohz --require_prototypes  /
//    List file          =  D:\ProgramData\Hardware\zigbee\Projects\zstack\Sa /
//                          mples\SensorSys\CC2530DB\EndDeviceEB\List\Button_ /
//                          Coor.s51                                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME Button_Coor

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Button_HandleKeys?relay
        FUNCTION ??Button_HandleKeys?relay,0203H
        PUBLIC ??Button_Init?relay
        FUNCTION ??Button_Init?relay,0203H
        PUBLIC ??Button_ProcessEvent?relay
        FUNCTION ??Button_ProcessEvent?relay,0203H
        PUBLIC ??Button_ProcessZDOMsgs?relay
        FUNCTION ??Button_ProcessZDOMsgs?relay,0203H
        PUBLIC Button_ClusterList
        PUBLIC Button_DstAddr
        PUBLIC Button_HandleKeys
        FUNCTION Button_HandleKeys,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC Button_Init
        FUNCTION Button_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Button_ProcessEvent
        FUNCTION Button_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC Button_ProcessZDOMsgs
        FUNCTION Button_ProcessZDOMsgs,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        PUBLIC Button_SimpleDesc
        PUBLIC Button_TaskID
        PUBLIC Button_epDesc
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
Sensor_BindDevice   SYMBOL "Sensor_BindDevice"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
APSME_BindRequest   SYMBOL "APSME_BindRequest"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
ZDP_IEEEAddrReq     SYMBOL "ZDP_IEEEAddrReq"
Sys_SendPreBindMessage SYMBOL "Sys_SendPreBindMessage"
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
??APSME_BindRequest?relay SYMBOL "?relay", APSME_BindRequest
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??Sensor_BindDevice?relay SYMBOL "?relay", Sensor_BindDevice
??Sys_SendPreBindMessage?relay SYMBOL "?relay", Sys_SendPreBindMessage
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
??ZDP_IEEEAddrReq?relay SYMBOL "?relay", ZDP_IEEEAddrReq
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??zb_SendDataRequest?relay SYMBOL "?relay", zb_SendDataRequest
Button_HandleKeys   SYMBOL "Button_HandleKeys"
??Button_HandleKeys?relay SYMBOL "?relay", Button_HandleKeys
Button_Init         SYMBOL "Button_Init"
??Button_Init?relay SYMBOL "?relay", Button_Init
Button_ProcessEvent SYMBOL "Button_ProcessEvent"
??Button_ProcessEvent?relay SYMBOL "?relay", Button_ProcessEvent
Button_ProcessZDOMsgs SYMBOL "Button_ProcessZDOMsgs"
??Button_ProcessZDOMsgs?relay SYMBOL "?relay", Button_ProcessZDOMsgs

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sensor_BindDevice
        FUNCTION Sensor_BindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_BindRequest
        FUNCTION APSME_BindRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_IEEEAddrReq
        FUNCTION ZDP_IEEEAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Sys_SendPreBindMessage
        FUNCTION Sys_SendPreBindMessage,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??APSME_BindRequest?relay
        FUNCTION ??APSME_BindRequest?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??Sensor_BindDevice?relay
        FUNCTION ??Sensor_BindDevice?relay,00H
        EXTERN ??Sys_SendPreBindMessage?relay
        FUNCTION ??Sys_SendPreBindMessage?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_IEEEAddrReq?relay
        FUNCTION ??ZDP_IEEEAddrReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??zb_SendDataRequest?relay
        FUNCTION ??zb_SendDataRequest?relay,00H
        EXTERN ZDAppTaskID
        EXTERN sapi_TaskID
        EXTERN sensor_bindInProgress
        EXTERN sysSeqNumber

// D:\ProgramData\Hardware\zigbee\Projects\zstack\Samples\SensorSys\Source\Button_Coor.c
//    1 /*********************************************************************
//    2  * INCLUDES
//    3  */
//    4 #include "OSAL.h"
//    5 #include "AF.h"
//    6 #include "ZDApp.h"
//    7 #include "ZDObject.h"
//    8 #include "ZDProfile.h"
//    9 #include "sapi.h"
//   10 
//   11 #include "SensorSys_Coor.h"
//   12 #include "DebugTrace.h"
//   13 
//   14 #if !defined( WIN32 )
//   15   #include "OnBoard.h"
//   16 #endif
//   17 
//   18 /* HAL */
//   19 #include "hal_led.h"
//   20 #include "hal_key.h"
//   21 #include "hal_uart.h"
//   22 
//   23 /*********************************************************************
//   24  * MACROS
//   25  */
//   26 
//   27 /*********************************************************************
//   28  * CONSTANTS
//   29  */
//   30 
//   31 /*********************************************************************
//   32  * TYPEDEFS
//   33  */
//   34 
//   35 /*********************************************************************
//   36  * GLOBAL VARIABLES
//   37  */
//   38 
//   39 // Button 端点的簇ID
//   40 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   41 const cId_t Button_ClusterList[BUTTON_MAX_CLUSTERS] =
Button_ClusterList:
        DATA16
        DW 3
        DW 0
//   42 {
//   43   BUTTON_CLUSTERID
//   44 };
//   45 
//   46 // Button 端点简单描述符

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   47 const SimpleDescriptionFormat_t Button_SimpleDesc =
Button_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW Button_ClusterList
        DATA8
        DB 2
        DATA16
        DW Button_ClusterList
//   48 {
//   49 	BUTTON_ENDPOINT,           //  int Endpoint;
//   50 	SYS_PROFID,                //  uint16 AppProfId[2];
//   51 	SYS_DEVICEID,              //  uint16 AppDeviceId[2];
//   52 	SYS_DEVICE_VERSION,        //  int   AppDevVer:4;
//   53 	SYS_FLAGS,                 //  int   AppFlags:4;
//   54 	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   55 	(cId_t *)Button_ClusterList,  //  byte *pAppInClusterList;
//   56 	BUTTON_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   57 	(cId_t *)Button_ClusterList   //  byte *pAppInClusterList;
//   58 };
//   59 
//   60 /*********************************************************************
//   61  * EXTERNAL VARIABLES
//   62  */
//   63 
//   64 /*********************************************************************
//   65  * EXTERNAL FUNCTIONS
//   66  */
//   67 
//   68 /*********************************************************************
//   69  * LOCAL VARIABLES
//   70  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   71 byte Button_TaskID;
Button_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   72 endPointDesc_t Button_epDesc;
Button_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   73 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   74 afAddrType_t Button_DstAddr;
Button_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//   75 
//   76 
//   77 /*********************************************************************
//   78  * LOCAL FUNCTIONS
//   79  */
//   80 void Button_Init( byte task_id );
//   81 void Button_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//   82 void Button_HandleKeys( byte shift, byte keys );
//   83 
//   84 
//   85 /*********************************************************************
//   86  * @fn      Button_Init
//   87  *
//   88  * @brief   Initialization function for the Generic App Task.
//   89  *          This is called during initialization and should contain
//   90  *          any application specific initialization (ie. hardware
//   91  *          initialization/setup, table initialization, power up
//   92  *          notificaiton ... ).
//   93  *
//   94  * @param   task_id - the ID assigned by OSAL.  This ID should be
//   95  *                    used to send messages and set timers.
//   96  *
//   97  * @return  none
//   98  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   99 void Button_Init( byte task_id )
Button_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function Button_Init
        CODE
//  100 {
        FUNCALL Button_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  101   Button_TaskID = task_id;
        MOV     DPTR,#Button_TaskID
        MOVX    @DPTR,A
//  102 
//  103   // Device hardware initialization can be added here or in main() (Zmain.c).
//  104   // If the hardware is application specific - add it here.
//  105   // If the hardware is other parts of the device add it in main().
//  106 
//  107   Button_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#Button_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  108   Button_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  109   Button_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#Button_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  110 
//  111   // Fill out the endpoint description.
//  112   Button_epDesc.endPoint = BUTTON_ENDPOINT;
        MOV     DPTR,#Button_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  113   Button_epDesc.task_id = &Button_TaskID;
        INC     DPTR
        MOV     A,#Button_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Button_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  114   Button_epDesc.simpleDesc
//  115             = (SimpleDescriptionFormat_t *)&Button_SimpleDesc;
        INC     DPTR
        MOV     A,#Button_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(Button_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  116   Button_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  117 
//  118   // Register the endpoint description with the AF
//  119   afRegister( &Button_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#Button_epDesc & 0xff
        MOV     R3,#(Button_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  120 
//  121   // Register for all key events - This app will handle all key events
//  122   RegisterForKeys( Button_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#Button_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  123 
//  124   // To Update the display...
//  125   ZDO_RegisterForZDOMsg( Button_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#Button_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  126 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  127 
//  128 /*********************************************************************
//  129  * @fn      Button_ProcessEvent
//  130  *
//  131  * @brief   Generic Application Task event processor.  This function
//  132  *          is called to process all events for the task.  Events
//  133  *          include timers, messages and any other user defined events.
//  134  *
//  135  * @param   task_id  - The OSAL assigned task ID.
//  136  * @param   events - events to process.  This is a bit map and can
//  137  *                   contain more than one event.
//  138  *
//  139  * @return  none
//  140  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  141 UINT16 Button_ProcessEvent( byte task_id, UINT16 events )
Button_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Button_ProcessEvent
        CODE
//  142 {
        FUNCALL Button_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, Button_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, Button_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessEvent, Sensor_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  143   afIncomingMSGPacket_t *MSGpkt = NULL;
//  144 
//  145   (void)task_id;  // Intentionally unreferenced parameter
//  146 
//  147   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??Button_ProcessEvent_0
//  148   {
//  149     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( task_id );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??Button_ProcessEvent_1
//  150     while ( MSGpkt )
//  151     {
//  152       switch ( MSGpkt->hdr.event )
//  153       {
//  154         case ZDO_CB_MSG:  // 收到被绑定节点的rsp
//  155           Button_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt);
//  156           break;
//  157 
//  158         case KEY_CHANGE:
//  159           Button_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
??Button_ProcessEvent_2:
        ; Setup parameters for call to function Button_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Button_HandleKeys?relay
//  160         break;
//  161       }
//  162       // Release the memory
//  163       osal_msg_deallocate( (uint8 *)MSGpkt );
??Button_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  164 
//  165       // Next
//  166       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( Button_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#Button_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
??Button_ProcessEvent_1:
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
        MOV     A,R6
        ORL     A,R7
        JZ      ??Button_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x40
        JZ      ??Button_ProcessEvent_2
        ADD     A,#-0x13
        JNZ     ??Button_ProcessEvent_3
        ; Setup parameters for call to function Button_ProcessZDOMsgs
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Button_ProcessZDOMsgs?relay
        SJMP    ??Button_ProcessEvent_3
//  167     }
//  168    return (events ^ SYS_EVENT_MSG);
??Button_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??Button_ProcessEvent_5
//  169   }
//  170 
//  171   if( events & MATCH_BIND_EVT ) // 广播 match 绑定
??Button_ProcessEvent_0:
        MOV     A,R2
        ANL     A,#0x2
        JZ      ??Button_ProcessEvent_6
//  172   {
//  173     Sensor_BindDevice(TRUE, BUTTON_CMD_ID, NULL);
        ; Setup parameters for call to function Sensor_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   ??Sensor_BindDevice?relay
//  174     // HalLedSet(HAL_LED_2, HAL_LED_MODE_OFF); // 亮D2
//  175     return (events ^ MATCH_BIND_EVT);
        MOV     A,?V0 + 0
        XRL     A,#0x2
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??Button_ProcessEvent_5
//  176   }
//  177   return 0;
??Button_ProcessEvent_6:
        MOV     R2,#0x0
        MOV     R3,#0x0
??Button_ProcessEvent_5:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  178 }
//  179 
//  180 /*********************************************************************
//  181  * @fn      Button_ProcessZDOMsgs()
//  182  *
//  183  * @brief   Process response messages
//  184  *
//  185  * @param   none
//  186  *
//  187  * @return  none
//  188  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  189 void Button_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
Button_ProcessZDOMsgs:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Button_ProcessZDOMsgs
        CODE
//  190 {
        FUNCALL Button_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessZDOMsgs, APSME_BindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessZDOMsgs, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessZDOMsgs, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_ProcessZDOMsgs, ZDP_IEEEAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  191   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??Button_ProcessZDOMsgs_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??Button_ProcessZDOMsgs_0:
        JZ      $+5
        LJMP    ??Button_ProcessZDOMsgs_1 & 0xFFFF
//  192   {
//  193     case Match_Desc_rsp:
//  194       {
//  195         zAddrType_t dstAddr;
//  196         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  197 
//  198         if ( sensor_bindInProgress != 0xffff )
        MOV     DPTR,#sensor_bindInProgress
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??Button_ProcessZDOMsgs_2
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??Button_ProcessZDOMsgs_2:
        JNZ     $+5
        LJMP    ??Button_ProcessZDOMsgs_1 & 0xFFFF
//  199         {
//  200           // Create a binding table entry
//  201           dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  202           dstAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  203 
//  204           if ( APSME_BindRequest( Button_epDesc.simpleDesc->EndPoint,
//  205                      sensor_bindInProgress, &dstAddr, pRsp->epList[0] ) == ZSuccess )
        ; Setup parameters for call to function APSME_BindRequest
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPTR,#sensor_bindInProgress
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#Button_epDesc + 3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??APSME_BindRequest?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??Button_ProcessZDOMsgs_1
//  206           {
//  207             osal_stop_timerEx(sapi_TaskID,  ZB_BIND_TIMER);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x0
        MOV     R3,#0x20
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  208             osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x6
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x2
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  209 
//  210             // Find IEEE addr
//  211             ZDP_IEEEAddrReq( pRsp->nwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
        ; Setup parameters for call to function ZDP_IEEEAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDP_IEEEAddrReq?relay
//  212             // Send bind confirm callback to application
//  213 #if ( SAPI_CB_FUNC )
//  214             zb_BindConfirm( sensor_bindInProgress, ZB_SUCCESS );
//  215 #endif
//  216             sensor_bindInProgress = 0xffff;
        MOV     DPTR,#sensor_bindInProgress
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  217           }
//  218         }
//  219       }
//  220     break;
//  221   }
//  222 }
??Button_ProcessZDOMsgs_1:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock2
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  223 
//  224 /*********************************************************************
//  225  * @fn      Button_HandleKeys
//  226  *
//  227  * @brief   Handles all key events for this device.
//  228  *
//  229  * @param   shift - true if in shift/alt.
//  230  * @param   keys - bit field for key events. Valid entries:
//  231  *                 HAL_KEY_SW_4
//  232  *                 HAL_KEY_SW_3
//  233  *                 HAL_KEY_SW_2
//  234  *                 HAL_KEY_SW_1
//  235  *
//  236  * @return  none
//  237  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  238 void Button_HandleKeys( byte shift, byte keys )
Button_HandleKeys:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function Button_HandleKeys
        CODE
//  239 {
        FUNCALL Button_HandleKeys, Sys_SendPreBindMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Button_HandleKeys, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  240   // Shift is used to make each button/switch dual purpose.
//  241   if ( shift )
        MOV     A,R6
        JNZ     ??Button_HandleKeys_0
//  242   {
//  243     if ( keys & HAL_KEY_SW_1 )
//  244     {
//  245     }
//  246     if ( keys & HAL_KEY_SW_2 )
//  247     {
//  248     }
//  249     if ( keys & HAL_KEY_SW_3 )
//  250     {
//  251     }
//  252     if ( keys & HAL_KEY_SW_4 )
//  253     {
//  254     }
//  255   }
//  256   else
//  257   {
//  258     if ( keys & HAL_KEY_SW_1 )
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??Button_HandleKeys_1
//  259     {
//  260       Sys_SendPreBindMessage(BUTTON_TYPE_ID);
        ; Setup parameters for call to function Sys_SendPreBindMessage
        MOV     R1,#0x1
        LCALL   ??Sys_SendPreBindMessage?relay
//  261     }
//  262 
//  263     // 对远程端点发送命令
//  264     if ( keys & HAL_KEY_SW_2 )
??Button_HandleKeys_1:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??Button_HandleKeys_0
//  265     {
//  266       //( uint16 destination, uint16 commandId, uint8 len,
//  267       //  uint8 *pData, uint8 handle, uint8 txOptions, uint8 radius )
//  268       zb_SendDataRequest( 0xFFFE,  BUTTON_CMD_ID, 0,
//  269                         (uint8 *)NULL, sysSeqNumber, 0, 0 );
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#sysSeqNumber
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     R1,#0x0
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#-0x2
        MOV     R3,#-0x1
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  270       // 0xFFFE -- 没有目的地址的dstaddr(Match 的 addr)
//  271     }
//  272 
//  273     if ( keys & HAL_KEY_SW_3 )
//  274     {
//  275     }
//  276 
//  277     // 是用来查找有没有东西可以匹配的
//  278     if ( keys & HAL_KEY_SW_4 )
//  279     {/*
//  280       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
//  281       // Initiate a Match Description Request (Service Discovery)
//  282       dstAddr.addrMode = AddrBroadcast;
//  283       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  284       ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
//  285                         SYS_PROFID,
//  286                         SYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  287                         SYS_MAX_CLUSTERS, (cId_t *)Button_ClusterList,
//  288                         FALSE );
//  289                         */
//  290     }
//  291   }
//  292 }
??Button_HandleKeys_0:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock4

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Button_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Button_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Button_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Button_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Button_ProcessZDOMsgs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Button_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Button_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Button_HandleKeys

        END
// 
// 498 bytes in segment BANKED_CODE
//  24 bytes in segment BANK_RELAYS
//  16 bytes in segment XDATA_ROM_C
//  19 bytes in segment XDATA_Z
// 
// 522 bytes of CODE  memory
//  16 bytes of CONST memory
//  19 bytes of XDATA memory
//
//Errors: none
//Warnings: none
